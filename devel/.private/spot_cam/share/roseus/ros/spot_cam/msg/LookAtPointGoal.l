;; Auto-generated. Do not edit!


(when (boundp 'spot_cam::LookAtPointGoal)
  (if (not (find-package "SPOT_CAM"))
    (make-package "SPOT_CAM"))
  (shadow 'LookAtPointGoal (find-package "SPOT_CAM")))
(unless (find-package "SPOT_CAM::LOOKATPOINTGOAL")
  (make-package "SPOT_CAM::LOOKATPOINTGOAL"))

(in-package "ROS")
;;//! \htmlinclude LookAtPointGoal.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass spot_cam::LookAtPointGoal
  :super ros::object
  :slots (_target _image_width _zoom_level _track ))

(defmethod spot_cam::LookAtPointGoal
  (:init
   (&key
    ((:target __target) (instance geometry_msgs::PointStamped :init))
    ((:image_width __image_width) 0.0)
    ((:zoom_level __zoom_level) 0.0)
    ((:track __track) nil)
    )
   (send-super :init)
   (setq _target __target)
   (setq _image_width (float __image_width))
   (setq _zoom_level (float __zoom_level))
   (setq _track __track)
   self)
  (:target
   (&rest __target)
   (if (keywordp (car __target))
       (send* _target __target)
     (progn
       (if __target (setq _target (car __target)))
       _target)))
  (:image_width
   (&optional __image_width)
   (if __image_width (setq _image_width __image_width)) _image_width)
  (:zoom_level
   (&optional __zoom_level)
   (if __zoom_level (setq _zoom_level __zoom_level)) _zoom_level)
  (:track
   (&optional (__track :null))
   (if (not (eq __track :null)) (setq _track __track)) _track)
  (:serialization-length
   ()
   (+
    ;; geometry_msgs/PointStamped _target
    (send _target :serialization-length)
    ;; float32 _image_width
    4
    ;; float32 _zoom_level
    4
    ;; bool _track
    1
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; geometry_msgs/PointStamped _target
       (send _target :serialize s)
     ;; float32 _image_width
       (sys::poke _image_width (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; float32 _zoom_level
       (sys::poke _zoom_level (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; bool _track
       (if _track (write-byte -1 s) (write-byte 0 s))
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; geometry_msgs/PointStamped _target
     (send _target :deserialize buf ptr-) (incf ptr- (send _target :serialization-length))
   ;; float32 _image_width
     (setq _image_width (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; float32 _zoom_level
     (setq _zoom_level (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; bool _track
     (setq _track (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;;
   self)
  )

(setf (get spot_cam::LookAtPointGoal :md5sum-) "216e8536a7d77a61af59b6f7aa3d17c4")
(setf (get spot_cam::LookAtPointGoal :datatype-) "spot_cam/LookAtPointGoal")
(setf (get spot_cam::LookAtPointGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Point the spot cam PTZ at a specific point in space
# The target at which the PTZ should be pointed
geometry_msgs/PointStamped target
# Approximate width that the PTZ image should show. This is prioritised over the zoom level - if both are nonzero,
# this will be used
float32 image_width
# Optical zoom level between 1 and 30 to use
float32 zoom_level
# If true, the camera will track this point as the robot moves
bool track

================================================================================
MSG: geometry_msgs/PointStamped
# This represents a Point with reference coordinate frame and timestamp
Header header
Point point

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

")



(provide :spot_cam/LookAtPointGoal "216e8536a7d77a61af59b6f7aa3d17c4")


