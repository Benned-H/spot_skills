# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from spot_cam/SetIRColormapRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetIRColormapRequest(genpy.Message):
  _md5sum = "69f70a473af7d968f923ffcb40d332eb"
  _type = "spot_cam/SetIRColormapRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# See https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference#ircolormap for definition
uint8 COLORMAP_UNKNOWN=0
# The greyscale colormap maps the minimum value (defined below) to black and the maximum value (defined below) to white
uint8 COLORMAP_GREYSCALE=1
# The jet colormap uses blues for values closer to the minimum, and red values for values closer to the maximum.
uint8 COLORMAP_JET=2
# The inferno colormap maps the minimum value to black and the maximum value to light yellow RGB(252, 252, 164).
# It is also easier to view by those with color blindness
uint8 COLORMAP_INFERNO=3
# The turbo colormap uses blues for values closer to the minumum, red values for values closer to the maximum,
# and addresses some short comings of the jet color map such as false detail, banding and color blindness
uint8 COLORMAP_TURBO=4

# The colormap to use for the IR display
uint8 colormap
# Minimum value for the color mapping in degrees celsius
float32 min
# Maximum value for the color mapping in degrees celsius
float32 max
# If true, automatically derive min and max from the image data. Min and max values are ignored
bool auto_scale
"""
  # Pseudo-constants
  COLORMAP_UNKNOWN = 0
  COLORMAP_GREYSCALE = 1
  COLORMAP_JET = 2
  COLORMAP_INFERNO = 3
  COLORMAP_TURBO = 4

  __slots__ = ['colormap','min','max','auto_scale']
  _slot_types = ['uint8','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       colormap,min,max,auto_scale

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetIRColormapRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.colormap is None:
        self.colormap = 0
      if self.min is None:
        self.min = 0.
      if self.max is None:
        self.max = 0.
      if self.auto_scale is None:
        self.auto_scale = False
    else:
      self.colormap = 0
      self.min = 0.
      self.max = 0.
      self.auto_scale = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B2fB().pack(_x.colormap, _x.min, _x.max, _x.auto_scale))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.colormap, _x.min, _x.max, _x.auto_scale,) = _get_struct_B2fB().unpack(str[start:end])
      self.auto_scale = bool(self.auto_scale)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B2fB().pack(_x.colormap, _x.min, _x.max, _x.auto_scale))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.colormap, _x.min, _x.max, _x.auto_scale,) = _get_struct_B2fB().unpack(str[start:end])
      self.auto_scale = bool(self.auto_scale)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B2fB = None
def _get_struct_B2fB():
    global _struct_B2fB
    if _struct_B2fB is None:
        _struct_B2fB = struct.Struct("<B2fB")
    return _struct_B2fB
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from spot_cam/SetIRColormapResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetIRColormapResponse(genpy.Message):
  _md5sum = "937c9679a518e3a18d831e57125ea522"
  _type = "spot_cam/SetIRColormapResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success
string message
"""
  __slots__ = ['success','message']
  _slot_types = ['bool','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,message

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetIRColormapResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.message is None:
        self.message = ''
    else:
      self.success = False
      self.message = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class SetIRColormap(object):
  _type          = 'spot_cam/SetIRColormap'
  _md5sum = 'e8a4267610857cdc61a42ef5adcd242f'
  _request_class  = SetIRColormapRequest
  _response_class = SetIRColormapResponse
