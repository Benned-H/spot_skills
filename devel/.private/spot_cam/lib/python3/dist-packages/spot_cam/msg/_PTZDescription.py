# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from spot_cam/PTZDescription.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import spot_cam.msg

class PTZDescription(genpy.Message):
  _md5sum = "e115be93750ee1ae6231f38b8b89491a"
  _type = "spot_cam/PTZDescription"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference#ptzdescription
# Name of this ptz (can be virtual)
string name
# Limits in degrees on the pan axis
spot_cam/PTZLimits pan_limit
# Limits in degrees on the pan axis
spot_cam/PTZLimits tilt_limit
# Limits in degrees on the pan axis
spot_cam/PTZLimits zoom_limit
================================================================================
MSG: spot_cam/PTZLimits
# https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference#ptzdescription-limits
# If both max and min are zero, this means the limit is unset. The documentation states that if a limit
# is unset, then all positions are valid.
# https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference#ptzdescription
# Minimum value for the axis
float32 min
# Maximum value for the axis
float32 max"""
  __slots__ = ['name','pan_limit','tilt_limit','zoom_limit']
  _slot_types = ['string','spot_cam/PTZLimits','spot_cam/PTZLimits','spot_cam/PTZLimits']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,pan_limit,tilt_limit,zoom_limit

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PTZDescription, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
      if self.pan_limit is None:
        self.pan_limit = spot_cam.msg.PTZLimits()
      if self.tilt_limit is None:
        self.tilt_limit = spot_cam.msg.PTZLimits()
      if self.zoom_limit is None:
        self.zoom_limit = spot_cam.msg.PTZLimits()
    else:
      self.name = ''
      self.pan_limit = spot_cam.msg.PTZLimits()
      self.tilt_limit = spot_cam.msg.PTZLimits()
      self.zoom_limit = spot_cam.msg.PTZLimits()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6f().pack(_x.pan_limit.min, _x.pan_limit.max, _x.tilt_limit.min, _x.tilt_limit.max, _x.zoom_limit.min, _x.zoom_limit.max))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pan_limit is None:
        self.pan_limit = spot_cam.msg.PTZLimits()
      if self.tilt_limit is None:
        self.tilt_limit = spot_cam.msg.PTZLimits()
      if self.zoom_limit is None:
        self.zoom_limit = spot_cam.msg.PTZLimits()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.pan_limit.min, _x.pan_limit.max, _x.tilt_limit.min, _x.tilt_limit.max, _x.zoom_limit.min, _x.zoom_limit.max,) = _get_struct_6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6f().pack(_x.pan_limit.min, _x.pan_limit.max, _x.tilt_limit.min, _x.tilt_limit.max, _x.zoom_limit.min, _x.zoom_limit.max))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pan_limit is None:
        self.pan_limit = spot_cam.msg.PTZLimits()
      if self.tilt_limit is None:
        self.tilt_limit = spot_cam.msg.PTZLimits()
      if self.zoom_limit is None:
        self.zoom_limit = spot_cam.msg.PTZLimits()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.pan_limit.min, _x.pan_limit.max, _x.tilt_limit.min, _x.tilt_limit.max, _x.zoom_limit.min, _x.zoom_limit.max,) = _get_struct_6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6f = None
def _get_struct_6f():
    global _struct_6f
    if _struct_6f is None:
        _struct_6f = struct.Struct("<6f")
    return _struct_6f
