# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from spot_cam/PTZState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import spot_cam.msg
import std_msgs.msg

class PTZState(genpy.Message):
  _md5sum = "6780ed299706699768ff791d8291261f"
  _type = "spot_cam/PTZState"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# This message covers two different types which have the exact same field names, to reduce duplication. Depending on the topic,
# The meaning of the pan/tilt/zoom values changes.
# https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference#ptzposition
# https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference#ptzvelocity
std_msgs/Header header
# Description of the ptz
spot_cam/PTZDescription ptz
# degrees or degrees per second
float32 pan
# degrees or degrees per second
float32 tilt
# zoom level or zoom level per second
float32 zoom
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: spot_cam/PTZDescription
# https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference#ptzdescription
# Name of this ptz (can be virtual)
string name
# Limits in degrees on the pan axis
spot_cam/PTZLimits pan_limit
# Limits in degrees on the pan axis
spot_cam/PTZLimits tilt_limit
# Limits in degrees on the pan axis
spot_cam/PTZLimits zoom_limit
================================================================================
MSG: spot_cam/PTZLimits
# https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference#ptzdescription-limits
# If both max and min are zero, this means the limit is unset. The documentation states that if a limit
# is unset, then all positions are valid.
# https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference#ptzdescription
# Minimum value for the axis
float32 min
# Maximum value for the axis
float32 max"""
  __slots__ = ['header','ptz','pan','tilt','zoom']
  _slot_types = ['std_msgs/Header','spot_cam/PTZDescription','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ptz,pan,tilt,zoom

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PTZState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ptz is None:
        self.ptz = spot_cam.msg.PTZDescription()
      if self.pan is None:
        self.pan = 0.
      if self.tilt is None:
        self.tilt = 0.
      if self.zoom is None:
        self.zoom = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.ptz = spot_cam.msg.PTZDescription()
      self.pan = 0.
      self.tilt = 0.
      self.zoom = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.ptz.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_9f().pack(_x.ptz.pan_limit.min, _x.ptz.pan_limit.max, _x.ptz.tilt_limit.min, _x.ptz.tilt_limit.max, _x.ptz.zoom_limit.min, _x.ptz.zoom_limit.max, _x.pan, _x.tilt, _x.zoom))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ptz is None:
        self.ptz = spot_cam.msg.PTZDescription()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ptz.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ptz.name = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.ptz.pan_limit.min, _x.ptz.pan_limit.max, _x.ptz.tilt_limit.min, _x.ptz.tilt_limit.max, _x.ptz.zoom_limit.min, _x.ptz.zoom_limit.max, _x.pan, _x.tilt, _x.zoom,) = _get_struct_9f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.ptz.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_9f().pack(_x.ptz.pan_limit.min, _x.ptz.pan_limit.max, _x.ptz.tilt_limit.min, _x.ptz.tilt_limit.max, _x.ptz.zoom_limit.min, _x.ptz.zoom_limit.max, _x.pan, _x.tilt, _x.zoom))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ptz is None:
        self.ptz = spot_cam.msg.PTZDescription()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ptz.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ptz.name = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.ptz.pan_limit.min, _x.ptz.pan_limit.max, _x.ptz.tilt_limit.min, _x.ptz.tilt_limit.max, _x.ptz.zoom_limit.min, _x.ptz.zoom_limit.max, _x.pan, _x.tilt, _x.zoom,) = _get_struct_9f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_9f = None
def _get_struct_9f():
    global _struct_9f
    if _struct_9f is None:
        _struct_9f = struct.Struct("<9f")
    return _struct_9f
