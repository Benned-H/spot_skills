# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from spot_cam/StreamParams.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class StreamParams(genpy.Message):
  _md5sum = "7fa7ed9c6dbde8368621018918a2a544"
  _type = "spot_cam/StreamParams"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference#streamparams
# White balance modes
int8 OFF=-1
# This is not provided, but we add it to be able to distinguish when setting the white balance
int8 UNSET=0
int8 AUTO=1
int8 INCANDESCENT=2
int8 FLUORESCENT=3
int8 WARM_FLUORESCENT=4
int8 DAYLIGHT=5
int8 CLOUDY=6
int8 TWILIGHT=7
int8 SHADE=8
int8 DARK=9

# Compression level target in bits per second
int64 target_bitrate
# How often should the entire feed be refreshed (in frames)
int64 refresh_interval
# How often should an IDR message be sent (in frames)
int64 idr_interval
# Automatic white balance
int8 awb"""
  # Pseudo-constants
  OFF = -1
  UNSET = 0
  AUTO = 1
  INCANDESCENT = 2
  FLUORESCENT = 3
  WARM_FLUORESCENT = 4
  DAYLIGHT = 5
  CLOUDY = 6
  TWILIGHT = 7
  SHADE = 8
  DARK = 9

  __slots__ = ['target_bitrate','refresh_interval','idr_interval','awb']
  _slot_types = ['int64','int64','int64','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       target_bitrate,refresh_interval,idr_interval,awb

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StreamParams, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.target_bitrate is None:
        self.target_bitrate = 0
      if self.refresh_interval is None:
        self.refresh_interval = 0
      if self.idr_interval is None:
        self.idr_interval = 0
      if self.awb is None:
        self.awb = 0
    else:
      self.target_bitrate = 0
      self.refresh_interval = 0
      self.idr_interval = 0
      self.awb = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3qb().pack(_x.target_bitrate, _x.refresh_interval, _x.idr_interval, _x.awb))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 25
      (_x.target_bitrate, _x.refresh_interval, _x.idr_interval, _x.awb,) = _get_struct_3qb().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3qb().pack(_x.target_bitrate, _x.refresh_interval, _x.idr_interval, _x.awb))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 25
      (_x.target_bitrate, _x.refresh_interval, _x.idr_interval, _x.awb,) = _get_struct_3qb().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3qb = None
def _get_struct_3qb():
    global _struct_3qb
    if _struct_3qb is None:
        _struct_3qb = struct.Struct("<3qb")
    return _struct_3qb
