# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from spot_cam/PTZDescriptionArray.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import spot_cam.msg

class PTZDescriptionArray(genpy.Message):
  _md5sum = "bb84fb6777d2423bbf5218a0dc2508f6"
  _type = "spot_cam/PTZDescriptionArray"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """spot_cam/PTZDescription[] ptzs
================================================================================
MSG: spot_cam/PTZDescription
# https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference#ptzdescription
# Name of this ptz (can be virtual)
string name
# Limits in degrees on the pan axis
spot_cam/PTZLimits pan_limit
# Limits in degrees on the pan axis
spot_cam/PTZLimits tilt_limit
# Limits in degrees on the pan axis
spot_cam/PTZLimits zoom_limit
================================================================================
MSG: spot_cam/PTZLimits
# https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference#ptzdescription-limits
# If both max and min are zero, this means the limit is unset. The documentation states that if a limit
# is unset, then all positions are valid.
# https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference#ptzdescription
# Minimum value for the axis
float32 min
# Maximum value for the axis
float32 max"""
  __slots__ = ['ptzs']
  _slot_types = ['spot_cam/PTZDescription[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ptzs

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PTZDescriptionArray, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ptzs is None:
        self.ptzs = []
    else:
      self.ptzs = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.ptzs)
      buff.write(_struct_I.pack(length))
      for val1 in self.ptzs:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v1 = val1.pan_limit
        _x = _v1
        buff.write(_get_struct_2f().pack(_x.min, _x.max))
        _v2 = val1.tilt_limit
        _x = _v2
        buff.write(_get_struct_2f().pack(_x.min, _x.max))
        _v3 = val1.zoom_limit
        _x = _v3
        buff.write(_get_struct_2f().pack(_x.min, _x.max))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ptzs is None:
        self.ptzs = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ptzs = []
      for i in range(0, length):
        val1 = spot_cam.msg.PTZDescription()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _v4 = val1.pan_limit
        _x = _v4
        start = end
        end += 8
        (_x.min, _x.max,) = _get_struct_2f().unpack(str[start:end])
        _v5 = val1.tilt_limit
        _x = _v5
        start = end
        end += 8
        (_x.min, _x.max,) = _get_struct_2f().unpack(str[start:end])
        _v6 = val1.zoom_limit
        _x = _v6
        start = end
        end += 8
        (_x.min, _x.max,) = _get_struct_2f().unpack(str[start:end])
        self.ptzs.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.ptzs)
      buff.write(_struct_I.pack(length))
      for val1 in self.ptzs:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v7 = val1.pan_limit
        _x = _v7
        buff.write(_get_struct_2f().pack(_x.min, _x.max))
        _v8 = val1.tilt_limit
        _x = _v8
        buff.write(_get_struct_2f().pack(_x.min, _x.max))
        _v9 = val1.zoom_limit
        _x = _v9
        buff.write(_get_struct_2f().pack(_x.min, _x.max))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ptzs is None:
        self.ptzs = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ptzs = []
      for i in range(0, length):
        val1 = spot_cam.msg.PTZDescription()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _v10 = val1.pan_limit
        _x = _v10
        start = end
        end += 8
        (_x.min, _x.max,) = _get_struct_2f().unpack(str[start:end])
        _v11 = val1.tilt_limit
        _x = _v11
        start = end
        end += 8
        (_x.min, _x.max,) = _get_struct_2f().unpack(str[start:end])
        _v12 = val1.zoom_limit
        _x = _v12
        start = end
        end += 8
        (_x.min, _x.max,) = _get_struct_2f().unpack(str[start:end])
        self.ptzs.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
