// Generated by gencpp from file spot_cam/StringMultiArray.msg
// DO NOT EDIT!


#ifndef SPOT_CAM_MESSAGE_STRINGMULTIARRAY_H
#define SPOT_CAM_MESSAGE_STRINGMULTIARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace spot_cam
{
template <class ContainerAllocator>
struct StringMultiArray_
{
  typedef StringMultiArray_<ContainerAllocator> Type;

  StringMultiArray_()
    : data()  {
    }
  StringMultiArray_(const ContainerAllocator& _alloc)
    : data(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::spot_cam::StringMultiArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_cam::StringMultiArray_<ContainerAllocator> const> ConstPtr;

}; // struct StringMultiArray_

typedef ::spot_cam::StringMultiArray_<std::allocator<void> > StringMultiArray;

typedef boost::shared_ptr< ::spot_cam::StringMultiArray > StringMultiArrayPtr;
typedef boost::shared_ptr< ::spot_cam::StringMultiArray const> StringMultiArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_cam::StringMultiArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_cam::StringMultiArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_cam::StringMultiArray_<ContainerAllocator1> & lhs, const ::spot_cam::StringMultiArray_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_cam::StringMultiArray_<ContainerAllocator1> & lhs, const ::spot_cam::StringMultiArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_cam

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_cam::StringMultiArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_cam::StringMultiArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_cam::StringMultiArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_cam::StringMultiArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_cam::StringMultiArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_cam::StringMultiArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_cam::StringMultiArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cce5a364f3a3be12c9722c6dcad2fa94";
  }

  static const char* value(const ::spot_cam::StringMultiArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcce5a364f3a3be12ULL;
  static const uint64_t static_value2 = 0xc9722c6dcad2fa94ULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_cam::StringMultiArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_cam/StringMultiArray";
  }

  static const char* value(const ::spot_cam::StringMultiArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_cam::StringMultiArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] data\n"
;
  }

  static const char* value(const ::spot_cam::StringMultiArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_cam::StringMultiArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StringMultiArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_cam::StringMultiArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_cam::StringMultiArray_<ContainerAllocator>& v)
  {
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_CAM_MESSAGE_STRINGMULTIARRAY_H
