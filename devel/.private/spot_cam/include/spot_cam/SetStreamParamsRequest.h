// Generated by gencpp from file spot_cam/SetStreamParamsRequest.msg
// DO NOT EDIT!


#ifndef SPOT_CAM_MESSAGE_SETSTREAMPARAMSREQUEST_H
#define SPOT_CAM_MESSAGE_SETSTREAMPARAMSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <spot_cam/StreamParams.h>

namespace spot_cam
{
template <class ContainerAllocator>
struct SetStreamParamsRequest_
{
  typedef SetStreamParamsRequest_<ContainerAllocator> Type;

  SetStreamParamsRequest_()
    : params()  {
    }
  SetStreamParamsRequest_(const ContainerAllocator& _alloc)
    : params(_alloc)  {
  (void)_alloc;
    }



   typedef  ::spot_cam::StreamParams_<ContainerAllocator>  _params_type;
  _params_type params;





  typedef boost::shared_ptr< ::spot_cam::SetStreamParamsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_cam::SetStreamParamsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetStreamParamsRequest_

typedef ::spot_cam::SetStreamParamsRequest_<std::allocator<void> > SetStreamParamsRequest;

typedef boost::shared_ptr< ::spot_cam::SetStreamParamsRequest > SetStreamParamsRequestPtr;
typedef boost::shared_ptr< ::spot_cam::SetStreamParamsRequest const> SetStreamParamsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_cam::SetStreamParamsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_cam::SetStreamParamsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_cam::SetStreamParamsRequest_<ContainerAllocator1> & lhs, const ::spot_cam::SetStreamParamsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.params == rhs.params;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_cam::SetStreamParamsRequest_<ContainerAllocator1> & lhs, const ::spot_cam::SetStreamParamsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_cam

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_cam::SetStreamParamsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_cam::SetStreamParamsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_cam::SetStreamParamsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_cam::SetStreamParamsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_cam::SetStreamParamsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_cam::SetStreamParamsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_cam::SetStreamParamsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ddc9d6ae532786ed5f1bc25d48bc1c7a";
  }

  static const char* value(const ::spot_cam::SetStreamParamsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xddc9d6ae532786edULL;
  static const uint64_t static_value2 = 0x5f1bc25d48bc1c7aULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_cam::SetStreamParamsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_cam/SetStreamParamsRequest";
  }

  static const char* value(const ::spot_cam::SetStreamParamsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_cam::SetStreamParamsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_cam/StreamParams params\n"
"\n"
"================================================================================\n"
"MSG: spot_cam/StreamParams\n"
"# https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference#streamparams\n"
"# White balance modes\n"
"int8 OFF=-1\n"
"# This is not provided, but we add it to be able to distinguish when setting the white balance\n"
"int8 UNSET=0\n"
"int8 AUTO=1\n"
"int8 INCANDESCENT=2\n"
"int8 FLUORESCENT=3\n"
"int8 WARM_FLUORESCENT=4\n"
"int8 DAYLIGHT=5\n"
"int8 CLOUDY=6\n"
"int8 TWILIGHT=7\n"
"int8 SHADE=8\n"
"int8 DARK=9\n"
"\n"
"# Compression level target in bits per second\n"
"int64 target_bitrate\n"
"# How often should the entire feed be refreshed (in frames)\n"
"int64 refresh_interval\n"
"# How often should an IDR message be sent (in frames)\n"
"int64 idr_interval\n"
"# Automatic white balance\n"
"int8 awb\n"
;
  }

  static const char* value(const ::spot_cam::SetStreamParamsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_cam::SetStreamParamsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.params);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetStreamParamsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_cam::SetStreamParamsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_cam::SetStreamParamsRequest_<ContainerAllocator>& v)
  {
    s << indent << "params: ";
    s << std::endl;
    Printer< ::spot_cam::StreamParams_<ContainerAllocator> >::stream(s, indent + "  ", v.params);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_CAM_MESSAGE_SETSTREAMPARAMSREQUEST_H
