// Generated by gencpp from file spot_cam/Degradation.msg
// DO NOT EDIT!


#ifndef SPOT_CAM_MESSAGE_DEGRADATION_H
#define SPOT_CAM_MESSAGE_DEGRADATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace spot_cam
{
template <class ContainerAllocator>
struct Degradation_
{
  typedef Degradation_<ContainerAllocator> Type;

  Degradation_()
    : type(0)
    , description()  {
    }
  Degradation_(const ContainerAllocator& _alloc)
    : type(0)
    , description(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _description_type;
  _description_type description;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TYPE_STORAGE)
  #undef TYPE_STORAGE
#endif
#if defined(_WIN32) && defined(TYPE_PTZ)
  #undef TYPE_PTZ
#endif
#if defined(_WIN32) && defined(TYPE_LED)
  #undef TYPE_LED
#endif

  enum {
    TYPE_STORAGE = 0u,
    TYPE_PTZ = 1u,
    TYPE_LED = 2u,
  };


  typedef boost::shared_ptr< ::spot_cam::Degradation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_cam::Degradation_<ContainerAllocator> const> ConstPtr;

}; // struct Degradation_

typedef ::spot_cam::Degradation_<std::allocator<void> > Degradation;

typedef boost::shared_ptr< ::spot_cam::Degradation > DegradationPtr;
typedef boost::shared_ptr< ::spot_cam::Degradation const> DegradationConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_cam::Degradation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_cam::Degradation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_cam::Degradation_<ContainerAllocator1> & lhs, const ::spot_cam::Degradation_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.description == rhs.description;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_cam::Degradation_<ContainerAllocator1> & lhs, const ::spot_cam::Degradation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_cam

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_cam::Degradation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_cam::Degradation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_cam::Degradation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_cam::Degradation_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_cam::Degradation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_cam::Degradation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_cam::Degradation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2a0265bf7185a5f0daab5380cc4e7983";
  }

  static const char* value(const ::spot_cam::Degradation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2a0265bf7185a5f0ULL;
  static const uint64_t static_value2 = 0xdaab5380cc4e7983ULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_cam::Degradation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_cam/Degradation";
  }

  static const char* value(const ::spot_cam::Degradation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_cam::Degradation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference#getbitstatusresponse-degradation\n"
"# Different degradation types\n"
"uint8 TYPE_STORAGE=0\n"
"uint8 TYPE_PTZ=1\n"
"uint8 TYPE_LED=2\n"
"\n"
"# The system affected by the degradation\n"
"uint8 type\n"
"# What degradation is being experienced\n"
"string description\n"
;
  }

  static const char* value(const ::spot_cam::Degradation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_cam::Degradation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.description);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Degradation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_cam::Degradation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_cam::Degradation_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.description);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_CAM_MESSAGE_DEGRADATION_H
