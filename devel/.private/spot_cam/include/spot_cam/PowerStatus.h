// Generated by gencpp from file spot_cam/PowerStatus.msg
// DO NOT EDIT!


#ifndef SPOT_CAM_MESSAGE_POWERSTATUS_H
#define SPOT_CAM_MESSAGE_POWERSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace spot_cam
{
template <class ContainerAllocator>
struct PowerStatus_
{
  typedef PowerStatus_<ContainerAllocator> Type;

  PowerStatus_()
    : ptz(0)
    , aux1(0)
    , aux2(0)
    , external_mic(0)  {
    }
  PowerStatus_(const ContainerAllocator& _alloc)
    : ptz(0)
    , aux1(0)
    , aux2(0)
    , external_mic(0)  {
  (void)_alloc;
    }



   typedef uint8_t _ptz_type;
  _ptz_type ptz;

   typedef uint8_t _aux1_type;
  _aux1_type aux1;

   typedef uint8_t _aux2_type;
  _aux2_type aux2;

   typedef uint8_t _external_mic_type;
  _external_mic_type external_mic;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NO_ACTION)
  #undef NO_ACTION
#endif
#if defined(_WIN32) && defined(POWER_ON)
  #undef POWER_ON
#endif
#if defined(_WIN32) && defined(POWER_OFF)
  #undef POWER_OFF
#endif

  enum {
    NO_ACTION = 0u,
    POWER_ON = 1u,
    POWER_OFF = 2u,
  };


  typedef boost::shared_ptr< ::spot_cam::PowerStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_cam::PowerStatus_<ContainerAllocator> const> ConstPtr;

}; // struct PowerStatus_

typedef ::spot_cam::PowerStatus_<std::allocator<void> > PowerStatus;

typedef boost::shared_ptr< ::spot_cam::PowerStatus > PowerStatusPtr;
typedef boost::shared_ptr< ::spot_cam::PowerStatus const> PowerStatusConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_cam::PowerStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_cam::PowerStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_cam::PowerStatus_<ContainerAllocator1> & lhs, const ::spot_cam::PowerStatus_<ContainerAllocator2> & rhs)
{
  return lhs.ptz == rhs.ptz &&
    lhs.aux1 == rhs.aux1 &&
    lhs.aux2 == rhs.aux2 &&
    lhs.external_mic == rhs.external_mic;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_cam::PowerStatus_<ContainerAllocator1> & lhs, const ::spot_cam::PowerStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_cam

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_cam::PowerStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_cam::PowerStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_cam::PowerStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_cam::PowerStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_cam::PowerStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_cam::PowerStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_cam::PowerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cff241b1526dd8ec49e990b4e13bfa92";
  }

  static const char* value(const ::spot_cam::PowerStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcff241b1526dd8ecULL;
  static const uint64_t static_value2 = 0x49e990b4e13bfa92ULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_cam::PowerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_cam/PowerStatus";
  }

  static const char* value(const ::spot_cam::PowerStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_cam::PowerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Use when requesting a change to the power state. Indicates that no action should be taken on that device. This is\n"
"# necessary because the BD API uses a bool to set the power state, where false is off. It would be impossible to know from\n"
"# a bool in a request to change power state whether the user wanted to turn the device off or leave it as it was.\n"
"uint8 NO_ACTION=0\n"
"# Indicates that the power is on, or requests the power to be turned on\n"
"uint8 POWER_ON=1\n"
"# Indicates that the power is off, or requests the power to be turned off\n"
"uint8 POWER_OFF=2\n"
"\n"
"uint8 ptz\n"
"uint8 aux1\n"
"uint8 aux2\n"
"uint8 external_mic\n"
;
  }

  static const char* value(const ::spot_cam::PowerStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_cam::PowerStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ptz);
      stream.next(m.aux1);
      stream.next(m.aux2);
      stream.next(m.external_mic);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PowerStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_cam::PowerStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_cam::PowerStatus_<ContainerAllocator>& v)
  {
    s << indent << "ptz: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ptz);
    s << indent << "aux1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.aux1);
    s << indent << "aux2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.aux2);
    s << indent << "external_mic: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.external_mic);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_CAM_MESSAGE_POWERSTATUS_H
