// Generated by gencpp from file spot_cam/PTZDescription.msg
// DO NOT EDIT!


#ifndef SPOT_CAM_MESSAGE_PTZDESCRIPTION_H
#define SPOT_CAM_MESSAGE_PTZDESCRIPTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <spot_cam/PTZLimits.h>
#include <spot_cam/PTZLimits.h>
#include <spot_cam/PTZLimits.h>

namespace spot_cam
{
template <class ContainerAllocator>
struct PTZDescription_
{
  typedef PTZDescription_<ContainerAllocator> Type;

  PTZDescription_()
    : name()
    , pan_limit()
    , tilt_limit()
    , zoom_limit()  {
    }
  PTZDescription_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , pan_limit(_alloc)
    , tilt_limit(_alloc)
    , zoom_limit(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef  ::spot_cam::PTZLimits_<ContainerAllocator>  _pan_limit_type;
  _pan_limit_type pan_limit;

   typedef  ::spot_cam::PTZLimits_<ContainerAllocator>  _tilt_limit_type;
  _tilt_limit_type tilt_limit;

   typedef  ::spot_cam::PTZLimits_<ContainerAllocator>  _zoom_limit_type;
  _zoom_limit_type zoom_limit;





  typedef boost::shared_ptr< ::spot_cam::PTZDescription_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_cam::PTZDescription_<ContainerAllocator> const> ConstPtr;

}; // struct PTZDescription_

typedef ::spot_cam::PTZDescription_<std::allocator<void> > PTZDescription;

typedef boost::shared_ptr< ::spot_cam::PTZDescription > PTZDescriptionPtr;
typedef boost::shared_ptr< ::spot_cam::PTZDescription const> PTZDescriptionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_cam::PTZDescription_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_cam::PTZDescription_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_cam::PTZDescription_<ContainerAllocator1> & lhs, const ::spot_cam::PTZDescription_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.pan_limit == rhs.pan_limit &&
    lhs.tilt_limit == rhs.tilt_limit &&
    lhs.zoom_limit == rhs.zoom_limit;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_cam::PTZDescription_<ContainerAllocator1> & lhs, const ::spot_cam::PTZDescription_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_cam

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_cam::PTZDescription_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_cam::PTZDescription_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_cam::PTZDescription_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_cam::PTZDescription_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_cam::PTZDescription_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_cam::PTZDescription_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_cam::PTZDescription_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e115be93750ee1ae6231f38b8b89491a";
  }

  static const char* value(const ::spot_cam::PTZDescription_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe115be93750ee1aeULL;
  static const uint64_t static_value2 = 0x6231f38b8b89491aULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_cam::PTZDescription_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_cam/PTZDescription";
  }

  static const char* value(const ::spot_cam::PTZDescription_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_cam::PTZDescription_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference#ptzdescription\n"
"# Name of this ptz (can be virtual)\n"
"string name\n"
"# Limits in degrees on the pan axis\n"
"spot_cam/PTZLimits pan_limit\n"
"# Limits in degrees on the pan axis\n"
"spot_cam/PTZLimits tilt_limit\n"
"# Limits in degrees on the pan axis\n"
"spot_cam/PTZLimits zoom_limit\n"
"================================================================================\n"
"MSG: spot_cam/PTZLimits\n"
"# https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference#ptzdescription-limits\n"
"# If both max and min are zero, this means the limit is unset. The documentation states that if a limit\n"
"# is unset, then all positions are valid.\n"
"# https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference#ptzdescription\n"
"# Minimum value for the axis\n"
"float32 min\n"
"# Maximum value for the axis\n"
"float32 max\n"
;
  }

  static const char* value(const ::spot_cam::PTZDescription_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_cam::PTZDescription_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.pan_limit);
      stream.next(m.tilt_limit);
      stream.next(m.zoom_limit);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PTZDescription_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_cam::PTZDescription_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_cam::PTZDescription_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "pan_limit: ";
    s << std::endl;
    Printer< ::spot_cam::PTZLimits_<ContainerAllocator> >::stream(s, indent + "  ", v.pan_limit);
    s << indent << "tilt_limit: ";
    s << std::endl;
    Printer< ::spot_cam::PTZLimits_<ContainerAllocator> >::stream(s, indent + "  ", v.tilt_limit);
    s << indent << "zoom_limit: ";
    s << std::endl;
    Printer< ::spot_cam::PTZLimits_<ContainerAllocator> >::stream(s, indent + "  ", v.zoom_limit);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_CAM_MESSAGE_PTZDESCRIPTION_H
