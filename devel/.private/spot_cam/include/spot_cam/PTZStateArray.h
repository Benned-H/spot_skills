// Generated by gencpp from file spot_cam/PTZStateArray.msg
// DO NOT EDIT!


#ifndef SPOT_CAM_MESSAGE_PTZSTATEARRAY_H
#define SPOT_CAM_MESSAGE_PTZSTATEARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <spot_cam/PTZState.h>

namespace spot_cam
{
template <class ContainerAllocator>
struct PTZStateArray_
{
  typedef PTZStateArray_<ContainerAllocator> Type;

  PTZStateArray_()
    : ptzs()  {
    }
  PTZStateArray_(const ContainerAllocator& _alloc)
    : ptzs(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::spot_cam::PTZState_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::spot_cam::PTZState_<ContainerAllocator> >> _ptzs_type;
  _ptzs_type ptzs;





  typedef boost::shared_ptr< ::spot_cam::PTZStateArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_cam::PTZStateArray_<ContainerAllocator> const> ConstPtr;

}; // struct PTZStateArray_

typedef ::spot_cam::PTZStateArray_<std::allocator<void> > PTZStateArray;

typedef boost::shared_ptr< ::spot_cam::PTZStateArray > PTZStateArrayPtr;
typedef boost::shared_ptr< ::spot_cam::PTZStateArray const> PTZStateArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_cam::PTZStateArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_cam::PTZStateArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_cam::PTZStateArray_<ContainerAllocator1> & lhs, const ::spot_cam::PTZStateArray_<ContainerAllocator2> & rhs)
{
  return lhs.ptzs == rhs.ptzs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_cam::PTZStateArray_<ContainerAllocator1> & lhs, const ::spot_cam::PTZStateArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_cam

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_cam::PTZStateArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_cam::PTZStateArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_cam::PTZStateArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_cam::PTZStateArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_cam::PTZStateArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_cam::PTZStateArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_cam::PTZStateArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c71a65fc59258e7303baf75176b74b2b";
  }

  static const char* value(const ::spot_cam::PTZStateArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc71a65fc59258e73ULL;
  static const uint64_t static_value2 = 0x03baf75176b74b2bULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_cam::PTZStateArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_cam/PTZStateArray";
  }

  static const char* value(const ::spot_cam::PTZStateArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_cam::PTZStateArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_cam/PTZState[] ptzs\n"
"================================================================================\n"
"MSG: spot_cam/PTZState\n"
"# This message covers two different types which have the exact same field names, to reduce duplication. Depending on the topic,\n"
"# The meaning of the pan/tilt/zoom values changes.\n"
"# https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference#ptzposition\n"
"# https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference#ptzvelocity\n"
"std_msgs/Header header\n"
"# Description of the ptz\n"
"spot_cam/PTZDescription ptz\n"
"# degrees or degrees per second\n"
"float32 pan\n"
"# degrees or degrees per second\n"
"float32 tilt\n"
"# zoom level or zoom level per second\n"
"float32 zoom\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: spot_cam/PTZDescription\n"
"# https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference#ptzdescription\n"
"# Name of this ptz (can be virtual)\n"
"string name\n"
"# Limits in degrees on the pan axis\n"
"spot_cam/PTZLimits pan_limit\n"
"# Limits in degrees on the pan axis\n"
"spot_cam/PTZLimits tilt_limit\n"
"# Limits in degrees on the pan axis\n"
"spot_cam/PTZLimits zoom_limit\n"
"================================================================================\n"
"MSG: spot_cam/PTZLimits\n"
"# https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference#ptzdescription-limits\n"
"# If both max and min are zero, this means the limit is unset. The documentation states that if a limit\n"
"# is unset, then all positions are valid.\n"
"# https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference#ptzdescription\n"
"# Minimum value for the axis\n"
"float32 min\n"
"# Maximum value for the axis\n"
"float32 max\n"
;
  }

  static const char* value(const ::spot_cam::PTZStateArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_cam::PTZStateArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ptzs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PTZStateArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_cam::PTZStateArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_cam::PTZStateArray_<ContainerAllocator>& v)
  {
    s << indent << "ptzs[]" << std::endl;
    for (size_t i = 0; i < v.ptzs.size(); ++i)
    {
      s << indent << "  ptzs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::spot_cam::PTZState_<ContainerAllocator> >::stream(s, indent + "    ", v.ptzs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_CAM_MESSAGE_PTZSTATEARRAY_H
