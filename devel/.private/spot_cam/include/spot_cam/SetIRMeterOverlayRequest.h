// Generated by gencpp from file spot_cam/SetIRMeterOverlayRequest.msg
// DO NOT EDIT!


#ifndef SPOT_CAM_MESSAGE_SETIRMETEROVERLAYREQUEST_H
#define SPOT_CAM_MESSAGE_SETIRMETEROVERLAYREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace spot_cam
{
template <class ContainerAllocator>
struct SetIRMeterOverlayRequest_
{
  typedef SetIRMeterOverlayRequest_<ContainerAllocator> Type;

  SetIRMeterOverlayRequest_()
    : x(0.0)
    , y(0.0)
    , enable(false)  {
    }
  SetIRMeterOverlayRequest_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , enable(false)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef uint8_t _enable_type;
  _enable_type enable;





  typedef boost::shared_ptr< ::spot_cam::SetIRMeterOverlayRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_cam::SetIRMeterOverlayRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetIRMeterOverlayRequest_

typedef ::spot_cam::SetIRMeterOverlayRequest_<std::allocator<void> > SetIRMeterOverlayRequest;

typedef boost::shared_ptr< ::spot_cam::SetIRMeterOverlayRequest > SetIRMeterOverlayRequestPtr;
typedef boost::shared_ptr< ::spot_cam::SetIRMeterOverlayRequest const> SetIRMeterOverlayRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_cam::SetIRMeterOverlayRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_cam::SetIRMeterOverlayRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_cam::SetIRMeterOverlayRequest_<ContainerAllocator1> & lhs, const ::spot_cam::SetIRMeterOverlayRequest_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.enable == rhs.enable;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_cam::SetIRMeterOverlayRequest_<ContainerAllocator1> & lhs, const ::spot_cam::SetIRMeterOverlayRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_cam

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_cam::SetIRMeterOverlayRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_cam::SetIRMeterOverlayRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_cam::SetIRMeterOverlayRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_cam::SetIRMeterOverlayRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_cam::SetIRMeterOverlayRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_cam::SetIRMeterOverlayRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_cam::SetIRMeterOverlayRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "16f1cd99ca65a2a5d892ac023a2510a7";
  }

  static const char* value(const ::spot_cam::SetIRMeterOverlayRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x16f1cd99ca65a2a5ULL;
  static const uint64_t static_value2 = 0xd892ac023a2510a7ULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_cam::SetIRMeterOverlayRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_cam/SetIRMeterOverlayRequest";
  }

  static const char* value(const ::spot_cam::SetIRMeterOverlayRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_cam::SetIRMeterOverlayRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# See https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference#irmeteroverlay for definition\n"
"# Horizontal coordinate between 0 and 1\n"
"float32 x\n"
"# Vertical coordinate between 0 and 1\n"
"float32 y\n"
"# If false, disable the display of the overlay\n"
"bool enable\n"
;
  }

  static const char* value(const ::spot_cam::SetIRMeterOverlayRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_cam::SetIRMeterOverlayRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.enable);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetIRMeterOverlayRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_cam::SetIRMeterOverlayRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_cam::SetIRMeterOverlayRequest_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_CAM_MESSAGE_SETIRMETEROVERLAYREQUEST_H
