// Generated by gencpp from file spot_cam/BITStatus.msg
// DO NOT EDIT!


#ifndef SPOT_CAM_MESSAGE_BITSTATUS_H
#define SPOT_CAM_MESSAGE_BITSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <spot_msgs/SystemFault.h>
#include <spot_cam/Degradation.h>

namespace spot_cam
{
template <class ContainerAllocator>
struct BITStatus_
{
  typedef BITStatus_<ContainerAllocator> Type;

  BITStatus_()
    : events()
    , degradations()  {
    }
  BITStatus_(const ContainerAllocator& _alloc)
    : events(_alloc)
    , degradations(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::spot_msgs::SystemFault_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::spot_msgs::SystemFault_<ContainerAllocator> >> _events_type;
  _events_type events;

   typedef std::vector< ::spot_cam::Degradation_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::spot_cam::Degradation_<ContainerAllocator> >> _degradations_type;
  _degradations_type degradations;





  typedef boost::shared_ptr< ::spot_cam::BITStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_cam::BITStatus_<ContainerAllocator> const> ConstPtr;

}; // struct BITStatus_

typedef ::spot_cam::BITStatus_<std::allocator<void> > BITStatus;

typedef boost::shared_ptr< ::spot_cam::BITStatus > BITStatusPtr;
typedef boost::shared_ptr< ::spot_cam::BITStatus const> BITStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_cam::BITStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_cam::BITStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_cam::BITStatus_<ContainerAllocator1> & lhs, const ::spot_cam::BITStatus_<ContainerAllocator2> & rhs)
{
  return lhs.events == rhs.events &&
    lhs.degradations == rhs.degradations;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_cam::BITStatus_<ContainerAllocator1> & lhs, const ::spot_cam::BITStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_cam

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_cam::BITStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_cam::BITStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_cam::BITStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_cam::BITStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_cam::BITStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_cam::BITStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_cam::BITStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bbef0264c8e68f60c3f5c0359d3c130d";
  }

  static const char* value(const ::spot_cam::BITStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbbef0264c8e68f60ULL;
  static const uint64_t static_value2 = 0xc3f5c0359d3c130dULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_cam::BITStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_cam/BITStatus";
  }

  static const char* value(const ::spot_cam::BITStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_cam::BITStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference#getbitstatusresponse\n"
"spot_msgs/SystemFault[] events\n"
"spot_cam/Degradation[] degradations\n"
"================================================================================\n"
"MSG: spot_msgs/SystemFault\n"
"# Severity\n"
"uint8 SEVERITY_UNKNOWN = 0\n"
"uint8 SEVERITY_INFO = 1\n"
"uint8 SEVERITY_WARN = 2\n"
"uint8 SEVERITY_CRITICAL = 3\n"
"\n"
"Header header\n"
"string name\n"
"duration duration\n"
"int32 code\n"
"uint64 uid\n"
"string error_message\n"
"string[] attributes\n"
"uint8 severity\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: spot_cam/Degradation\n"
"# https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference#getbitstatusresponse-degradation\n"
"# Different degradation types\n"
"uint8 TYPE_STORAGE=0\n"
"uint8 TYPE_PTZ=1\n"
"uint8 TYPE_LED=2\n"
"\n"
"# The system affected by the degradation\n"
"uint8 type\n"
"# What degradation is being experienced\n"
"string description\n"
;
  }

  static const char* value(const ::spot_cam::BITStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_cam::BITStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.events);
      stream.next(m.degradations);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BITStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_cam::BITStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_cam::BITStatus_<ContainerAllocator>& v)
  {
    s << indent << "events[]" << std::endl;
    for (size_t i = 0; i < v.events.size(); ++i)
    {
      s << indent << "  events[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::spot_msgs::SystemFault_<ContainerAllocator> >::stream(s, indent + "    ", v.events[i]);
    }
    s << indent << "degradations[]" << std::endl;
    for (size_t i = 0; i < v.degradations.size(); ++i)
    {
      s << indent << "  degradations[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::spot_cam::Degradation_<ContainerAllocator> >::stream(s, indent + "    ", v.degradations[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_CAM_MESSAGE_BITSTATUS_H
