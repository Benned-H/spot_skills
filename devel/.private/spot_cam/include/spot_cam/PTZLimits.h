// Generated by gencpp from file spot_cam/PTZLimits.msg
// DO NOT EDIT!


#ifndef SPOT_CAM_MESSAGE_PTZLIMITS_H
#define SPOT_CAM_MESSAGE_PTZLIMITS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace spot_cam
{
template <class ContainerAllocator>
struct PTZLimits_
{
  typedef PTZLimits_<ContainerAllocator> Type;

  PTZLimits_()
    : min(0.0)
    , max(0.0)  {
    }
  PTZLimits_(const ContainerAllocator& _alloc)
    : min(0.0)
    , max(0.0)  {
  (void)_alloc;
    }



   typedef float _min_type;
  _min_type min;

   typedef float _max_type;
  _max_type max;





  typedef boost::shared_ptr< ::spot_cam::PTZLimits_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_cam::PTZLimits_<ContainerAllocator> const> ConstPtr;

}; // struct PTZLimits_

typedef ::spot_cam::PTZLimits_<std::allocator<void> > PTZLimits;

typedef boost::shared_ptr< ::spot_cam::PTZLimits > PTZLimitsPtr;
typedef boost::shared_ptr< ::spot_cam::PTZLimits const> PTZLimitsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_cam::PTZLimits_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_cam::PTZLimits_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_cam::PTZLimits_<ContainerAllocator1> & lhs, const ::spot_cam::PTZLimits_<ContainerAllocator2> & rhs)
{
  return lhs.min == rhs.min &&
    lhs.max == rhs.max;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_cam::PTZLimits_<ContainerAllocator1> & lhs, const ::spot_cam::PTZLimits_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_cam

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_cam::PTZLimits_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_cam::PTZLimits_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_cam::PTZLimits_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_cam::PTZLimits_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_cam::PTZLimits_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_cam::PTZLimits_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_cam::PTZLimits_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b3ee9ed25575b46bb47c7673ad202faa";
  }

  static const char* value(const ::spot_cam::PTZLimits_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb3ee9ed25575b46bULL;
  static const uint64_t static_value2 = 0xb47c7673ad202faaULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_cam::PTZLimits_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_cam/PTZLimits";
  }

  static const char* value(const ::spot_cam::PTZLimits_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_cam::PTZLimits_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference#ptzdescription-limits\n"
"# If both max and min are zero, this means the limit is unset. The documentation states that if a limit\n"
"# is unset, then all positions are valid.\n"
"# https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference#ptzdescription\n"
"# Minimum value for the axis\n"
"float32 min\n"
"# Maximum value for the axis\n"
"float32 max\n"
;
  }

  static const char* value(const ::spot_cam::PTZLimits_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_cam::PTZLimits_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.min);
      stream.next(m.max);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PTZLimits_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_cam::PTZLimits_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_cam::PTZLimits_<ContainerAllocator>& v)
  {
    s << indent << "min: ";
    Printer<float>::stream(s, indent + "  ", v.min);
    s << indent << "max: ";
    Printer<float>::stream(s, indent + "  ", v.max);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_CAM_MESSAGE_PTZLIMITS_H
