// Generated by gencpp from file spot_cam/Temperature.msg
// DO NOT EDIT!


#ifndef SPOT_CAM_MESSAGE_TEMPERATURE_H
#define SPOT_CAM_MESSAGE_TEMPERATURE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace spot_cam
{
template <class ContainerAllocator>
struct Temperature_
{
  typedef Temperature_<ContainerAllocator> Type;

  Temperature_()
    : channel_name()
    , temperature(0.0)  {
    }
  Temperature_(const ContainerAllocator& _alloc)
    : channel_name(_alloc)
    , temperature(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _channel_name_type;
  _channel_name_type channel_name;

   typedef float _temperature_type;
  _temperature_type temperature;





  typedef boost::shared_ptr< ::spot_cam::Temperature_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_cam::Temperature_<ContainerAllocator> const> ConstPtr;

}; // struct Temperature_

typedef ::spot_cam::Temperature_<std::allocator<void> > Temperature;

typedef boost::shared_ptr< ::spot_cam::Temperature > TemperaturePtr;
typedef boost::shared_ptr< ::spot_cam::Temperature const> TemperatureConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_cam::Temperature_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_cam::Temperature_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_cam::Temperature_<ContainerAllocator1> & lhs, const ::spot_cam::Temperature_<ContainerAllocator2> & rhs)
{
  return lhs.channel_name == rhs.channel_name &&
    lhs.temperature == rhs.temperature;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_cam::Temperature_<ContainerAllocator1> & lhs, const ::spot_cam::Temperature_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_cam

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_cam::Temperature_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_cam::Temperature_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_cam::Temperature_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_cam::Temperature_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_cam::Temperature_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_cam::Temperature_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_cam::Temperature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "086009cefe0e896fc6b042a5e575d367";
  }

  static const char* value(const ::spot_cam::Temperature_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x086009cefe0e896fULL;
  static const uint64_t static_value2 = 0xc6b042a5e575d367ULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_cam::Temperature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_cam/Temperature";
  }

  static const char* value(const ::spot_cam::Temperature_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_cam::Temperature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string channel_name\n"
"float32 temperature\n"
;
  }

  static const char* value(const ::spot_cam::Temperature_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_cam::Temperature_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.channel_name);
      stream.next(m.temperature);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Temperature_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_cam::Temperature_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_cam::Temperature_<ContainerAllocator>& v)
  {
    s << indent << "channel_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.channel_name);
    s << indent << "temperature: ";
    Printer<float>::stream(s, indent + "  ", v.temperature);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_CAM_MESSAGE_TEMPERATURE_H
