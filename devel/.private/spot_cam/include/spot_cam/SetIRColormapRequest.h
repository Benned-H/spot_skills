// Generated by gencpp from file spot_cam/SetIRColormapRequest.msg
// DO NOT EDIT!


#ifndef SPOT_CAM_MESSAGE_SETIRCOLORMAPREQUEST_H
#define SPOT_CAM_MESSAGE_SETIRCOLORMAPREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace spot_cam
{
template <class ContainerAllocator>
struct SetIRColormapRequest_
{
  typedef SetIRColormapRequest_<ContainerAllocator> Type;

  SetIRColormapRequest_()
    : colormap(0)
    , min(0.0)
    , max(0.0)
    , auto_scale(false)  {
    }
  SetIRColormapRequest_(const ContainerAllocator& _alloc)
    : colormap(0)
    , min(0.0)
    , max(0.0)
    , auto_scale(false)  {
  (void)_alloc;
    }



   typedef uint8_t _colormap_type;
  _colormap_type colormap;

   typedef float _min_type;
  _min_type min;

   typedef float _max_type;
  _max_type max;

   typedef uint8_t _auto_scale_type;
  _auto_scale_type auto_scale;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(COLORMAP_UNKNOWN)
  #undef COLORMAP_UNKNOWN
#endif
#if defined(_WIN32) && defined(COLORMAP_GREYSCALE)
  #undef COLORMAP_GREYSCALE
#endif
#if defined(_WIN32) && defined(COLORMAP_JET)
  #undef COLORMAP_JET
#endif
#if defined(_WIN32) && defined(COLORMAP_INFERNO)
  #undef COLORMAP_INFERNO
#endif
#if defined(_WIN32) && defined(COLORMAP_TURBO)
  #undef COLORMAP_TURBO
#endif

  enum {
    COLORMAP_UNKNOWN = 0u,
    COLORMAP_GREYSCALE = 1u,
    COLORMAP_JET = 2u,
    COLORMAP_INFERNO = 3u,
    COLORMAP_TURBO = 4u,
  };


  typedef boost::shared_ptr< ::spot_cam::SetIRColormapRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_cam::SetIRColormapRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetIRColormapRequest_

typedef ::spot_cam::SetIRColormapRequest_<std::allocator<void> > SetIRColormapRequest;

typedef boost::shared_ptr< ::spot_cam::SetIRColormapRequest > SetIRColormapRequestPtr;
typedef boost::shared_ptr< ::spot_cam::SetIRColormapRequest const> SetIRColormapRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_cam::SetIRColormapRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_cam::SetIRColormapRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_cam::SetIRColormapRequest_<ContainerAllocator1> & lhs, const ::spot_cam::SetIRColormapRequest_<ContainerAllocator2> & rhs)
{
  return lhs.colormap == rhs.colormap &&
    lhs.min == rhs.min &&
    lhs.max == rhs.max &&
    lhs.auto_scale == rhs.auto_scale;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_cam::SetIRColormapRequest_<ContainerAllocator1> & lhs, const ::spot_cam::SetIRColormapRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_cam

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_cam::SetIRColormapRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_cam::SetIRColormapRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_cam::SetIRColormapRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_cam::SetIRColormapRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_cam::SetIRColormapRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_cam::SetIRColormapRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_cam::SetIRColormapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "69f70a473af7d968f923ffcb40d332eb";
  }

  static const char* value(const ::spot_cam::SetIRColormapRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x69f70a473af7d968ULL;
  static const uint64_t static_value2 = 0xf923ffcb40d332ebULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_cam::SetIRColormapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_cam/SetIRColormapRequest";
  }

  static const char* value(const ::spot_cam::SetIRColormapRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_cam::SetIRColormapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# See https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference#ircolormap for definition\n"
"uint8 COLORMAP_UNKNOWN=0\n"
"# The greyscale colormap maps the minimum value (defined below) to black and the maximum value (defined below) to white\n"
"uint8 COLORMAP_GREYSCALE=1\n"
"# The jet colormap uses blues for values closer to the minimum, and red values for values closer to the maximum.\n"
"uint8 COLORMAP_JET=2\n"
"# The inferno colormap maps the minimum value to black and the maximum value to light yellow RGB(252, 252, 164).\n"
"# It is also easier to view by those with color blindness\n"
"uint8 COLORMAP_INFERNO=3\n"
"# The turbo colormap uses blues for values closer to the minumum, red values for values closer to the maximum,\n"
"# and addresses some short comings of the jet color map such as false detail, banding and color blindness\n"
"uint8 COLORMAP_TURBO=4\n"
"\n"
"# The colormap to use for the IR display\n"
"uint8 colormap\n"
"# Minimum value for the color mapping in degrees celsius\n"
"float32 min\n"
"# Maximum value for the color mapping in degrees celsius\n"
"float32 max\n"
"# If true, automatically derive min and max from the image data. Min and max values are ignored\n"
"bool auto_scale\n"
;
  }

  static const char* value(const ::spot_cam::SetIRColormapRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_cam::SetIRColormapRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.colormap);
      stream.next(m.min);
      stream.next(m.max);
      stream.next(m.auto_scale);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetIRColormapRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_cam::SetIRColormapRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_cam::SetIRColormapRequest_<ContainerAllocator>& v)
  {
    s << indent << "colormap: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.colormap);
    s << indent << "min: ";
    Printer<float>::stream(s, indent + "  ", v.min);
    s << indent << "max: ";
    Printer<float>::stream(s, indent + "  ", v.max);
    s << indent << "auto_scale: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_scale);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_CAM_MESSAGE_SETIRCOLORMAPREQUEST_H
