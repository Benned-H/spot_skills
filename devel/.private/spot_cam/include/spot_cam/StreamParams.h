// Generated by gencpp from file spot_cam/StreamParams.msg
// DO NOT EDIT!


#ifndef SPOT_CAM_MESSAGE_STREAMPARAMS_H
#define SPOT_CAM_MESSAGE_STREAMPARAMS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace spot_cam
{
template <class ContainerAllocator>
struct StreamParams_
{
  typedef StreamParams_<ContainerAllocator> Type;

  StreamParams_()
    : target_bitrate(0)
    , refresh_interval(0)
    , idr_interval(0)
    , awb(0)  {
    }
  StreamParams_(const ContainerAllocator& _alloc)
    : target_bitrate(0)
    , refresh_interval(0)
    , idr_interval(0)
    , awb(0)  {
  (void)_alloc;
    }



   typedef int64_t _target_bitrate_type;
  _target_bitrate_type target_bitrate;

   typedef int64_t _refresh_interval_type;
  _refresh_interval_type refresh_interval;

   typedef int64_t _idr_interval_type;
  _idr_interval_type idr_interval;

   typedef int8_t _awb_type;
  _awb_type awb;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(OFF)
  #undef OFF
#endif
#if defined(_WIN32) && defined(UNSET)
  #undef UNSET
#endif
#if defined(_WIN32) && defined(AUTO)
  #undef AUTO
#endif
#if defined(_WIN32) && defined(INCANDESCENT)
  #undef INCANDESCENT
#endif
#if defined(_WIN32) && defined(FLUORESCENT)
  #undef FLUORESCENT
#endif
#if defined(_WIN32) && defined(WARM_FLUORESCENT)
  #undef WARM_FLUORESCENT
#endif
#if defined(_WIN32) && defined(DAYLIGHT)
  #undef DAYLIGHT
#endif
#if defined(_WIN32) && defined(CLOUDY)
  #undef CLOUDY
#endif
#if defined(_WIN32) && defined(TWILIGHT)
  #undef TWILIGHT
#endif
#if defined(_WIN32) && defined(SHADE)
  #undef SHADE
#endif
#if defined(_WIN32) && defined(DARK)
  #undef DARK
#endif

  enum {
    OFF = -1,
    UNSET = 0,
    AUTO = 1,
    INCANDESCENT = 2,
    FLUORESCENT = 3,
    WARM_FLUORESCENT = 4,
    DAYLIGHT = 5,
    CLOUDY = 6,
    TWILIGHT = 7,
    SHADE = 8,
    DARK = 9,
  };


  typedef boost::shared_ptr< ::spot_cam::StreamParams_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_cam::StreamParams_<ContainerAllocator> const> ConstPtr;

}; // struct StreamParams_

typedef ::spot_cam::StreamParams_<std::allocator<void> > StreamParams;

typedef boost::shared_ptr< ::spot_cam::StreamParams > StreamParamsPtr;
typedef boost::shared_ptr< ::spot_cam::StreamParams const> StreamParamsConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_cam::StreamParams_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_cam::StreamParams_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_cam::StreamParams_<ContainerAllocator1> & lhs, const ::spot_cam::StreamParams_<ContainerAllocator2> & rhs)
{
  return lhs.target_bitrate == rhs.target_bitrate &&
    lhs.refresh_interval == rhs.refresh_interval &&
    lhs.idr_interval == rhs.idr_interval &&
    lhs.awb == rhs.awb;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_cam::StreamParams_<ContainerAllocator1> & lhs, const ::spot_cam::StreamParams_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_cam

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_cam::StreamParams_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_cam::StreamParams_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_cam::StreamParams_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_cam::StreamParams_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_cam::StreamParams_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_cam::StreamParams_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_cam::StreamParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7fa7ed9c6dbde8368621018918a2a544";
  }

  static const char* value(const ::spot_cam::StreamParams_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7fa7ed9c6dbde836ULL;
  static const uint64_t static_value2 = 0x8621018918a2a544ULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_cam::StreamParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_cam/StreamParams";
  }

  static const char* value(const ::spot_cam::StreamParams_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_cam::StreamParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference#streamparams\n"
"# White balance modes\n"
"int8 OFF=-1\n"
"# This is not provided, but we add it to be able to distinguish when setting the white balance\n"
"int8 UNSET=0\n"
"int8 AUTO=1\n"
"int8 INCANDESCENT=2\n"
"int8 FLUORESCENT=3\n"
"int8 WARM_FLUORESCENT=4\n"
"int8 DAYLIGHT=5\n"
"int8 CLOUDY=6\n"
"int8 TWILIGHT=7\n"
"int8 SHADE=8\n"
"int8 DARK=9\n"
"\n"
"# Compression level target in bits per second\n"
"int64 target_bitrate\n"
"# How often should the entire feed be refreshed (in frames)\n"
"int64 refresh_interval\n"
"# How often should an IDR message be sent (in frames)\n"
"int64 idr_interval\n"
"# Automatic white balance\n"
"int8 awb\n"
;
  }

  static const char* value(const ::spot_cam::StreamParams_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_cam::StreamParams_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_bitrate);
      stream.next(m.refresh_interval);
      stream.next(m.idr_interval);
      stream.next(m.awb);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StreamParams_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_cam::StreamParams_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_cam::StreamParams_<ContainerAllocator>& v)
  {
    s << indent << "target_bitrate: ";
    Printer<int64_t>::stream(s, indent + "  ", v.target_bitrate);
    s << indent << "refresh_interval: ";
    Printer<int64_t>::stream(s, indent + "  ", v.refresh_interval);
    s << indent << "idr_interval: ";
    Printer<int64_t>::stream(s, indent + "  ", v.idr_interval);
    s << indent << "awb: ";
    Printer<int8_t>::stream(s, indent + "  ", v.awb);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_CAM_MESSAGE_STREAMPARAMS_H
