// Auto-generated. Do not edit!

// (in-package spot_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let DockState = require('./DockState.js');

//-----------------------------------------------------------

class DockFeedback {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.status = null;
    }
    else {
      if (initObj.hasOwnProperty('status')) {
        this.status = initObj.status
      }
      else {
        this.status = new DockState();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type DockFeedback
    // Serialize message field [status]
    bufferOffset = DockState.serialize(obj.status, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type DockFeedback
    let len;
    let data = new DockFeedback(null);
    // Deserialize message field [status]
    data.status = DockState.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    return 7;
  }

  static datatype() {
    // Returns string type for a message object
    return 'spot_msgs/DockFeedback';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'c362c4f04a7060b16832e7c8aadb5896';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    DockState status
    
    ================================================================================
    MSG: spot_msgs/DockState
    # Status
    uint8 DOCK_STATUS_UNKNOWN = 0
    uint8 DOCK_STATUS_DOCKED = 1
    uint8 DOCK_STATUS_DOCKING = 2
    uint8 DOCK_STATUS_UNDOCKED = 3
    uint8 DOCK_STATUS_UNDOCKING = 4
    
    # DockType
    uint8 DOCK_TYPE_UNKNOWN = 0
    uint8 DOCK_TYPE_CONTACT_PROTOTYPE = 2
    uint8 DOCK_TYPE_SPOT_DOCK = 3
    
    # LinkStatus
    uint8 LINK_STATUS_UNKNOWN = 0
    uint8 LINK_STATUS_CONNECTED = 1
    uint8 LINK_STATUS_ERROR = 2
    uint8 LINK_STATUS_DETECTING = 3
    
    uint8 status
    uint8 dock_type
    uint32 dock_id
    uint8 power_status
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new DockFeedback(null);
    if (msg.status !== undefined) {
      resolved.status = DockState.Resolve(msg.status)
    }
    else {
      resolved.status = new DockState()
    }

    return resolved;
    }
};

module.exports = DockFeedback;
