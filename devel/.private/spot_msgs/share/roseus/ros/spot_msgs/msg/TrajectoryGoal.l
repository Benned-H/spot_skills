;; Auto-generated. Do not edit!


(when (boundp 'spot_msgs::TrajectoryGoal)
  (if (not (find-package "SPOT_MSGS"))
    (make-package "SPOT_MSGS"))
  (shadow 'TrajectoryGoal (find-package "SPOT_MSGS")))
(unless (find-package "SPOT_MSGS::TRAJECTORYGOAL")
  (make-package "SPOT_MSGS::TRAJECTORYGOAL"))

(in-package "ROS")
;;//! \htmlinclude TrajectoryGoal.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))
(if (not (find-package "STD_MSGS"))
  (ros::roseus-add-msgs "std_msgs"))


(defclass spot_msgs::TrajectoryGoal
  :super ros::object
  :slots (_target_pose _duration _precise_positioning ))

(defmethod spot_msgs::TrajectoryGoal
  (:init
   (&key
    ((:target_pose __target_pose) (instance geometry_msgs::PoseStamped :init))
    ((:duration __duration) (instance std_msgs::Duration :init))
    ((:precise_positioning __precise_positioning) nil)
    )
   (send-super :init)
   (setq _target_pose __target_pose)
   (setq _duration __duration)
   (setq _precise_positioning __precise_positioning)
   self)
  (:target_pose
   (&rest __target_pose)
   (if (keywordp (car __target_pose))
       (send* _target_pose __target_pose)
     (progn
       (if __target_pose (setq _target_pose (car __target_pose)))
       _target_pose)))
  (:duration
   (&rest __duration)
   (if (keywordp (car __duration))
       (send* _duration __duration)
     (progn
       (if __duration (setq _duration (car __duration)))
       _duration)))
  (:precise_positioning
   (&optional (__precise_positioning :null))
   (if (not (eq __precise_positioning :null)) (setq _precise_positioning __precise_positioning)) _precise_positioning)
  (:serialization-length
   ()
   (+
    ;; geometry_msgs/PoseStamped _target_pose
    (send _target_pose :serialization-length)
    ;; std_msgs/Duration _duration
    (send _duration :serialization-length)
    ;; bool _precise_positioning
    1
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; geometry_msgs/PoseStamped _target_pose
       (send _target_pose :serialize s)
     ;; std_msgs/Duration _duration
       (send _duration :serialize s)
     ;; bool _precise_positioning
       (if _precise_positioning (write-byte -1 s) (write-byte 0 s))
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; geometry_msgs/PoseStamped _target_pose
     (send _target_pose :deserialize buf ptr-) (incf ptr- (send _target_pose :serialization-length))
   ;; std_msgs/Duration _duration
     (send _duration :deserialize buf ptr-) (incf ptr- (send _duration :serialization-length))
   ;; bool _precise_positioning
     (setq _precise_positioning (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;;
   self)
  )

(setf (get spot_msgs::TrajectoryGoal :md5sum-) "fb69449cdbd99a24e29c2aab36d5f965")
(setf (get spot_msgs::TrajectoryGoal :datatype-) "spot_msgs/TrajectoryGoal")
(setf (get spot_msgs::TrajectoryGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
geometry_msgs/PoseStamped target_pose
# After this duration, the command will time out and the robot will stop. Must be non-zero
std_msgs/Duration duration
# If true, the feedback from the trajectory command must indicate that the robot is
# at the goal position. If set to false, the robot being near the goal is equivalent to
# it being at the goal. This is based on the feedback received from the boston dynamics
# API call at
# https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference.html?highlight=status_near_goal#se2trajectorycommand-feedback-status
bool precise_positioning

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: std_msgs/Duration
duration data

")



(provide :spot_msgs/TrajectoryGoal "fb69449cdbd99a24e29c2aab36d5f965")


