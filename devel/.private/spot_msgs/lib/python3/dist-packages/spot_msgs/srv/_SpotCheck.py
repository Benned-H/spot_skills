# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from spot_msgs/SpotCheckRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SpotCheckRequest(genpy.Message):
  _md5sum = "21f28964d8a22171043b2be0b8230ec2"
  _type = "spot_msgs/SpotCheckRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# See https://dev.bostondynamics.com/python/bosdyn-client/src/bosdyn/client/spot_check
bool start
bool blocking
bool revert_calibration
bool feedback_only
"""
  __slots__ = ['start','blocking','revert_calibration','feedback_only']
  _slot_types = ['bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       start,blocking,revert_calibration,feedback_only

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SpotCheckRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.start is None:
        self.start = False
      if self.blocking is None:
        self.blocking = False
      if self.revert_calibration is None:
        self.revert_calibration = False
      if self.feedback_only is None:
        self.feedback_only = False
    else:
      self.start = False
      self.blocking = False
      self.revert_calibration = False
      self.feedback_only = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4B().pack(_x.start, _x.blocking, _x.revert_calibration, _x.feedback_only))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.start, _x.blocking, _x.revert_calibration, _x.feedback_only,) = _get_struct_4B().unpack(str[start:end])
      self.start = bool(self.start)
      self.blocking = bool(self.blocking)
      self.revert_calibration = bool(self.revert_calibration)
      self.feedback_only = bool(self.feedback_only)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4B().pack(_x.start, _x.blocking, _x.revert_calibration, _x.feedback_only))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.start, _x.blocking, _x.revert_calibration, _x.feedback_only,) = _get_struct_4B().unpack(str[start:end])
      self.start = bool(self.start)
      self.blocking = bool(self.blocking)
      self.revert_calibration = bool(self.revert_calibration)
      self.feedback_only = bool(self.feedback_only)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4B = None
def _get_struct_4B():
    global _struct_4B
    if _struct_4B is None:
        _struct_4B = struct.Struct("<4B")
    return _struct_4B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from spot_msgs/SpotCheckResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import spot_msgs.msg

class SpotCheckResponse(genpy.Message):
  _md5sum = "57928f98c641c9bdcc0ec470d1b08af8"
  _type = "spot_msgs/SpotCheckResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success
string message

string[] camera_names
spot_msgs/SpotCheckDepth[] camera_results

string[] load_cell_names
spot_msgs/SpotCheckLoadCell[] load_cell_results

string[] kinematic_joint_names
spot_msgs/SpotCheckKinematic[] kinematic_cal_results

spot_msgs/SpotCheckPayload payload_result

string[] leg_names
spot_msgs/SpotCheckHipROM[] hip_range_of_motion_results

float32 progress

time last_cal_timestamp

================================================================================
MSG: spot_msgs/SpotCheckDepth
uint8 STATUS_UNKNOWN = 0     # Unused enum.
uint8 STATUS_OK = 1          # No detected calibration error.
uint8 STATUS_WARNING = 2     # Possible calibration error detected.
uint8 STATUS_ERROR = 3       # Error with robot calibration.

uint8 status
float32 severity_score
================================================================================
MSG: spot_msgs/SpotCheckLoadCell
uint8 ERROR_UNKNOWN = 0              # Unused enum.
uint8 ERROR_NONE = 1                 # No hardware error detected.
uint8 ERROR_ZERO_OUT_OF_RANGE = 2    # Load cell calibration failure.

# The loadcell error code
uint8 error
# The current loadcell zero as fraction of full range [0-1]
float32 zero
# The previous loadcell zero as fraction of full range [0-1]
float32 old_zero
================================================================================
MSG: spot_msgs/SpotCheckKinematic
# Errors reflect an issue with robot hardware.
uint8 ERROR_UNKNOWN = 0       # Unused enum.
uint8 ERROR_NONE = 1          # No hardware error detected.
uint8 ERROR_CLUTCH_SLIP = 2   # Error detected in clutch performance.
uint8 ERROR_INVALID_RANGE_OF_MOTION = 3  # Error if a joint has an incorrect range of motion.

# A flag to indicate if results has an error.
uint8 error

# The current offset [rad]
float32 offset
# The previous offset [rad]
float32 old_offset

# Joint calibration health score. range [0-1]
# 0 indicates an unhealthy kinematic joint calibration
# 1 indicates a perfect kinematic joint calibration
# Typically, values greater than 0.8 should be expected.
float32 health_score
================================================================================
MSG: spot_msgs/SpotCheckPayload
# Errors reflect an issue with payload configuration.

# Unused enum.
uint8 ERROR_UNKNOWN = 0
# No error found in the payloads.
uint8 ERROR_NONE = 1
# There is a mass discrepancy between the registered payload and what is estimated.
uint8 ERROR_MASS_DISCREPANCY = 2

# A flag to indicate if configuration has an error.
uint8 error

# Indicates how much extra payload (in kg) we think the robot has
# Positive indicates robot has more payload than it is configured.
# Negative indicates robot has less payload than it is configured.
float32 extra_payload
================================================================================
MSG: spot_msgs/SpotCheckHipROM
# Errors reflect an issue with hip range of motion
uint8 ERROR_UNKNOWN = 0
uint8 ERROR_NONE = 1
uint8 ERROR_OBSTRUCTED = 2

uint8 error

# The measured angles (radians) of the HX and HY joints where the obstruction was detected
float32[] hx
float32[] hy"""
  __slots__ = ['success','message','camera_names','camera_results','load_cell_names','load_cell_results','kinematic_joint_names','kinematic_cal_results','payload_result','leg_names','hip_range_of_motion_results','progress','last_cal_timestamp']
  _slot_types = ['bool','string','string[]','spot_msgs/SpotCheckDepth[]','string[]','spot_msgs/SpotCheckLoadCell[]','string[]','spot_msgs/SpotCheckKinematic[]','spot_msgs/SpotCheckPayload','string[]','spot_msgs/SpotCheckHipROM[]','float32','time']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,message,camera_names,camera_results,load_cell_names,load_cell_results,kinematic_joint_names,kinematic_cal_results,payload_result,leg_names,hip_range_of_motion_results,progress,last_cal_timestamp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SpotCheckResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.message is None:
        self.message = ''
      if self.camera_names is None:
        self.camera_names = []
      if self.camera_results is None:
        self.camera_results = []
      if self.load_cell_names is None:
        self.load_cell_names = []
      if self.load_cell_results is None:
        self.load_cell_results = []
      if self.kinematic_joint_names is None:
        self.kinematic_joint_names = []
      if self.kinematic_cal_results is None:
        self.kinematic_cal_results = []
      if self.payload_result is None:
        self.payload_result = spot_msgs.msg.SpotCheckPayload()
      if self.leg_names is None:
        self.leg_names = []
      if self.hip_range_of_motion_results is None:
        self.hip_range_of_motion_results = []
      if self.progress is None:
        self.progress = 0.
      if self.last_cal_timestamp is None:
        self.last_cal_timestamp = genpy.Time()
    else:
      self.success = False
      self.message = ''
      self.camera_names = []
      self.camera_results = []
      self.load_cell_names = []
      self.load_cell_results = []
      self.kinematic_joint_names = []
      self.kinematic_cal_results = []
      self.payload_result = spot_msgs.msg.SpotCheckPayload()
      self.leg_names = []
      self.hip_range_of_motion_results = []
      self.progress = 0.
      self.last_cal_timestamp = genpy.Time()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.camera_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.camera_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.camera_results)
      buff.write(_struct_I.pack(length))
      for val1 in self.camera_results:
        _x = val1
        buff.write(_get_struct_Bf().pack(_x.status, _x.severity_score))
      length = len(self.load_cell_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.load_cell_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.load_cell_results)
      buff.write(_struct_I.pack(length))
      for val1 in self.load_cell_results:
        _x = val1
        buff.write(_get_struct_B2f().pack(_x.error, _x.zero, _x.old_zero))
      length = len(self.kinematic_joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.kinematic_joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.kinematic_cal_results)
      buff.write(_struct_I.pack(length))
      for val1 in self.kinematic_cal_results:
        _x = val1
        buff.write(_get_struct_B3f().pack(_x.error, _x.offset, _x.old_offset, _x.health_score))
      _x = self
      buff.write(_get_struct_Bf().pack(_x.payload_result.error, _x.payload_result.extra_payload))
      length = len(self.leg_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.leg_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.hip_range_of_motion_results)
      buff.write(_struct_I.pack(length))
      for val1 in self.hip_range_of_motion_results:
        _x = val1.error
        buff.write(_get_struct_B().pack(_x))
        length = len(val1.hx)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.hx))
        length = len(val1.hy)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.hy))
      _x = self
      buff.write(_get_struct_f2I().pack(_x.progress, _x.last_cal_timestamp.secs, _x.last_cal_timestamp.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.camera_results is None:
        self.camera_results = None
      if self.load_cell_results is None:
        self.load_cell_results = None
      if self.kinematic_cal_results is None:
        self.kinematic_cal_results = None
      if self.payload_result is None:
        self.payload_result = spot_msgs.msg.SpotCheckPayload()
      if self.hip_range_of_motion_results is None:
        self.hip_range_of_motion_results = None
      if self.last_cal_timestamp is None:
        self.last_cal_timestamp = genpy.Time()
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.camera_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.camera_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.camera_results = []
      for i in range(0, length):
        val1 = spot_msgs.msg.SpotCheckDepth()
        _x = val1
        start = end
        end += 5
        (_x.status, _x.severity_score,) = _get_struct_Bf().unpack(str[start:end])
        self.camera_results.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.load_cell_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.load_cell_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.load_cell_results = []
      for i in range(0, length):
        val1 = spot_msgs.msg.SpotCheckLoadCell()
        _x = val1
        start = end
        end += 9
        (_x.error, _x.zero, _x.old_zero,) = _get_struct_B2f().unpack(str[start:end])
        self.load_cell_results.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.kinematic_joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.kinematic_joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.kinematic_cal_results = []
      for i in range(0, length):
        val1 = spot_msgs.msg.SpotCheckKinematic()
        _x = val1
        start = end
        end += 13
        (_x.error, _x.offset, _x.old_offset, _x.health_score,) = _get_struct_B3f().unpack(str[start:end])
        self.kinematic_cal_results.append(val1)
      _x = self
      start = end
      end += 5
      (_x.payload_result.error, _x.payload_result.extra_payload,) = _get_struct_Bf().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.leg_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.leg_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.hip_range_of_motion_results = []
      for i in range(0, length):
        val1 = spot_msgs.msg.SpotCheckHipROM()
        start = end
        end += 1
        (val1.error,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.hx = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.hy = s.unpack(str[start:end])
        self.hip_range_of_motion_results.append(val1)
      _x = self
      start = end
      end += 12
      (_x.progress, _x.last_cal_timestamp.secs, _x.last_cal_timestamp.nsecs,) = _get_struct_f2I().unpack(str[start:end])
      self.last_cal_timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.camera_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.camera_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.camera_results)
      buff.write(_struct_I.pack(length))
      for val1 in self.camera_results:
        _x = val1
        buff.write(_get_struct_Bf().pack(_x.status, _x.severity_score))
      length = len(self.load_cell_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.load_cell_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.load_cell_results)
      buff.write(_struct_I.pack(length))
      for val1 in self.load_cell_results:
        _x = val1
        buff.write(_get_struct_B2f().pack(_x.error, _x.zero, _x.old_zero))
      length = len(self.kinematic_joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.kinematic_joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.kinematic_cal_results)
      buff.write(_struct_I.pack(length))
      for val1 in self.kinematic_cal_results:
        _x = val1
        buff.write(_get_struct_B3f().pack(_x.error, _x.offset, _x.old_offset, _x.health_score))
      _x = self
      buff.write(_get_struct_Bf().pack(_x.payload_result.error, _x.payload_result.extra_payload))
      length = len(self.leg_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.leg_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.hip_range_of_motion_results)
      buff.write(_struct_I.pack(length))
      for val1 in self.hip_range_of_motion_results:
        _x = val1.error
        buff.write(_get_struct_B().pack(_x))
        length = len(val1.hx)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.hx.tostring())
        length = len(val1.hy)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.hy.tostring())
      _x = self
      buff.write(_get_struct_f2I().pack(_x.progress, _x.last_cal_timestamp.secs, _x.last_cal_timestamp.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.camera_results is None:
        self.camera_results = None
      if self.load_cell_results is None:
        self.load_cell_results = None
      if self.kinematic_cal_results is None:
        self.kinematic_cal_results = None
      if self.payload_result is None:
        self.payload_result = spot_msgs.msg.SpotCheckPayload()
      if self.hip_range_of_motion_results is None:
        self.hip_range_of_motion_results = None
      if self.last_cal_timestamp is None:
        self.last_cal_timestamp = genpy.Time()
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.camera_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.camera_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.camera_results = []
      for i in range(0, length):
        val1 = spot_msgs.msg.SpotCheckDepth()
        _x = val1
        start = end
        end += 5
        (_x.status, _x.severity_score,) = _get_struct_Bf().unpack(str[start:end])
        self.camera_results.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.load_cell_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.load_cell_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.load_cell_results = []
      for i in range(0, length):
        val1 = spot_msgs.msg.SpotCheckLoadCell()
        _x = val1
        start = end
        end += 9
        (_x.error, _x.zero, _x.old_zero,) = _get_struct_B2f().unpack(str[start:end])
        self.load_cell_results.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.kinematic_joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.kinematic_joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.kinematic_cal_results = []
      for i in range(0, length):
        val1 = spot_msgs.msg.SpotCheckKinematic()
        _x = val1
        start = end
        end += 13
        (_x.error, _x.offset, _x.old_offset, _x.health_score,) = _get_struct_B3f().unpack(str[start:end])
        self.kinematic_cal_results.append(val1)
      _x = self
      start = end
      end += 5
      (_x.payload_result.error, _x.payload_result.extra_payload,) = _get_struct_Bf().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.leg_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.leg_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.hip_range_of_motion_results = []
      for i in range(0, length):
        val1 = spot_msgs.msg.SpotCheckHipROM()
        start = end
        end += 1
        (val1.error,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.hx = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.hy = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.hip_range_of_motion_results.append(val1)
      _x = self
      start = end
      end += 12
      (_x.progress, _x.last_cal_timestamp.secs, _x.last_cal_timestamp.nsecs,) = _get_struct_f2I().unpack(str[start:end])
      self.last_cal_timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_B2f = None
def _get_struct_B2f():
    global _struct_B2f
    if _struct_B2f is None:
        _struct_B2f = struct.Struct("<B2f")
    return _struct_B2f
_struct_B3f = None
def _get_struct_B3f():
    global _struct_B3f
    if _struct_B3f is None:
        _struct_B3f = struct.Struct("<B3f")
    return _struct_B3f
_struct_Bf = None
def _get_struct_Bf():
    global _struct_Bf
    if _struct_Bf is None:
        _struct_Bf = struct.Struct("<Bf")
    return _struct_Bf
_struct_f2I = None
def _get_struct_f2I():
    global _struct_f2I
    if _struct_f2I is None:
        _struct_f2I = struct.Struct("<f2I")
    return _struct_f2I
class SpotCheck(object):
  _type          = 'spot_msgs/SpotCheck'
  _md5sum = '1ec255c808f67543e9f50ba450221b4c'
  _request_class  = SpotCheckRequest
  _response_class = SpotCheckResponse
