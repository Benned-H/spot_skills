# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from spot_msgs/AprilTagProperties.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class AprilTagProperties(genpy.Message):
  _md5sum = "035439ca15acb004b11a25a16f3fd1de"
  _type = "spot_msgs/AprilTagProperties"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Status
uint8 STATUS_UNKNOWN = 0
uint8 STATUS_OK = 1
uint8 STATUS_AMBIGUOUS = 2
uint8 STATUS_HIGH_ERROR = 3

int32 tag_id
float64 x
float64 y

string frame_name_fiducial
uint8 fiducial_pose_status

string frame_name_fiducial_filtered
uint8 fiducial_filtered_pose_status

string frame_name_camera

geometry_msgs/PoseWithCovariance detection_covariance
string detection_covariance_reference_frame
================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  # Pseudo-constants
  STATUS_UNKNOWN = 0
  STATUS_OK = 1
  STATUS_AMBIGUOUS = 2
  STATUS_HIGH_ERROR = 3

  __slots__ = ['tag_id','x','y','frame_name_fiducial','fiducial_pose_status','frame_name_fiducial_filtered','fiducial_filtered_pose_status','frame_name_camera','detection_covariance','detection_covariance_reference_frame']
  _slot_types = ['int32','float64','float64','string','uint8','string','uint8','string','geometry_msgs/PoseWithCovariance','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       tag_id,x,y,frame_name_fiducial,fiducial_pose_status,frame_name_fiducial_filtered,fiducial_filtered_pose_status,frame_name_camera,detection_covariance,detection_covariance_reference_frame

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AprilTagProperties, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.tag_id is None:
        self.tag_id = 0
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.frame_name_fiducial is None:
        self.frame_name_fiducial = ''
      if self.fiducial_pose_status is None:
        self.fiducial_pose_status = 0
      if self.frame_name_fiducial_filtered is None:
        self.frame_name_fiducial_filtered = ''
      if self.fiducial_filtered_pose_status is None:
        self.fiducial_filtered_pose_status = 0
      if self.frame_name_camera is None:
        self.frame_name_camera = ''
      if self.detection_covariance is None:
        self.detection_covariance = geometry_msgs.msg.PoseWithCovariance()
      if self.detection_covariance_reference_frame is None:
        self.detection_covariance_reference_frame = ''
    else:
      self.tag_id = 0
      self.x = 0.
      self.y = 0.
      self.frame_name_fiducial = ''
      self.fiducial_pose_status = 0
      self.frame_name_fiducial_filtered = ''
      self.fiducial_filtered_pose_status = 0
      self.frame_name_camera = ''
      self.detection_covariance = geometry_msgs.msg.PoseWithCovariance()
      self.detection_covariance_reference_frame = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i2d().pack(_x.tag_id, _x.x, _x.y))
      _x = self.frame_name_fiducial
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fiducial_pose_status
      buff.write(_get_struct_B().pack(_x))
      _x = self.frame_name_fiducial_filtered
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fiducial_filtered_pose_status
      buff.write(_get_struct_B().pack(_x))
      _x = self.frame_name_camera
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.detection_covariance.pose.position.x, _x.detection_covariance.pose.position.y, _x.detection_covariance.pose.position.z, _x.detection_covariance.pose.orientation.x, _x.detection_covariance.pose.orientation.y, _x.detection_covariance.pose.orientation.z, _x.detection_covariance.pose.orientation.w))
      buff.write(_get_struct_36d().pack(*self.detection_covariance.covariance))
      _x = self.detection_covariance_reference_frame
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.detection_covariance is None:
        self.detection_covariance = geometry_msgs.msg.PoseWithCovariance()
      end = 0
      _x = self
      start = end
      end += 20
      (_x.tag_id, _x.x, _x.y,) = _get_struct_i2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_name_fiducial = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frame_name_fiducial = str[start:end]
      start = end
      end += 1
      (self.fiducial_pose_status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_name_fiducial_filtered = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frame_name_fiducial_filtered = str[start:end]
      start = end
      end += 1
      (self.fiducial_filtered_pose_status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_name_camera = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frame_name_camera = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.detection_covariance.pose.position.x, _x.detection_covariance.pose.position.y, _x.detection_covariance.pose.position.z, _x.detection_covariance.pose.orientation.x, _x.detection_covariance.pose.orientation.y, _x.detection_covariance.pose.orientation.z, _x.detection_covariance.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.detection_covariance.covariance = _get_struct_36d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.detection_covariance_reference_frame = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.detection_covariance_reference_frame = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i2d().pack(_x.tag_id, _x.x, _x.y))
      _x = self.frame_name_fiducial
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fiducial_pose_status
      buff.write(_get_struct_B().pack(_x))
      _x = self.frame_name_fiducial_filtered
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fiducial_filtered_pose_status
      buff.write(_get_struct_B().pack(_x))
      _x = self.frame_name_camera
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.detection_covariance.pose.position.x, _x.detection_covariance.pose.position.y, _x.detection_covariance.pose.position.z, _x.detection_covariance.pose.orientation.x, _x.detection_covariance.pose.orientation.y, _x.detection_covariance.pose.orientation.z, _x.detection_covariance.pose.orientation.w))
      buff.write(self.detection_covariance.covariance.tostring())
      _x = self.detection_covariance_reference_frame
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.detection_covariance is None:
        self.detection_covariance = geometry_msgs.msg.PoseWithCovariance()
      end = 0
      _x = self
      start = end
      end += 20
      (_x.tag_id, _x.x, _x.y,) = _get_struct_i2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_name_fiducial = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frame_name_fiducial = str[start:end]
      start = end
      end += 1
      (self.fiducial_pose_status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_name_fiducial_filtered = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frame_name_fiducial_filtered = str[start:end]
      start = end
      end += 1
      (self.fiducial_filtered_pose_status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_name_camera = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frame_name_camera = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.detection_covariance.pose.position.x, _x.detection_covariance.pose.position.y, _x.detection_covariance.pose.position.z, _x.detection_covariance.pose.orientation.x, _x.detection_covariance.pose.orientation.y, _x.detection_covariance.pose.orientation.z, _x.detection_covariance.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.detection_covariance.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.detection_covariance_reference_frame = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.detection_covariance_reference_frame = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_i2d = None
def _get_struct_i2d():
    global _struct_i2d
    if _struct_i2d is None:
        _struct_i2d = struct.Struct("<i2d")
    return _struct_i2d
