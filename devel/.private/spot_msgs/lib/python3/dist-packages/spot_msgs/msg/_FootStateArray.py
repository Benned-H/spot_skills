# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from spot_msgs/FootStateArray.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import spot_msgs.msg

class FootStateArray(genpy.Message):
  _md5sum = "8d803aa327217b778d3c15f2d99f2de9"
  _type = "spot_msgs/FootStateArray"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """FootState[] states

================================================================================
MSG: spot_msgs/FootState
# Contact
uint8 CONTACT_UNKNOWN = 0
uint8 CONTACT_MADE = 1
uint8 CONTACT_LOST = 2

geometry_msgs/Point foot_position_rt_body
uint8 contact
spot_msgs/TerrainState terrain

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: spot_msgs/TerrainState
# See https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference.html?highlight=foot_state#footstate-terrainstate

float32 ground_mu_est
string frame_name
geometry_msgs/Vector3 foot_slip_distance_rt_frame
geometry_msgs/Vector3 foot_slip_velocity_rt_frame
geometry_msgs/Vector3 ground_contact_normal_rt_frame
float32 visual_surface_ground_penetration_mean
float32 visual_surface_ground_penetration_std
================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['states']
  _slot_types = ['spot_msgs/FootState[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       states

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FootStateArray, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.states is None:
        self.states = []
    else:
      self.states = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.states)
      buff.write(_struct_I.pack(length))
      for val1 in self.states:
        _v1 = val1.foot_position_rt_body
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.contact
        buff.write(_get_struct_B().pack(_x))
        _v2 = val1.terrain
        _x = _v2.ground_mu_est
        buff.write(_get_struct_f().pack(_x))
        _x = _v2.frame_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v3 = _v2.foot_slip_distance_rt_frame
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v4 = _v2.foot_slip_velocity_rt_frame
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v5 = _v2.ground_contact_normal_rt_frame
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v2
        buff.write(_get_struct_2f().pack(_x.visual_surface_ground_penetration_mean, _x.visual_surface_ground_penetration_std))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.states is None:
        self.states = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.states = []
      for i in range(0, length):
        val1 = spot_msgs.msg.FootState()
        _v6 = val1.foot_position_rt_body
        _x = _v6
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 1
        (val1.contact,) = _get_struct_B().unpack(str[start:end])
        _v7 = val1.terrain
        start = end
        end += 4
        (_v7.ground_mu_est,) = _get_struct_f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v7.frame_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v7.frame_name = str[start:end]
        _v8 = _v7.foot_slip_distance_rt_frame
        _x = _v8
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v9 = _v7.foot_slip_velocity_rt_frame
        _x = _v9
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v10 = _v7.ground_contact_normal_rt_frame
        _x = _v10
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = _v7
        start = end
        end += 8
        (_x.visual_surface_ground_penetration_mean, _x.visual_surface_ground_penetration_std,) = _get_struct_2f().unpack(str[start:end])
        self.states.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.states)
      buff.write(_struct_I.pack(length))
      for val1 in self.states:
        _v11 = val1.foot_position_rt_body
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.contact
        buff.write(_get_struct_B().pack(_x))
        _v12 = val1.terrain
        _x = _v12.ground_mu_est
        buff.write(_get_struct_f().pack(_x))
        _x = _v12.frame_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v13 = _v12.foot_slip_distance_rt_frame
        _x = _v13
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v14 = _v12.foot_slip_velocity_rt_frame
        _x = _v14
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v15 = _v12.ground_contact_normal_rt_frame
        _x = _v15
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v12
        buff.write(_get_struct_2f().pack(_x.visual_surface_ground_penetration_mean, _x.visual_surface_ground_penetration_std))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.states is None:
        self.states = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.states = []
      for i in range(0, length):
        val1 = spot_msgs.msg.FootState()
        _v16 = val1.foot_position_rt_body
        _x = _v16
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 1
        (val1.contact,) = _get_struct_B().unpack(str[start:end])
        _v17 = val1.terrain
        start = end
        end += 4
        (_v17.ground_mu_est,) = _get_struct_f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v17.frame_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v17.frame_name = str[start:end]
        _v18 = _v17.foot_slip_distance_rt_frame
        _x = _v18
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v19 = _v17.foot_slip_velocity_rt_frame
        _x = _v19
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v20 = _v17.ground_contact_normal_rt_frame
        _x = _v20
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = _v17
        start = end
        end += 8
        (_x.visual_surface_ground_penetration_mean, _x.visual_surface_ground_penetration_std,) = _get_struct_2f().unpack(str[start:end])
        self.states.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
