# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from spot_msgs/SpotCheckKinematic.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SpotCheckKinematic(genpy.Message):
  _md5sum = "fe33606761c255ffb331f260e7ee4d23"
  _type = "spot_msgs/SpotCheckKinematic"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Errors reflect an issue with robot hardware.
uint8 ERROR_UNKNOWN = 0       # Unused enum.
uint8 ERROR_NONE = 1          # No hardware error detected.
uint8 ERROR_CLUTCH_SLIP = 2   # Error detected in clutch performance.
uint8 ERROR_INVALID_RANGE_OF_MOTION = 3  # Error if a joint has an incorrect range of motion.

# A flag to indicate if results has an error.
uint8 error

# The current offset [rad]
float32 offset
# The previous offset [rad]
float32 old_offset

# Joint calibration health score. range [0-1]
# 0 indicates an unhealthy kinematic joint calibration
# 1 indicates a perfect kinematic joint calibration
# Typically, values greater than 0.8 should be expected.
float32 health_score"""
  # Pseudo-constants
  ERROR_UNKNOWN = 0
  ERROR_NONE = 1
  ERROR_CLUTCH_SLIP = 2
  ERROR_INVALID_RANGE_OF_MOTION = 3

  __slots__ = ['error','offset','old_offset','health_score']
  _slot_types = ['uint8','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       error,offset,old_offset,health_score

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SpotCheckKinematic, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.error is None:
        self.error = 0
      if self.offset is None:
        self.offset = 0.
      if self.old_offset is None:
        self.old_offset = 0.
      if self.health_score is None:
        self.health_score = 0.
    else:
      self.error = 0
      self.offset = 0.
      self.old_offset = 0.
      self.health_score = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B3f().pack(_x.error, _x.offset, _x.old_offset, _x.health_score))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.error, _x.offset, _x.old_offset, _x.health_score,) = _get_struct_B3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B3f().pack(_x.error, _x.offset, _x.old_offset, _x.health_score))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.error, _x.offset, _x.old_offset, _x.health_score,) = _get_struct_B3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B3f = None
def _get_struct_B3f():
    global _struct_B3f
    if _struct_B3f is None:
        _struct_B3f = struct.Struct("<B3f")
    return _struct_B3f
