# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from spot_msgs/TerrainParams.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TerrainParams(genpy.Message):
  _md5sum = "58fe7415b44378cf75e03c9f80729c0f"
  _type = "spot_msgs/TerrainParams"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# see https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference.html?highlight=power_state#terrainparams
uint8 GRATED_SURFACES_MODE_UNKNOWN=0
uint8 GRATED_SURFACES_MODE_OFF=1
uint8 GRATED_SURFACES_MODE_ON=2
uint8 GRATED_SURFACES_MODE_AUTO=3

float32 ground_mu_hint
uint8 grated_surfaces_mode"""
  # Pseudo-constants
  GRATED_SURFACES_MODE_UNKNOWN = 0
  GRATED_SURFACES_MODE_OFF = 1
  GRATED_SURFACES_MODE_ON = 2
  GRATED_SURFACES_MODE_AUTO = 3

  __slots__ = ['ground_mu_hint','grated_surfaces_mode']
  _slot_types = ['float32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ground_mu_hint,grated_surfaces_mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TerrainParams, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ground_mu_hint is None:
        self.ground_mu_hint = 0.
      if self.grated_surfaces_mode is None:
        self.grated_surfaces_mode = 0
    else:
      self.ground_mu_hint = 0.
      self.grated_surfaces_mode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_fB().pack(_x.ground_mu_hint, _x.grated_surfaces_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.ground_mu_hint, _x.grated_surfaces_mode,) = _get_struct_fB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_fB().pack(_x.ground_mu_hint, _x.grated_surfaces_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.ground_mu_hint, _x.grated_surfaces_mode,) = _get_struct_fB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_fB = None
def _get_struct_fB():
    global _struct_fB
    if _struct_fB is None:
        _struct_fB = struct.Struct("<fB")
    return _struct_fB
