# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from spot_msgs/WorldObjectArray.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import sensor_msgs.msg
import spot_msgs.msg
import std_msgs.msg

class WorldObjectArray(genpy.Message):
  _md5sum = "d864d05495a41dfc3c5ac3126d50b37f"
  _type = "spot_msgs/WorldObjectArray"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# World objects list
WorldObject[] world_objects
================================================================================
MSG: spot_msgs/WorldObject
int32 id
string name
time acquisition_time

### Frame tree
FrameTreeSnapshot frame_tree_snapshot

### AprilTag properties
AprilTagProperties apriltag_properties

### Image properties
ImageProperties image_properties

### Dock properties
# Dock type enum
uint8 DOCK_TYPE_UNKNOWN=0
uint8 DOCK_TYPE_CONTACT_PROTOTYPE=2
uint8 DOCK_TYPE_SPOT_DOCK=3

int32 dock_id
uint8 dock_type

string frame_name_dock
bool dock_unavailable
bool from_prior_detection

### Ray properties
string ray_frame
geometry_msgs/Vector3 ray_origin
geometry_msgs/Vector3 ray_direction

### Bounding box properties
string bounding_box_frame
geometry_msgs/Vector3 bounding_box_size_ewrt_frame

================================================================================
MSG: spot_msgs/FrameTreeSnapshot
string[] child_edges
ParentEdge[] parent_edges
================================================================================
MSG: spot_msgs/ParentEdge
string parent_frame_name
geometry_msgs/Pose parent_tform_child
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: spot_msgs/AprilTagProperties
# Status
uint8 STATUS_UNKNOWN = 0
uint8 STATUS_OK = 1
uint8 STATUS_AMBIGUOUS = 2
uint8 STATUS_HIGH_ERROR = 3

int32 tag_id
float64 x
float64 y

string frame_name_fiducial
uint8 fiducial_pose_status

string frame_name_fiducial_filtered
uint8 fiducial_filtered_pose_status

string frame_name_camera

geometry_msgs/PoseWithCovariance detection_covariance
string detection_covariance_reference_frame
================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: spot_msgs/ImageProperties
string camera_source

# Polygon coordinates
geometry_msgs/Polygon image_data_coordinates

# Keypoint coordinates
uint8 KEYPOINT_UNKNOWN=0
uint8 KEYPOINT_SIMPLE=1
uint8 KEYPOINT_ORB=2

uint8 image_data_keypoint_type
int32[] keypoint_coordinate_x
int32[] keypoint_coordinate_y
string[] binary_descriptor
float64[] keypoint_score
float64[] keypoint_size
float64[] keypoint_angle

ImageSource image_source
ImageCapture image_capture

string frame_name_image_coordinates
================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: spot_msgs/ImageSource
# Image type enums
uint8 IMAGE_TYPE_UNKNOWN = 0
uint8 IMAGE_TYPE_VISUAL = 1
uint8 IMAGE_TYPE_DEPTH = 2

# Pixel format enums
uint8 PIXEL_FORMAT_UNKNOWN = 0
uint8 PIXEL_FORMAT_GREYSCALE_U8 = 1
uint8 PIXEL_FORMAT_RGB_U8 = 3
uint8 PIXEL_FORMAT_RGBA_U8 = 4
uint8 PIXEL_FORMAT_DEPTH_U16 = 5
uint8 PIXEL_FORMAT_GREYSCALE_U16 = 6

# Image format enums
uint8 FORMAT_UNKNOWN = 0
uint8 FORMAT_JPEG = 1
uint8 FORMAT_RAW = 2
uint8 FORMAT_RLE = 3

string name
int32 cols
int32 rows
float64 depth_scale

# Camera pinhole model parameters
float64 focal_length_x
float64 focal_length_y
float64 principal_point_x
float64 principal_point_y
float64 skew_x
float64 skew_y

uint8 image_type
uint8[] pixel_formats
uint8[] image_formats

================================================================================
MSG: spot_msgs/ImageCapture
time acquisition_time

FrameTreeSnapshot transforms_snapshot
string frame_name_image_sensor

sensor_msgs/Image image

duration capture_exposure_duration
float64 capture_sensor_gain

================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of camera
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['world_objects']
  _slot_types = ['spot_msgs/WorldObject[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       world_objects

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WorldObjectArray, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.world_objects is None:
        self.world_objects = []
    else:
      self.world_objects = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.world_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.world_objects:
        _x = val1.id
        buff.write(_get_struct_i().pack(_x))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v1 = val1.acquisition_time
        _x = _v1
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _v2 = val1.frame_tree_snapshot
        length = len(_v2.child_edges)
        buff.write(_struct_I.pack(length))
        for val3 in _v2.child_edges:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v2.parent_edges)
        buff.write(_struct_I.pack(length))
        for val3 in _v2.parent_edges:
          _x = val3.parent_frame_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v3 = val3.parent_tform_child
          _v4 = _v3.position
          _x = _v4
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v5 = _v3.orientation
          _x = _v5
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v6 = val1.apriltag_properties
        _x = _v6
        buff.write(_get_struct_i2d().pack(_x.tag_id, _x.x, _x.y))
        _x = _v6.frame_name_fiducial
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v6.fiducial_pose_status
        buff.write(_get_struct_B().pack(_x))
        _x = _v6.frame_name_fiducial_filtered
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v6.fiducial_filtered_pose_status
        buff.write(_get_struct_B().pack(_x))
        _x = _v6.frame_name_camera
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v7 = _v6.detection_covariance
        _v8 = _v7.pose
        _v9 = _v8.position
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v10 = _v8.orientation
        _x = _v10
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_36d().pack(*_v7.covariance))
        _x = _v6.detection_covariance_reference_frame
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v11 = val1.image_properties
        _x = _v11.camera_source
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v12 = _v11.image_data_coordinates
        length = len(_v12.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v12.points:
          _x = val4
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v11.image_data_keypoint_type
        buff.write(_get_struct_B().pack(_x))
        length = len(_v11.keypoint_coordinate_x)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.Struct(pattern).pack(*_v11.keypoint_coordinate_x))
        length = len(_v11.keypoint_coordinate_y)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.Struct(pattern).pack(*_v11.keypoint_coordinate_y))
        length = len(_v11.binary_descriptor)
        buff.write(_struct_I.pack(length))
        for val3 in _v11.binary_descriptor:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v11.keypoint_score)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v11.keypoint_score))
        length = len(_v11.keypoint_size)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v11.keypoint_size))
        length = len(_v11.keypoint_angle)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v11.keypoint_angle))
        _v13 = _v11.image_source
        _x = _v13.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v13
        buff.write(_get_struct_2i7dB().pack(_x.cols, _x.rows, _x.depth_scale, _x.focal_length_x, _x.focal_length_y, _x.principal_point_x, _x.principal_point_y, _x.skew_x, _x.skew_y, _x.image_type))
        _x = _v13.pixel_formats
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v13.image_formats
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v14 = _v11.image_capture
        _v15 = _v14.acquisition_time
        _x = _v15
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _v16 = _v14.transforms_snapshot
        length = len(_v16.child_edges)
        buff.write(_struct_I.pack(length))
        for val5 in _v16.child_edges:
          length = len(val5)
          if python3 or type(val5) == unicode:
            val5 = val5.encode('utf-8')
            length = len(val5)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val5))
        length = len(_v16.parent_edges)
        buff.write(_struct_I.pack(length))
        for val5 in _v16.parent_edges:
          _x = val5.parent_frame_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v17 = val5.parent_tform_child
          _v18 = _v17.position
          _x = _v18
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v19 = _v17.orientation
          _x = _v19
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v14.frame_name_image_sensor
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v20 = _v14.image
        _v21 = _v20.header
        _x = _v21.seq
        buff.write(_get_struct_I().pack(_x))
        _v22 = _v21.stamp
        _x = _v22
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v21.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v20
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        _x = _v20.encoding
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v20
        buff.write(_get_struct_BI().pack(_x.is_bigendian, _x.step))
        _x = _v20.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v23 = _v14.capture_exposure_duration
        _x = _v23
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = _v14.capture_sensor_gain
        buff.write(_get_struct_d().pack(_x))
        _x = _v11.frame_name_image_coordinates
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_iB().pack(_x.dock_id, _x.dock_type))
        _x = val1.frame_name_dock
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2B().pack(_x.dock_unavailable, _x.from_prior_detection))
        _x = val1.ray_frame
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v24 = val1.ray_origin
        _x = _v24
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v25 = val1.ray_direction
        _x = _v25
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.bounding_box_frame
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v26 = val1.bounding_box_size_ewrt_frame
        _x = _v26
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.world_objects is None:
        self.world_objects = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.world_objects = []
      for i in range(0, length):
        val1 = spot_msgs.msg.WorldObject()
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _v27 = val1.acquisition_time
        _x = _v27
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _v28 = val1.frame_tree_snapshot
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v28.child_edges = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v28.child_edges.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v28.parent_edges = []
        for i in range(0, length):
          val3 = spot_msgs.msg.ParentEdge()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.parent_frame_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.parent_frame_name = str[start:end]
          _v29 = val3.parent_tform_child
          _v30 = _v29.position
          _x = _v30
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v31 = _v29.orientation
          _x = _v31
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v28.parent_edges.append(val3)
        _v32 = val1.apriltag_properties
        _x = _v32
        start = end
        end += 20
        (_x.tag_id, _x.x, _x.y,) = _get_struct_i2d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v32.frame_name_fiducial = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v32.frame_name_fiducial = str[start:end]
        start = end
        end += 1
        (_v32.fiducial_pose_status,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v32.frame_name_fiducial_filtered = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v32.frame_name_fiducial_filtered = str[start:end]
        start = end
        end += 1
        (_v32.fiducial_filtered_pose_status,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v32.frame_name_camera = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v32.frame_name_camera = str[start:end]
        _v33 = _v32.detection_covariance
        _v34 = _v33.pose
        _v35 = _v34.position
        _x = _v35
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v36 = _v34.orientation
        _x = _v36
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 288
        _v33.covariance = _get_struct_36d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v32.detection_covariance_reference_frame = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v32.detection_covariance_reference_frame = str[start:end]
        _v37 = val1.image_properties
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v37.camera_source = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v37.camera_source = str[start:end]
        _v38 = _v37.image_data_coordinates
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v38.points = []
        for i in range(0, length):
          val4 = geometry_msgs.msg.Point32()
          _x = val4
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v38.points.append(val4)
        start = end
        end += 1
        (_v37.image_data_keypoint_type,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v37.keypoint_coordinate_x = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v37.keypoint_coordinate_y = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v37.binary_descriptor = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v37.binary_descriptor.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v37.keypoint_score = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v37.keypoint_size = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v37.keypoint_angle = s.unpack(str[start:end])
        _v39 = _v37.image_source
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v39.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v39.name = str[start:end]
        _x = _v39
        start = end
        end += 65
        (_x.cols, _x.rows, _x.depth_scale, _x.focal_length_x, _x.focal_length_y, _x.principal_point_x, _x.principal_point_y, _x.skew_x, _x.skew_y, _x.image_type,) = _get_struct_2i7dB().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v39.pixel_formats = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v39.image_formats = str[start:end]
        _v40 = _v37.image_capture
        _v41 = _v40.acquisition_time
        _x = _v41
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _v42 = _v40.transforms_snapshot
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v42.child_edges = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val5 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val5 = str[start:end]
          _v42.child_edges.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v42.parent_edges = []
        for i in range(0, length):
          val5 = spot_msgs.msg.ParentEdge()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val5.parent_frame_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val5.parent_frame_name = str[start:end]
          _v43 = val5.parent_tform_child
          _v44 = _v43.position
          _x = _v44
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v45 = _v43.orientation
          _x = _v45
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v42.parent_edges.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v40.frame_name_image_sensor = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v40.frame_name_image_sensor = str[start:end]
        _v46 = _v40.image
        _v47 = _v46.header
        start = end
        end += 4
        (_v47.seq,) = _get_struct_I().unpack(str[start:end])
        _v48 = _v47.stamp
        _x = _v48
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v47.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v47.frame_id = str[start:end]
        _x = _v46
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v46.encoding = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v46.encoding = str[start:end]
        _x = _v46
        start = end
        end += 5
        (_x.is_bigendian, _x.step,) = _get_struct_BI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v46.data = str[start:end]
        _v49 = _v40.capture_exposure_duration
        _x = _v49
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 8
        (_v40.capture_sensor_gain,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v37.frame_name_image_coordinates = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v37.frame_name_image_coordinates = str[start:end]
        _x = val1
        start = end
        end += 5
        (_x.dock_id, _x.dock_type,) = _get_struct_iB().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.frame_name_dock = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.frame_name_dock = str[start:end]
        _x = val1
        start = end
        end += 2
        (_x.dock_unavailable, _x.from_prior_detection,) = _get_struct_2B().unpack(str[start:end])
        val1.dock_unavailable = bool(val1.dock_unavailable)
        val1.from_prior_detection = bool(val1.from_prior_detection)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.ray_frame = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.ray_frame = str[start:end]
        _v50 = val1.ray_origin
        _x = _v50
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v51 = val1.ray_direction
        _x = _v51
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.bounding_box_frame = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.bounding_box_frame = str[start:end]
        _v52 = val1.bounding_box_size_ewrt_frame
        _x = _v52
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.world_objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.world_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.world_objects:
        _x = val1.id
        buff.write(_get_struct_i().pack(_x))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v53 = val1.acquisition_time
        _x = _v53
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _v54 = val1.frame_tree_snapshot
        length = len(_v54.child_edges)
        buff.write(_struct_I.pack(length))
        for val3 in _v54.child_edges:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v54.parent_edges)
        buff.write(_struct_I.pack(length))
        for val3 in _v54.parent_edges:
          _x = val3.parent_frame_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v55 = val3.parent_tform_child
          _v56 = _v55.position
          _x = _v56
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v57 = _v55.orientation
          _x = _v57
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v58 = val1.apriltag_properties
        _x = _v58
        buff.write(_get_struct_i2d().pack(_x.tag_id, _x.x, _x.y))
        _x = _v58.frame_name_fiducial
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v58.fiducial_pose_status
        buff.write(_get_struct_B().pack(_x))
        _x = _v58.frame_name_fiducial_filtered
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v58.fiducial_filtered_pose_status
        buff.write(_get_struct_B().pack(_x))
        _x = _v58.frame_name_camera
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v59 = _v58.detection_covariance
        _v60 = _v59.pose
        _v61 = _v60.position
        _x = _v61
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v62 = _v60.orientation
        _x = _v62
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_v59.covariance.tostring())
        _x = _v58.detection_covariance_reference_frame
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v63 = val1.image_properties
        _x = _v63.camera_source
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v64 = _v63.image_data_coordinates
        length = len(_v64.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v64.points:
          _x = val4
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v63.image_data_keypoint_type
        buff.write(_get_struct_B().pack(_x))
        length = len(_v63.keypoint_coordinate_x)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(_v63.keypoint_coordinate_x.tostring())
        length = len(_v63.keypoint_coordinate_y)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(_v63.keypoint_coordinate_y.tostring())
        length = len(_v63.binary_descriptor)
        buff.write(_struct_I.pack(length))
        for val3 in _v63.binary_descriptor:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v63.keypoint_score)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v63.keypoint_score.tostring())
        length = len(_v63.keypoint_size)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v63.keypoint_size.tostring())
        length = len(_v63.keypoint_angle)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v63.keypoint_angle.tostring())
        _v65 = _v63.image_source
        _x = _v65.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v65
        buff.write(_get_struct_2i7dB().pack(_x.cols, _x.rows, _x.depth_scale, _x.focal_length_x, _x.focal_length_y, _x.principal_point_x, _x.principal_point_y, _x.skew_x, _x.skew_y, _x.image_type))
        _x = _v65.pixel_formats
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v65.image_formats
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v66 = _v63.image_capture
        _v67 = _v66.acquisition_time
        _x = _v67
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _v68 = _v66.transforms_snapshot
        length = len(_v68.child_edges)
        buff.write(_struct_I.pack(length))
        for val5 in _v68.child_edges:
          length = len(val5)
          if python3 or type(val5) == unicode:
            val5 = val5.encode('utf-8')
            length = len(val5)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val5))
        length = len(_v68.parent_edges)
        buff.write(_struct_I.pack(length))
        for val5 in _v68.parent_edges:
          _x = val5.parent_frame_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v69 = val5.parent_tform_child
          _v70 = _v69.position
          _x = _v70
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v71 = _v69.orientation
          _x = _v71
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v66.frame_name_image_sensor
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v72 = _v66.image
        _v73 = _v72.header
        _x = _v73.seq
        buff.write(_get_struct_I().pack(_x))
        _v74 = _v73.stamp
        _x = _v74
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v73.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v72
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        _x = _v72.encoding
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v72
        buff.write(_get_struct_BI().pack(_x.is_bigendian, _x.step))
        _x = _v72.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v75 = _v66.capture_exposure_duration
        _x = _v75
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = _v66.capture_sensor_gain
        buff.write(_get_struct_d().pack(_x))
        _x = _v63.frame_name_image_coordinates
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_iB().pack(_x.dock_id, _x.dock_type))
        _x = val1.frame_name_dock
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2B().pack(_x.dock_unavailable, _x.from_prior_detection))
        _x = val1.ray_frame
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v76 = val1.ray_origin
        _x = _v76
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v77 = val1.ray_direction
        _x = _v77
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.bounding_box_frame
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v78 = val1.bounding_box_size_ewrt_frame
        _x = _v78
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.world_objects is None:
        self.world_objects = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.world_objects = []
      for i in range(0, length):
        val1 = spot_msgs.msg.WorldObject()
        start = end
        end += 4
        (val1.id,) = _get_struct_i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _v79 = val1.acquisition_time
        _x = _v79
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _v80 = val1.frame_tree_snapshot
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v80.child_edges = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v80.child_edges.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v80.parent_edges = []
        for i in range(0, length):
          val3 = spot_msgs.msg.ParentEdge()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.parent_frame_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.parent_frame_name = str[start:end]
          _v81 = val3.parent_tform_child
          _v82 = _v81.position
          _x = _v82
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v83 = _v81.orientation
          _x = _v83
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v80.parent_edges.append(val3)
        _v84 = val1.apriltag_properties
        _x = _v84
        start = end
        end += 20
        (_x.tag_id, _x.x, _x.y,) = _get_struct_i2d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v84.frame_name_fiducial = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v84.frame_name_fiducial = str[start:end]
        start = end
        end += 1
        (_v84.fiducial_pose_status,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v84.frame_name_fiducial_filtered = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v84.frame_name_fiducial_filtered = str[start:end]
        start = end
        end += 1
        (_v84.fiducial_filtered_pose_status,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v84.frame_name_camera = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v84.frame_name_camera = str[start:end]
        _v85 = _v84.detection_covariance
        _v86 = _v85.pose
        _v87 = _v86.position
        _x = _v87
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v88 = _v86.orientation
        _x = _v88
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 288
        _v85.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v84.detection_covariance_reference_frame = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v84.detection_covariance_reference_frame = str[start:end]
        _v89 = val1.image_properties
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v89.camera_source = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v89.camera_source = str[start:end]
        _v90 = _v89.image_data_coordinates
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v90.points = []
        for i in range(0, length):
          val4 = geometry_msgs.msg.Point32()
          _x = val4
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v90.points.append(val4)
        start = end
        end += 1
        (_v89.image_data_keypoint_type,) = _get_struct_B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v89.keypoint_coordinate_x = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v89.keypoint_coordinate_y = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v89.binary_descriptor = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v89.binary_descriptor.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v89.keypoint_score = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v89.keypoint_size = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v89.keypoint_angle = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _v91 = _v89.image_source
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v91.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v91.name = str[start:end]
        _x = _v91
        start = end
        end += 65
        (_x.cols, _x.rows, _x.depth_scale, _x.focal_length_x, _x.focal_length_y, _x.principal_point_x, _x.principal_point_y, _x.skew_x, _x.skew_y, _x.image_type,) = _get_struct_2i7dB().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v91.pixel_formats = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v91.image_formats = str[start:end]
        _v92 = _v89.image_capture
        _v93 = _v92.acquisition_time
        _x = _v93
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _v94 = _v92.transforms_snapshot
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v94.child_edges = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val5 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val5 = str[start:end]
          _v94.child_edges.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v94.parent_edges = []
        for i in range(0, length):
          val5 = spot_msgs.msg.ParentEdge()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val5.parent_frame_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val5.parent_frame_name = str[start:end]
          _v95 = val5.parent_tform_child
          _v96 = _v95.position
          _x = _v96
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v97 = _v95.orientation
          _x = _v97
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v94.parent_edges.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v92.frame_name_image_sensor = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v92.frame_name_image_sensor = str[start:end]
        _v98 = _v92.image
        _v99 = _v98.header
        start = end
        end += 4
        (_v99.seq,) = _get_struct_I().unpack(str[start:end])
        _v100 = _v99.stamp
        _x = _v100
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v99.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v99.frame_id = str[start:end]
        _x = _v98
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v98.encoding = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v98.encoding = str[start:end]
        _x = _v98
        start = end
        end += 5
        (_x.is_bigendian, _x.step,) = _get_struct_BI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v98.data = str[start:end]
        _v101 = _v92.capture_exposure_duration
        _x = _v101
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 8
        (_v92.capture_sensor_gain,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v89.frame_name_image_coordinates = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v89.frame_name_image_coordinates = str[start:end]
        _x = val1
        start = end
        end += 5
        (_x.dock_id, _x.dock_type,) = _get_struct_iB().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.frame_name_dock = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.frame_name_dock = str[start:end]
        _x = val1
        start = end
        end += 2
        (_x.dock_unavailable, _x.from_prior_detection,) = _get_struct_2B().unpack(str[start:end])
        val1.dock_unavailable = bool(val1.dock_unavailable)
        val1.from_prior_detection = bool(val1.from_prior_detection)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.ray_frame = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.ray_frame = str[start:end]
        _v102 = val1.ray_origin
        _x = _v102
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v103 = val1.ray_direction
        _x = _v103
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.bounding_box_frame = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.bounding_box_frame = str[start:end]
        _v104 = val1.bounding_box_size_ewrt_frame
        _x = _v104
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.world_objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_2i7dB = None
def _get_struct_2i7dB():
    global _struct_2i7dB
    if _struct_2i7dB is None:
        _struct_2i7dB = struct.Struct("<2i7dB")
    return _struct_2i7dB
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_i2d = None
def _get_struct_i2d():
    global _struct_i2d
    if _struct_i2d is None:
        _struct_i2d = struct.Struct("<i2d")
    return _struct_i2d
_struct_iB = None
def _get_struct_iB():
    global _struct_iB
    if _struct_iB is None:
        _struct_iB = struct.Struct("<iB")
    return _struct_iB
