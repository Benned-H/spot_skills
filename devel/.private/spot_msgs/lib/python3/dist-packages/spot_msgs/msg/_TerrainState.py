# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from spot_msgs/TerrainState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class TerrainState(genpy.Message):
  _md5sum = "8ace1ec594dcaee88134d9f49cb542d9"
  _type = "spot_msgs/TerrainState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# See https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference.html?highlight=foot_state#footstate-terrainstate

float32 ground_mu_est
string frame_name
geometry_msgs/Vector3 foot_slip_distance_rt_frame
geometry_msgs/Vector3 foot_slip_velocity_rt_frame
geometry_msgs/Vector3 ground_contact_normal_rt_frame
float32 visual_surface_ground_penetration_mean
float32 visual_surface_ground_penetration_std
================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['ground_mu_est','frame_name','foot_slip_distance_rt_frame','foot_slip_velocity_rt_frame','ground_contact_normal_rt_frame','visual_surface_ground_penetration_mean','visual_surface_ground_penetration_std']
  _slot_types = ['float32','string','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ground_mu_est,frame_name,foot_slip_distance_rt_frame,foot_slip_velocity_rt_frame,ground_contact_normal_rt_frame,visual_surface_ground_penetration_mean,visual_surface_ground_penetration_std

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TerrainState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ground_mu_est is None:
        self.ground_mu_est = 0.
      if self.frame_name is None:
        self.frame_name = ''
      if self.foot_slip_distance_rt_frame is None:
        self.foot_slip_distance_rt_frame = geometry_msgs.msg.Vector3()
      if self.foot_slip_velocity_rt_frame is None:
        self.foot_slip_velocity_rt_frame = geometry_msgs.msg.Vector3()
      if self.ground_contact_normal_rt_frame is None:
        self.ground_contact_normal_rt_frame = geometry_msgs.msg.Vector3()
      if self.visual_surface_ground_penetration_mean is None:
        self.visual_surface_ground_penetration_mean = 0.
      if self.visual_surface_ground_penetration_std is None:
        self.visual_surface_ground_penetration_std = 0.
    else:
      self.ground_mu_est = 0.
      self.frame_name = ''
      self.foot_slip_distance_rt_frame = geometry_msgs.msg.Vector3()
      self.foot_slip_velocity_rt_frame = geometry_msgs.msg.Vector3()
      self.ground_contact_normal_rt_frame = geometry_msgs.msg.Vector3()
      self.visual_surface_ground_penetration_mean = 0.
      self.visual_surface_ground_penetration_std = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.ground_mu_est
      buff.write(_get_struct_f().pack(_x))
      _x = self.frame_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_9d2f().pack(_x.foot_slip_distance_rt_frame.x, _x.foot_slip_distance_rt_frame.y, _x.foot_slip_distance_rt_frame.z, _x.foot_slip_velocity_rt_frame.x, _x.foot_slip_velocity_rt_frame.y, _x.foot_slip_velocity_rt_frame.z, _x.ground_contact_normal_rt_frame.x, _x.ground_contact_normal_rt_frame.y, _x.ground_contact_normal_rt_frame.z, _x.visual_surface_ground_penetration_mean, _x.visual_surface_ground_penetration_std))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.foot_slip_distance_rt_frame is None:
        self.foot_slip_distance_rt_frame = geometry_msgs.msg.Vector3()
      if self.foot_slip_velocity_rt_frame is None:
        self.foot_slip_velocity_rt_frame = geometry_msgs.msg.Vector3()
      if self.ground_contact_normal_rt_frame is None:
        self.ground_contact_normal_rt_frame = geometry_msgs.msg.Vector3()
      end = 0
      start = end
      end += 4
      (self.ground_mu_est,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frame_name = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.foot_slip_distance_rt_frame.x, _x.foot_slip_distance_rt_frame.y, _x.foot_slip_distance_rt_frame.z, _x.foot_slip_velocity_rt_frame.x, _x.foot_slip_velocity_rt_frame.y, _x.foot_slip_velocity_rt_frame.z, _x.ground_contact_normal_rt_frame.x, _x.ground_contact_normal_rt_frame.y, _x.ground_contact_normal_rt_frame.z, _x.visual_surface_ground_penetration_mean, _x.visual_surface_ground_penetration_std,) = _get_struct_9d2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.ground_mu_est
      buff.write(_get_struct_f().pack(_x))
      _x = self.frame_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_9d2f().pack(_x.foot_slip_distance_rt_frame.x, _x.foot_slip_distance_rt_frame.y, _x.foot_slip_distance_rt_frame.z, _x.foot_slip_velocity_rt_frame.x, _x.foot_slip_velocity_rt_frame.y, _x.foot_slip_velocity_rt_frame.z, _x.ground_contact_normal_rt_frame.x, _x.ground_contact_normal_rt_frame.y, _x.ground_contact_normal_rt_frame.z, _x.visual_surface_ground_penetration_mean, _x.visual_surface_ground_penetration_std))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.foot_slip_distance_rt_frame is None:
        self.foot_slip_distance_rt_frame = geometry_msgs.msg.Vector3()
      if self.foot_slip_velocity_rt_frame is None:
        self.foot_slip_velocity_rt_frame = geometry_msgs.msg.Vector3()
      if self.ground_contact_normal_rt_frame is None:
        self.ground_contact_normal_rt_frame = geometry_msgs.msg.Vector3()
      end = 0
      start = end
      end += 4
      (self.ground_mu_est,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frame_name = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.foot_slip_distance_rt_frame.x, _x.foot_slip_distance_rt_frame.y, _x.foot_slip_distance_rt_frame.z, _x.foot_slip_velocity_rt_frame.x, _x.foot_slip_velocity_rt_frame.y, _x.foot_slip_velocity_rt_frame.z, _x.ground_contact_normal_rt_frame.x, _x.ground_contact_normal_rt_frame.y, _x.ground_contact_normal_rt_frame.z, _x.visual_surface_ground_penetration_mean, _x.visual_surface_ground_penetration_std,) = _get_struct_9d2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9d2f = None
def _get_struct_9d2f():
    global _struct_9d2f
    if _struct_9d2f is None:
        _struct_9d2f = struct.Struct("<9d2f")
    return _struct_9d2f
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
