# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from spot_msgs/ImageProperties.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import sensor_msgs.msg
import spot_msgs.msg
import std_msgs.msg

class ImageProperties(genpy.Message):
  _md5sum = "94ff5688662ac7e33ef10bbd7d52e755"
  _type = "spot_msgs/ImageProperties"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string camera_source

# Polygon coordinates
geometry_msgs/Polygon image_data_coordinates

# Keypoint coordinates
uint8 KEYPOINT_UNKNOWN=0
uint8 KEYPOINT_SIMPLE=1
uint8 KEYPOINT_ORB=2

uint8 image_data_keypoint_type
int32[] keypoint_coordinate_x
int32[] keypoint_coordinate_y
string[] binary_descriptor
float64[] keypoint_score
float64[] keypoint_size
float64[] keypoint_angle

ImageSource image_source
ImageCapture image_capture

string frame_name_image_coordinates
================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: spot_msgs/ImageSource
# Image type enums
uint8 IMAGE_TYPE_UNKNOWN = 0
uint8 IMAGE_TYPE_VISUAL = 1
uint8 IMAGE_TYPE_DEPTH = 2

# Pixel format enums
uint8 PIXEL_FORMAT_UNKNOWN = 0
uint8 PIXEL_FORMAT_GREYSCALE_U8 = 1
uint8 PIXEL_FORMAT_RGB_U8 = 3
uint8 PIXEL_FORMAT_RGBA_U8 = 4
uint8 PIXEL_FORMAT_DEPTH_U16 = 5
uint8 PIXEL_FORMAT_GREYSCALE_U16 = 6

# Image format enums
uint8 FORMAT_UNKNOWN = 0
uint8 FORMAT_JPEG = 1
uint8 FORMAT_RAW = 2
uint8 FORMAT_RLE = 3

string name
int32 cols
int32 rows
float64 depth_scale

# Camera pinhole model parameters
float64 focal_length_x
float64 focal_length_y
float64 principal_point_x
float64 principal_point_y
float64 skew_x
float64 skew_y

uint8 image_type
uint8[] pixel_formats
uint8[] image_formats

================================================================================
MSG: spot_msgs/ImageCapture
time acquisition_time

FrameTreeSnapshot transforms_snapshot
string frame_name_image_sensor

sensor_msgs/Image image

duration capture_exposure_duration
float64 capture_sensor_gain

================================================================================
MSG: spot_msgs/FrameTreeSnapshot
string[] child_edges
ParentEdge[] parent_edges
================================================================================
MSG: spot_msgs/ParentEdge
string parent_frame_name
geometry_msgs/Pose parent_tform_child
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of camera
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  KEYPOINT_UNKNOWN = 0
  KEYPOINT_SIMPLE = 1
  KEYPOINT_ORB = 2

  __slots__ = ['camera_source','image_data_coordinates','image_data_keypoint_type','keypoint_coordinate_x','keypoint_coordinate_y','binary_descriptor','keypoint_score','keypoint_size','keypoint_angle','image_source','image_capture','frame_name_image_coordinates']
  _slot_types = ['string','geometry_msgs/Polygon','uint8','int32[]','int32[]','string[]','float64[]','float64[]','float64[]','spot_msgs/ImageSource','spot_msgs/ImageCapture','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       camera_source,image_data_coordinates,image_data_keypoint_type,keypoint_coordinate_x,keypoint_coordinate_y,binary_descriptor,keypoint_score,keypoint_size,keypoint_angle,image_source,image_capture,frame_name_image_coordinates

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ImageProperties, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.camera_source is None:
        self.camera_source = ''
      if self.image_data_coordinates is None:
        self.image_data_coordinates = geometry_msgs.msg.Polygon()
      if self.image_data_keypoint_type is None:
        self.image_data_keypoint_type = 0
      if self.keypoint_coordinate_x is None:
        self.keypoint_coordinate_x = []
      if self.keypoint_coordinate_y is None:
        self.keypoint_coordinate_y = []
      if self.binary_descriptor is None:
        self.binary_descriptor = []
      if self.keypoint_score is None:
        self.keypoint_score = []
      if self.keypoint_size is None:
        self.keypoint_size = []
      if self.keypoint_angle is None:
        self.keypoint_angle = []
      if self.image_source is None:
        self.image_source = spot_msgs.msg.ImageSource()
      if self.image_capture is None:
        self.image_capture = spot_msgs.msg.ImageCapture()
      if self.frame_name_image_coordinates is None:
        self.frame_name_image_coordinates = ''
    else:
      self.camera_source = ''
      self.image_data_coordinates = geometry_msgs.msg.Polygon()
      self.image_data_keypoint_type = 0
      self.keypoint_coordinate_x = []
      self.keypoint_coordinate_y = []
      self.binary_descriptor = []
      self.keypoint_score = []
      self.keypoint_size = []
      self.keypoint_angle = []
      self.image_source = spot_msgs.msg.ImageSource()
      self.image_capture = spot_msgs.msg.ImageCapture()
      self.frame_name_image_coordinates = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.camera_source
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.image_data_coordinates.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.image_data_coordinates.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self.image_data_keypoint_type
      buff.write(_get_struct_B().pack(_x))
      length = len(self.keypoint_coordinate_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.keypoint_coordinate_x))
      length = len(self.keypoint_coordinate_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.keypoint_coordinate_y))
      length = len(self.binary_descriptor)
      buff.write(_struct_I.pack(length))
      for val1 in self.binary_descriptor:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.keypoint_score)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.keypoint_score))
      length = len(self.keypoint_size)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.keypoint_size))
      length = len(self.keypoint_angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.keypoint_angle))
      _x = self.image_source.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i7dB().pack(_x.image_source.cols, _x.image_source.rows, _x.image_source.depth_scale, _x.image_source.focal_length_x, _x.image_source.focal_length_y, _x.image_source.principal_point_x, _x.image_source.principal_point_y, _x.image_source.skew_x, _x.image_source.skew_y, _x.image_source.image_type))
      _x = self.image_source.pixel_formats
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.image_source.image_formats
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.image_capture.acquisition_time.secs, _x.image_capture.acquisition_time.nsecs))
      length = len(self.image_capture.transforms_snapshot.child_edges)
      buff.write(_struct_I.pack(length))
      for val1 in self.image_capture.transforms_snapshot.child_edges:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.image_capture.transforms_snapshot.parent_edges)
      buff.write(_struct_I.pack(length))
      for val1 in self.image_capture.transforms_snapshot.parent_edges:
        _x = val1.parent_frame_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v1 = val1.parent_tform_child
        _v2 = _v1.position
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v3 = _v1.orientation
        _x = _v3
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      _x = self.image_capture.frame_name_image_sensor
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.image_capture.image.header.seq, _x.image_capture.image.header.stamp.secs, _x.image_capture.image.header.stamp.nsecs))
      _x = self.image_capture.image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.image_capture.image.height, _x.image_capture.image.width))
      _x = self.image_capture.image.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.image_capture.image.is_bigendian, _x.image_capture.image.step))
      _x = self.image_capture.image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2id().pack(_x.image_capture.capture_exposure_duration.secs, _x.image_capture.capture_exposure_duration.nsecs, _x.image_capture.capture_sensor_gain))
      _x = self.frame_name_image_coordinates
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.image_data_coordinates is None:
        self.image_data_coordinates = geometry_msgs.msg.Polygon()
      if self.image_source is None:
        self.image_source = spot_msgs.msg.ImageSource()
      if self.image_capture is None:
        self.image_capture = spot_msgs.msg.ImageCapture()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_source = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.camera_source = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.image_data_coordinates.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.image_data_coordinates.points.append(val1)
      start = end
      end += 1
      (self.image_data_keypoint_type,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.keypoint_coordinate_x = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.keypoint_coordinate_y = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.binary_descriptor = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.binary_descriptor.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.keypoint_score = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.keypoint_size = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.keypoint_angle = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_source.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.image_source.name = str[start:end]
      _x = self
      start = end
      end += 65
      (_x.image_source.cols, _x.image_source.rows, _x.image_source.depth_scale, _x.image_source.focal_length_x, _x.image_source.focal_length_y, _x.image_source.principal_point_x, _x.image_source.principal_point_y, _x.image_source.skew_x, _x.image_source.skew_y, _x.image_source.image_type,) = _get_struct_2i7dB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.image_source.pixel_formats = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.image_source.image_formats = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.image_capture.acquisition_time.secs, _x.image_capture.acquisition_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.image_capture.transforms_snapshot.child_edges = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.image_capture.transforms_snapshot.child_edges.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.image_capture.transforms_snapshot.parent_edges = []
      for i in range(0, length):
        val1 = spot_msgs.msg.ParentEdge()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.parent_frame_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.parent_frame_name = str[start:end]
        _v4 = val1.parent_tform_child
        _v5 = _v4.position
        _x = _v5
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v6 = _v4.orientation
        _x = _v6
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.image_capture.transforms_snapshot.parent_edges.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_capture.frame_name_image_sensor = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.image_capture.frame_name_image_sensor = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.image_capture.image.header.seq, _x.image_capture.image.header.stamp.secs, _x.image_capture.image.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_capture.image.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.image_capture.image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.image_capture.image.height, _x.image_capture.image.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_capture.image.encoding = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.image_capture.image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.image_capture.image.is_bigendian, _x.image_capture.image.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.image_capture.image.data = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.image_capture.capture_exposure_duration.secs, _x.image_capture.capture_exposure_duration.nsecs, _x.image_capture.capture_sensor_gain,) = _get_struct_2id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_name_image_coordinates = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frame_name_image_coordinates = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.camera_source
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.image_data_coordinates.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.image_data_coordinates.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self.image_data_keypoint_type
      buff.write(_get_struct_B().pack(_x))
      length = len(self.keypoint_coordinate_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.keypoint_coordinate_x.tostring())
      length = len(self.keypoint_coordinate_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.keypoint_coordinate_y.tostring())
      length = len(self.binary_descriptor)
      buff.write(_struct_I.pack(length))
      for val1 in self.binary_descriptor:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.keypoint_score)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.keypoint_score.tostring())
      length = len(self.keypoint_size)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.keypoint_size.tostring())
      length = len(self.keypoint_angle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.keypoint_angle.tostring())
      _x = self.image_source.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i7dB().pack(_x.image_source.cols, _x.image_source.rows, _x.image_source.depth_scale, _x.image_source.focal_length_x, _x.image_source.focal_length_y, _x.image_source.principal_point_x, _x.image_source.principal_point_y, _x.image_source.skew_x, _x.image_source.skew_y, _x.image_source.image_type))
      _x = self.image_source.pixel_formats
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.image_source.image_formats
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.image_capture.acquisition_time.secs, _x.image_capture.acquisition_time.nsecs))
      length = len(self.image_capture.transforms_snapshot.child_edges)
      buff.write(_struct_I.pack(length))
      for val1 in self.image_capture.transforms_snapshot.child_edges:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.image_capture.transforms_snapshot.parent_edges)
      buff.write(_struct_I.pack(length))
      for val1 in self.image_capture.transforms_snapshot.parent_edges:
        _x = val1.parent_frame_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v7 = val1.parent_tform_child
        _v8 = _v7.position
        _x = _v8
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v9 = _v7.orientation
        _x = _v9
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      _x = self.image_capture.frame_name_image_sensor
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.image_capture.image.header.seq, _x.image_capture.image.header.stamp.secs, _x.image_capture.image.header.stamp.nsecs))
      _x = self.image_capture.image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.image_capture.image.height, _x.image_capture.image.width))
      _x = self.image_capture.image.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.image_capture.image.is_bigendian, _x.image_capture.image.step))
      _x = self.image_capture.image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2id().pack(_x.image_capture.capture_exposure_duration.secs, _x.image_capture.capture_exposure_duration.nsecs, _x.image_capture.capture_sensor_gain))
      _x = self.frame_name_image_coordinates
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.image_data_coordinates is None:
        self.image_data_coordinates = geometry_msgs.msg.Polygon()
      if self.image_source is None:
        self.image_source = spot_msgs.msg.ImageSource()
      if self.image_capture is None:
        self.image_capture = spot_msgs.msg.ImageCapture()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_source = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.camera_source = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.image_data_coordinates.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.image_data_coordinates.points.append(val1)
      start = end
      end += 1
      (self.image_data_keypoint_type,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.keypoint_coordinate_x = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.keypoint_coordinate_y = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.binary_descriptor = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.binary_descriptor.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.keypoint_score = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.keypoint_size = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.keypoint_angle = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_source.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.image_source.name = str[start:end]
      _x = self
      start = end
      end += 65
      (_x.image_source.cols, _x.image_source.rows, _x.image_source.depth_scale, _x.image_source.focal_length_x, _x.image_source.focal_length_y, _x.image_source.principal_point_x, _x.image_source.principal_point_y, _x.image_source.skew_x, _x.image_source.skew_y, _x.image_source.image_type,) = _get_struct_2i7dB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.image_source.pixel_formats = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.image_source.image_formats = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.image_capture.acquisition_time.secs, _x.image_capture.acquisition_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.image_capture.transforms_snapshot.child_edges = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.image_capture.transforms_snapshot.child_edges.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.image_capture.transforms_snapshot.parent_edges = []
      for i in range(0, length):
        val1 = spot_msgs.msg.ParentEdge()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.parent_frame_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.parent_frame_name = str[start:end]
        _v10 = val1.parent_tform_child
        _v11 = _v10.position
        _x = _v11
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v12 = _v10.orientation
        _x = _v12
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.image_capture.transforms_snapshot.parent_edges.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_capture.frame_name_image_sensor = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.image_capture.frame_name_image_sensor = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.image_capture.image.header.seq, _x.image_capture.image.header.stamp.secs, _x.image_capture.image.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_capture.image.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.image_capture.image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.image_capture.image.height, _x.image_capture.image.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_capture.image.encoding = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.image_capture.image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.image_capture.image.is_bigendian, _x.image_capture.image.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.image_capture.image.data = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.image_capture.capture_exposure_duration.secs, _x.image_capture.capture_exposure_duration.nsecs, _x.image_capture.capture_sensor_gain,) = _get_struct_2id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_name_image_coordinates = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frame_name_image_coordinates = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2i7dB = None
def _get_struct_2i7dB():
    global _struct_2i7dB
    if _struct_2i7dB is None:
        _struct_2i7dB = struct.Struct("<2i7dB")
    return _struct_2i7dB
_struct_2id = None
def _get_struct_2id():
    global _struct_2id
    if _struct_2id is None:
        _struct_2id = struct.Struct("<2id")
    return _struct_2id
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
