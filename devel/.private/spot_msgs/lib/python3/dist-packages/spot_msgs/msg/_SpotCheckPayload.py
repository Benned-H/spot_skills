# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from spot_msgs/SpotCheckPayload.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SpotCheckPayload(genpy.Message):
  _md5sum = "8a5462c1672d0b3443d0f93dc832b167"
  _type = "spot_msgs/SpotCheckPayload"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Errors reflect an issue with payload configuration.

# Unused enum.
uint8 ERROR_UNKNOWN = 0
# No error found in the payloads.
uint8 ERROR_NONE = 1
# There is a mass discrepancy between the registered payload and what is estimated.
uint8 ERROR_MASS_DISCREPANCY = 2

# A flag to indicate if configuration has an error.
uint8 error

# Indicates how much extra payload (in kg) we think the robot has
# Positive indicates robot has more payload than it is configured.
# Negative indicates robot has less payload than it is configured.
float32 extra_payload"""
  # Pseudo-constants
  ERROR_UNKNOWN = 0
  ERROR_NONE = 1
  ERROR_MASS_DISCREPANCY = 2

  __slots__ = ['error','extra_payload']
  _slot_types = ['uint8','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       error,extra_payload

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SpotCheckPayload, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.error is None:
        self.error = 0
      if self.extra_payload is None:
        self.extra_payload = 0.
    else:
      self.error = 0
      self.extra_payload = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Bf().pack(_x.error, _x.extra_payload))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.error, _x.extra_payload,) = _get_struct_Bf().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Bf().pack(_x.error, _x.extra_payload))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.error, _x.extra_payload,) = _get_struct_Bf().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Bf = None
def _get_struct_Bf():
    global _struct_Bf
    if _struct_Bf is None:
        _struct_Bf = struct.Struct("<Bf")
    return _struct_Bf
