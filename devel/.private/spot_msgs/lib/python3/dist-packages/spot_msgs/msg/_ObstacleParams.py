# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from spot_msgs/ObstacleParams.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ObstacleParams(genpy.Message):
  _md5sum = "9b3390759d58138d9a7a53bad6b0edad"
  _type = "spot_msgs/ObstacleParams"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# see https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference.html?highlight=power_state#obstacleparams
bool disable_vision_foot_obstacle_avoidance
bool disable_vision_foot_constraint_avoidance
bool disable_vision_body_obstacle_avoidance
float32 obstacle_avoidance_padding
bool disable_vision_foot_obstacle_body_assist
bool disable_vision_negative_obstacles"""
  __slots__ = ['disable_vision_foot_obstacle_avoidance','disable_vision_foot_constraint_avoidance','disable_vision_body_obstacle_avoidance','obstacle_avoidance_padding','disable_vision_foot_obstacle_body_assist','disable_vision_negative_obstacles']
  _slot_types = ['bool','bool','bool','float32','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       disable_vision_foot_obstacle_avoidance,disable_vision_foot_constraint_avoidance,disable_vision_body_obstacle_avoidance,obstacle_avoidance_padding,disable_vision_foot_obstacle_body_assist,disable_vision_negative_obstacles

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObstacleParams, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.disable_vision_foot_obstacle_avoidance is None:
        self.disable_vision_foot_obstacle_avoidance = False
      if self.disable_vision_foot_constraint_avoidance is None:
        self.disable_vision_foot_constraint_avoidance = False
      if self.disable_vision_body_obstacle_avoidance is None:
        self.disable_vision_body_obstacle_avoidance = False
      if self.obstacle_avoidance_padding is None:
        self.obstacle_avoidance_padding = 0.
      if self.disable_vision_foot_obstacle_body_assist is None:
        self.disable_vision_foot_obstacle_body_assist = False
      if self.disable_vision_negative_obstacles is None:
        self.disable_vision_negative_obstacles = False
    else:
      self.disable_vision_foot_obstacle_avoidance = False
      self.disable_vision_foot_constraint_avoidance = False
      self.disable_vision_body_obstacle_avoidance = False
      self.obstacle_avoidance_padding = 0.
      self.disable_vision_foot_obstacle_body_assist = False
      self.disable_vision_negative_obstacles = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3Bf2B().pack(_x.disable_vision_foot_obstacle_avoidance, _x.disable_vision_foot_constraint_avoidance, _x.disable_vision_body_obstacle_avoidance, _x.obstacle_avoidance_padding, _x.disable_vision_foot_obstacle_body_assist, _x.disable_vision_negative_obstacles))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.disable_vision_foot_obstacle_avoidance, _x.disable_vision_foot_constraint_avoidance, _x.disable_vision_body_obstacle_avoidance, _x.obstacle_avoidance_padding, _x.disable_vision_foot_obstacle_body_assist, _x.disable_vision_negative_obstacles,) = _get_struct_3Bf2B().unpack(str[start:end])
      self.disable_vision_foot_obstacle_avoidance = bool(self.disable_vision_foot_obstacle_avoidance)
      self.disable_vision_foot_constraint_avoidance = bool(self.disable_vision_foot_constraint_avoidance)
      self.disable_vision_body_obstacle_avoidance = bool(self.disable_vision_body_obstacle_avoidance)
      self.disable_vision_foot_obstacle_body_assist = bool(self.disable_vision_foot_obstacle_body_assist)
      self.disable_vision_negative_obstacles = bool(self.disable_vision_negative_obstacles)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3Bf2B().pack(_x.disable_vision_foot_obstacle_avoidance, _x.disable_vision_foot_constraint_avoidance, _x.disable_vision_body_obstacle_avoidance, _x.obstacle_avoidance_padding, _x.disable_vision_foot_obstacle_body_assist, _x.disable_vision_negative_obstacles))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.disable_vision_foot_obstacle_avoidance, _x.disable_vision_foot_constraint_avoidance, _x.disable_vision_body_obstacle_avoidance, _x.obstacle_avoidance_padding, _x.disable_vision_foot_obstacle_body_assist, _x.disable_vision_negative_obstacles,) = _get_struct_3Bf2B().unpack(str[start:end])
      self.disable_vision_foot_obstacle_avoidance = bool(self.disable_vision_foot_obstacle_avoidance)
      self.disable_vision_foot_constraint_avoidance = bool(self.disable_vision_foot_constraint_avoidance)
      self.disable_vision_body_obstacle_avoidance = bool(self.disable_vision_body_obstacle_avoidance)
      self.disable_vision_foot_obstacle_body_assist = bool(self.disable_vision_foot_obstacle_body_assist)
      self.disable_vision_negative_obstacles = bool(self.disable_vision_negative_obstacles)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3Bf2B = None
def _get_struct_3Bf2B():
    global _struct_3Bf2B
    if _struct_3Bf2B is None:
        _struct_3Bf2B = struct.Struct("<3Bf2B")
    return _struct_3Bf2B
