# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from spot_msgs/MobilityParams.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import spot_msgs.msg

class MobilityParams(genpy.Message):
  _md5sum = "cd45019f5c330befb9646917a064a94d"
  _type = "spot_msgs/MobilityParams"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Pose body_control
uint32 locomotion_hint
uint8 swing_height
bool stair_hint
geometry_msgs/Twist velocity_limit
spot_msgs/ObstacleParams obstacle_params
spot_msgs/TerrainParams terrain_params
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: spot_msgs/ObstacleParams
# see https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference.html?highlight=power_state#obstacleparams
bool disable_vision_foot_obstacle_avoidance
bool disable_vision_foot_constraint_avoidance
bool disable_vision_body_obstacle_avoidance
float32 obstacle_avoidance_padding
bool disable_vision_foot_obstacle_body_assist
bool disable_vision_negative_obstacles
================================================================================
MSG: spot_msgs/TerrainParams
# see https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference.html?highlight=power_state#terrainparams
uint8 GRATED_SURFACES_MODE_UNKNOWN=0
uint8 GRATED_SURFACES_MODE_OFF=1
uint8 GRATED_SURFACES_MODE_ON=2
uint8 GRATED_SURFACES_MODE_AUTO=3

float32 ground_mu_hint
uint8 grated_surfaces_mode"""
  __slots__ = ['body_control','locomotion_hint','swing_height','stair_hint','velocity_limit','obstacle_params','terrain_params']
  _slot_types = ['geometry_msgs/Pose','uint32','uint8','bool','geometry_msgs/Twist','spot_msgs/ObstacleParams','spot_msgs/TerrainParams']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       body_control,locomotion_hint,swing_height,stair_hint,velocity_limit,obstacle_params,terrain_params

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MobilityParams, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.body_control is None:
        self.body_control = geometry_msgs.msg.Pose()
      if self.locomotion_hint is None:
        self.locomotion_hint = 0
      if self.swing_height is None:
        self.swing_height = 0
      if self.stair_hint is None:
        self.stair_hint = False
      if self.velocity_limit is None:
        self.velocity_limit = geometry_msgs.msg.Twist()
      if self.obstacle_params is None:
        self.obstacle_params = spot_msgs.msg.ObstacleParams()
      if self.terrain_params is None:
        self.terrain_params = spot_msgs.msg.TerrainParams()
    else:
      self.body_control = geometry_msgs.msg.Pose()
      self.locomotion_hint = 0
      self.swing_height = 0
      self.stair_hint = False
      self.velocity_limit = geometry_msgs.msg.Twist()
      self.obstacle_params = spot_msgs.msg.ObstacleParams()
      self.terrain_params = spot_msgs.msg.TerrainParams()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7dI2B6d3Bf2BfB().pack(_x.body_control.position.x, _x.body_control.position.y, _x.body_control.position.z, _x.body_control.orientation.x, _x.body_control.orientation.y, _x.body_control.orientation.z, _x.body_control.orientation.w, _x.locomotion_hint, _x.swing_height, _x.stair_hint, _x.velocity_limit.linear.x, _x.velocity_limit.linear.y, _x.velocity_limit.linear.z, _x.velocity_limit.angular.x, _x.velocity_limit.angular.y, _x.velocity_limit.angular.z, _x.obstacle_params.disable_vision_foot_obstacle_avoidance, _x.obstacle_params.disable_vision_foot_constraint_avoidance, _x.obstacle_params.disable_vision_body_obstacle_avoidance, _x.obstacle_params.obstacle_avoidance_padding, _x.obstacle_params.disable_vision_foot_obstacle_body_assist, _x.obstacle_params.disable_vision_negative_obstacles, _x.terrain_params.ground_mu_hint, _x.terrain_params.grated_surfaces_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.body_control is None:
        self.body_control = geometry_msgs.msg.Pose()
      if self.velocity_limit is None:
        self.velocity_limit = geometry_msgs.msg.Twist()
      if self.obstacle_params is None:
        self.obstacle_params = spot_msgs.msg.ObstacleParams()
      if self.terrain_params is None:
        self.terrain_params = spot_msgs.msg.TerrainParams()
      end = 0
      _x = self
      start = end
      end += 124
      (_x.body_control.position.x, _x.body_control.position.y, _x.body_control.position.z, _x.body_control.orientation.x, _x.body_control.orientation.y, _x.body_control.orientation.z, _x.body_control.orientation.w, _x.locomotion_hint, _x.swing_height, _x.stair_hint, _x.velocity_limit.linear.x, _x.velocity_limit.linear.y, _x.velocity_limit.linear.z, _x.velocity_limit.angular.x, _x.velocity_limit.angular.y, _x.velocity_limit.angular.z, _x.obstacle_params.disable_vision_foot_obstacle_avoidance, _x.obstacle_params.disable_vision_foot_constraint_avoidance, _x.obstacle_params.disable_vision_body_obstacle_avoidance, _x.obstacle_params.obstacle_avoidance_padding, _x.obstacle_params.disable_vision_foot_obstacle_body_assist, _x.obstacle_params.disable_vision_negative_obstacles, _x.terrain_params.ground_mu_hint, _x.terrain_params.grated_surfaces_mode,) = _get_struct_7dI2B6d3Bf2BfB().unpack(str[start:end])
      self.stair_hint = bool(self.stair_hint)
      self.obstacle_params.disable_vision_foot_obstacle_avoidance = bool(self.obstacle_params.disable_vision_foot_obstacle_avoidance)
      self.obstacle_params.disable_vision_foot_constraint_avoidance = bool(self.obstacle_params.disable_vision_foot_constraint_avoidance)
      self.obstacle_params.disable_vision_body_obstacle_avoidance = bool(self.obstacle_params.disable_vision_body_obstacle_avoidance)
      self.obstacle_params.disable_vision_foot_obstacle_body_assist = bool(self.obstacle_params.disable_vision_foot_obstacle_body_assist)
      self.obstacle_params.disable_vision_negative_obstacles = bool(self.obstacle_params.disable_vision_negative_obstacles)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7dI2B6d3Bf2BfB().pack(_x.body_control.position.x, _x.body_control.position.y, _x.body_control.position.z, _x.body_control.orientation.x, _x.body_control.orientation.y, _x.body_control.orientation.z, _x.body_control.orientation.w, _x.locomotion_hint, _x.swing_height, _x.stair_hint, _x.velocity_limit.linear.x, _x.velocity_limit.linear.y, _x.velocity_limit.linear.z, _x.velocity_limit.angular.x, _x.velocity_limit.angular.y, _x.velocity_limit.angular.z, _x.obstacle_params.disable_vision_foot_obstacle_avoidance, _x.obstacle_params.disable_vision_foot_constraint_avoidance, _x.obstacle_params.disable_vision_body_obstacle_avoidance, _x.obstacle_params.obstacle_avoidance_padding, _x.obstacle_params.disable_vision_foot_obstacle_body_assist, _x.obstacle_params.disable_vision_negative_obstacles, _x.terrain_params.ground_mu_hint, _x.terrain_params.grated_surfaces_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.body_control is None:
        self.body_control = geometry_msgs.msg.Pose()
      if self.velocity_limit is None:
        self.velocity_limit = geometry_msgs.msg.Twist()
      if self.obstacle_params is None:
        self.obstacle_params = spot_msgs.msg.ObstacleParams()
      if self.terrain_params is None:
        self.terrain_params = spot_msgs.msg.TerrainParams()
      end = 0
      _x = self
      start = end
      end += 124
      (_x.body_control.position.x, _x.body_control.position.y, _x.body_control.position.z, _x.body_control.orientation.x, _x.body_control.orientation.y, _x.body_control.orientation.z, _x.body_control.orientation.w, _x.locomotion_hint, _x.swing_height, _x.stair_hint, _x.velocity_limit.linear.x, _x.velocity_limit.linear.y, _x.velocity_limit.linear.z, _x.velocity_limit.angular.x, _x.velocity_limit.angular.y, _x.velocity_limit.angular.z, _x.obstacle_params.disable_vision_foot_obstacle_avoidance, _x.obstacle_params.disable_vision_foot_constraint_avoidance, _x.obstacle_params.disable_vision_body_obstacle_avoidance, _x.obstacle_params.obstacle_avoidance_padding, _x.obstacle_params.disable_vision_foot_obstacle_body_assist, _x.obstacle_params.disable_vision_negative_obstacles, _x.terrain_params.ground_mu_hint, _x.terrain_params.grated_surfaces_mode,) = _get_struct_7dI2B6d3Bf2BfB().unpack(str[start:end])
      self.stair_hint = bool(self.stair_hint)
      self.obstacle_params.disable_vision_foot_obstacle_avoidance = bool(self.obstacle_params.disable_vision_foot_obstacle_avoidance)
      self.obstacle_params.disable_vision_foot_constraint_avoidance = bool(self.obstacle_params.disable_vision_foot_constraint_avoidance)
      self.obstacle_params.disable_vision_body_obstacle_avoidance = bool(self.obstacle_params.disable_vision_body_obstacle_avoidance)
      self.obstacle_params.disable_vision_foot_obstacle_body_assist = bool(self.obstacle_params.disable_vision_foot_obstacle_body_assist)
      self.obstacle_params.disable_vision_negative_obstacles = bool(self.obstacle_params.disable_vision_negative_obstacles)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7dI2B6d3Bf2BfB = None
def _get_struct_7dI2B6d3Bf2BfB():
    global _struct_7dI2B6d3Bf2BfB
    if _struct_7dI2B6d3Bf2BfB is None:
        _struct_7dI2B6d3Bf2BfB = struct.Struct("<7dI2B6d3Bf2BfB")
    return _struct_7dI2B6d3Bf2BfB
