// Generated by gencpp from file spot_msgs/WorldObject.msg
// DO NOT EDIT!


#ifndef SPOT_MSGS_MESSAGE_WORLDOBJECT_H
#define SPOT_MSGS_MESSAGE_WORLDOBJECT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <spot_msgs/FrameTreeSnapshot.h>
#include <spot_msgs/AprilTagProperties.h>
#include <spot_msgs/ImageProperties.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace spot_msgs
{
template <class ContainerAllocator>
struct WorldObject_
{
  typedef WorldObject_<ContainerAllocator> Type;

  WorldObject_()
    : id(0)
    , name()
    , acquisition_time()
    , frame_tree_snapshot()
    , apriltag_properties()
    , image_properties()
    , dock_id(0)
    , dock_type(0)
    , frame_name_dock()
    , dock_unavailable(false)
    , from_prior_detection(false)
    , ray_frame()
    , ray_origin()
    , ray_direction()
    , bounding_box_frame()
    , bounding_box_size_ewrt_frame()  {
    }
  WorldObject_(const ContainerAllocator& _alloc)
    : id(0)
    , name(_alloc)
    , acquisition_time()
    , frame_tree_snapshot(_alloc)
    , apriltag_properties(_alloc)
    , image_properties(_alloc)
    , dock_id(0)
    , dock_type(0)
    , frame_name_dock(_alloc)
    , dock_unavailable(false)
    , from_prior_detection(false)
    , ray_frame(_alloc)
    , ray_origin(_alloc)
    , ray_direction(_alloc)
    , bounding_box_frame(_alloc)
    , bounding_box_size_ewrt_frame(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef ros::Time _acquisition_time_type;
  _acquisition_time_type acquisition_time;

   typedef  ::spot_msgs::FrameTreeSnapshot_<ContainerAllocator>  _frame_tree_snapshot_type;
  _frame_tree_snapshot_type frame_tree_snapshot;

   typedef  ::spot_msgs::AprilTagProperties_<ContainerAllocator>  _apriltag_properties_type;
  _apriltag_properties_type apriltag_properties;

   typedef  ::spot_msgs::ImageProperties_<ContainerAllocator>  _image_properties_type;
  _image_properties_type image_properties;

   typedef int32_t _dock_id_type;
  _dock_id_type dock_id;

   typedef uint8_t _dock_type_type;
  _dock_type_type dock_type;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _frame_name_dock_type;
  _frame_name_dock_type frame_name_dock;

   typedef uint8_t _dock_unavailable_type;
  _dock_unavailable_type dock_unavailable;

   typedef uint8_t _from_prior_detection_type;
  _from_prior_detection_type from_prior_detection;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _ray_frame_type;
  _ray_frame_type ray_frame;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _ray_origin_type;
  _ray_origin_type ray_origin;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _ray_direction_type;
  _ray_direction_type ray_direction;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _bounding_box_frame_type;
  _bounding_box_frame_type bounding_box_frame;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _bounding_box_size_ewrt_frame_type;
  _bounding_box_size_ewrt_frame_type bounding_box_size_ewrt_frame;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DOCK_TYPE_UNKNOWN)
  #undef DOCK_TYPE_UNKNOWN
#endif
#if defined(_WIN32) && defined(DOCK_TYPE_CONTACT_PROTOTYPE)
  #undef DOCK_TYPE_CONTACT_PROTOTYPE
#endif
#if defined(_WIN32) && defined(DOCK_TYPE_SPOT_DOCK)
  #undef DOCK_TYPE_SPOT_DOCK
#endif

  enum {
    DOCK_TYPE_UNKNOWN = 0u,
    DOCK_TYPE_CONTACT_PROTOTYPE = 2u,
    DOCK_TYPE_SPOT_DOCK = 3u,
  };


  typedef boost::shared_ptr< ::spot_msgs::WorldObject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_msgs::WorldObject_<ContainerAllocator> const> ConstPtr;

}; // struct WorldObject_

typedef ::spot_msgs::WorldObject_<std::allocator<void> > WorldObject;

typedef boost::shared_ptr< ::spot_msgs::WorldObject > WorldObjectPtr;
typedef boost::shared_ptr< ::spot_msgs::WorldObject const> WorldObjectConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_msgs::WorldObject_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_msgs::WorldObject_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_msgs::WorldObject_<ContainerAllocator1> & lhs, const ::spot_msgs::WorldObject_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.name == rhs.name &&
    lhs.acquisition_time == rhs.acquisition_time &&
    lhs.frame_tree_snapshot == rhs.frame_tree_snapshot &&
    lhs.apriltag_properties == rhs.apriltag_properties &&
    lhs.image_properties == rhs.image_properties &&
    lhs.dock_id == rhs.dock_id &&
    lhs.dock_type == rhs.dock_type &&
    lhs.frame_name_dock == rhs.frame_name_dock &&
    lhs.dock_unavailable == rhs.dock_unavailable &&
    lhs.from_prior_detection == rhs.from_prior_detection &&
    lhs.ray_frame == rhs.ray_frame &&
    lhs.ray_origin == rhs.ray_origin &&
    lhs.ray_direction == rhs.ray_direction &&
    lhs.bounding_box_frame == rhs.bounding_box_frame &&
    lhs.bounding_box_size_ewrt_frame == rhs.bounding_box_size_ewrt_frame;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_msgs::WorldObject_<ContainerAllocator1> & lhs, const ::spot_msgs::WorldObject_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::WorldObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::WorldObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::WorldObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::WorldObject_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::WorldObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::WorldObject_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_msgs::WorldObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6886a66dad17ad58030255815149c776";
  }

  static const char* value(const ::spot_msgs::WorldObject_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6886a66dad17ad58ULL;
  static const uint64_t static_value2 = 0x030255815149c776ULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_msgs::WorldObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_msgs/WorldObject";
  }

  static const char* value(const ::spot_msgs::WorldObject_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_msgs::WorldObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n"
"string name\n"
"time acquisition_time\n"
"\n"
"### Frame tree\n"
"FrameTreeSnapshot frame_tree_snapshot\n"
"\n"
"### AprilTag properties\n"
"AprilTagProperties apriltag_properties\n"
"\n"
"### Image properties\n"
"ImageProperties image_properties\n"
"\n"
"### Dock properties\n"
"# Dock type enum\n"
"uint8 DOCK_TYPE_UNKNOWN=0\n"
"uint8 DOCK_TYPE_CONTACT_PROTOTYPE=2\n"
"uint8 DOCK_TYPE_SPOT_DOCK=3\n"
"\n"
"int32 dock_id\n"
"uint8 dock_type\n"
"\n"
"string frame_name_dock\n"
"bool dock_unavailable\n"
"bool from_prior_detection\n"
"\n"
"### Ray properties\n"
"string ray_frame\n"
"geometry_msgs/Vector3 ray_origin\n"
"geometry_msgs/Vector3 ray_direction\n"
"\n"
"### Bounding box properties\n"
"string bounding_box_frame\n"
"geometry_msgs/Vector3 bounding_box_size_ewrt_frame\n"
"\n"
"================================================================================\n"
"MSG: spot_msgs/FrameTreeSnapshot\n"
"string[] child_edges\n"
"ParentEdge[] parent_edges\n"
"================================================================================\n"
"MSG: spot_msgs/ParentEdge\n"
"string parent_frame_name\n"
"geometry_msgs/Pose parent_tform_child\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: spot_msgs/AprilTagProperties\n"
"# Status\n"
"uint8 STATUS_UNKNOWN = 0\n"
"uint8 STATUS_OK = 1\n"
"uint8 STATUS_AMBIGUOUS = 2\n"
"uint8 STATUS_HIGH_ERROR = 3\n"
"\n"
"int32 tag_id\n"
"float64 x\n"
"float64 y\n"
"\n"
"string frame_name_fiducial\n"
"uint8 fiducial_pose_status\n"
"\n"
"string frame_name_fiducial_filtered\n"
"uint8 fiducial_filtered_pose_status\n"
"\n"
"string frame_name_camera\n"
"\n"
"geometry_msgs/PoseWithCovariance detection_covariance\n"
"string detection_covariance_reference_frame\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: spot_msgs/ImageProperties\n"
"string camera_source\n"
"\n"
"# Polygon coordinates\n"
"geometry_msgs/Polygon image_data_coordinates\n"
"\n"
"# Keypoint coordinates\n"
"uint8 KEYPOINT_UNKNOWN=0\n"
"uint8 KEYPOINT_SIMPLE=1\n"
"uint8 KEYPOINT_ORB=2\n"
"\n"
"uint8 image_data_keypoint_type\n"
"int32[] keypoint_coordinate_x\n"
"int32[] keypoint_coordinate_y\n"
"string[] binary_descriptor\n"
"float64[] keypoint_score\n"
"float64[] keypoint_size\n"
"float64[] keypoint_angle\n"
"\n"
"ImageSource image_source\n"
"ImageCapture image_capture\n"
"\n"
"string frame_name_image_coordinates\n"
"================================================================================\n"
"MSG: geometry_msgs/Polygon\n"
"#A specification of a polygon where the first and last points are assumed to be connected\n"
"Point32[] points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"================================================================================\n"
"MSG: spot_msgs/ImageSource\n"
"# Image type enums\n"
"uint8 IMAGE_TYPE_UNKNOWN = 0\n"
"uint8 IMAGE_TYPE_VISUAL = 1\n"
"uint8 IMAGE_TYPE_DEPTH = 2\n"
"\n"
"# Pixel format enums\n"
"uint8 PIXEL_FORMAT_UNKNOWN = 0\n"
"uint8 PIXEL_FORMAT_GREYSCALE_U8 = 1\n"
"uint8 PIXEL_FORMAT_RGB_U8 = 3\n"
"uint8 PIXEL_FORMAT_RGBA_U8 = 4\n"
"uint8 PIXEL_FORMAT_DEPTH_U16 = 5\n"
"uint8 PIXEL_FORMAT_GREYSCALE_U16 = 6\n"
"\n"
"# Image format enums\n"
"uint8 FORMAT_UNKNOWN = 0\n"
"uint8 FORMAT_JPEG = 1\n"
"uint8 FORMAT_RAW = 2\n"
"uint8 FORMAT_RLE = 3\n"
"\n"
"string name\n"
"int32 cols\n"
"int32 rows\n"
"float64 depth_scale\n"
"\n"
"# Camera pinhole model parameters\n"
"float64 focal_length_x\n"
"float64 focal_length_y\n"
"float64 principal_point_x\n"
"float64 principal_point_y\n"
"float64 skew_x\n"
"float64 skew_y\n"
"\n"
"uint8 image_type\n"
"uint8[] pixel_formats\n"
"uint8[] image_formats\n"
"\n"
"================================================================================\n"
"MSG: spot_msgs/ImageCapture\n"
"time acquisition_time\n"
"\n"
"FrameTreeSnapshot transforms_snapshot\n"
"string frame_name_image_sensor\n"
"\n"
"sensor_msgs/Image image\n"
"\n"
"duration capture_exposure_duration\n"
"float64 capture_sensor_gain\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/Image\n"
"# This message contains an uncompressed image\n"
"# (0, 0) is at top-left corner of image\n"
"#\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"                     # If the frame_id here and the frame_id of the CameraInfo\n"
"                     # message associated with the image conflict\n"
"                     # the behavior is undefined\n"
"\n"
"uint32 height         # image height, that is, number of rows\n"
"uint32 width          # image width, that is, number of columns\n"
"\n"
"# The legal values for encoding are in file src/image_encodings.cpp\n"
"# If you want to standardize a new string format, join\n"
"# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n"
"\n"
"string encoding       # Encoding of pixels -- channel meaning, ordering, size\n"
"                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n"
"\n"
"uint8 is_bigendian    # is this data bigendian?\n"
"uint32 step           # Full row length in bytes\n"
"uint8[] data          # actual matrix data, size is (step * rows)\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::spot_msgs::WorldObject_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_msgs::WorldObject_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.name);
      stream.next(m.acquisition_time);
      stream.next(m.frame_tree_snapshot);
      stream.next(m.apriltag_properties);
      stream.next(m.image_properties);
      stream.next(m.dock_id);
      stream.next(m.dock_type);
      stream.next(m.frame_name_dock);
      stream.next(m.dock_unavailable);
      stream.next(m.from_prior_detection);
      stream.next(m.ray_frame);
      stream.next(m.ray_origin);
      stream.next(m.ray_direction);
      stream.next(m.bounding_box_frame);
      stream.next(m.bounding_box_size_ewrt_frame);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WorldObject_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_msgs::WorldObject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_msgs::WorldObject_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "acquisition_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.acquisition_time);
    s << indent << "frame_tree_snapshot: ";
    s << std::endl;
    Printer< ::spot_msgs::FrameTreeSnapshot_<ContainerAllocator> >::stream(s, indent + "  ", v.frame_tree_snapshot);
    s << indent << "apriltag_properties: ";
    s << std::endl;
    Printer< ::spot_msgs::AprilTagProperties_<ContainerAllocator> >::stream(s, indent + "  ", v.apriltag_properties);
    s << indent << "image_properties: ";
    s << std::endl;
    Printer< ::spot_msgs::ImageProperties_<ContainerAllocator> >::stream(s, indent + "  ", v.image_properties);
    s << indent << "dock_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dock_id);
    s << indent << "dock_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dock_type);
    s << indent << "frame_name_dock: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.frame_name_dock);
    s << indent << "dock_unavailable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dock_unavailable);
    s << indent << "from_prior_detection: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.from_prior_detection);
    s << indent << "ray_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.ray_frame);
    s << indent << "ray_origin: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.ray_origin);
    s << indent << "ray_direction: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.ray_direction);
    s << indent << "bounding_box_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.bounding_box_frame);
    s << indent << "bounding_box_size_ewrt_frame: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.bounding_box_size_ewrt_frame);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_MSGS_MESSAGE_WORLDOBJECT_H
