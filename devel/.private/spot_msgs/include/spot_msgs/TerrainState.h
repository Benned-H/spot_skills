// Generated by gencpp from file spot_msgs/TerrainState.msg
// DO NOT EDIT!


#ifndef SPOT_MSGS_MESSAGE_TERRAINSTATE_H
#define SPOT_MSGS_MESSAGE_TERRAINSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace spot_msgs
{
template <class ContainerAllocator>
struct TerrainState_
{
  typedef TerrainState_<ContainerAllocator> Type;

  TerrainState_()
    : ground_mu_est(0.0)
    , frame_name()
    , foot_slip_distance_rt_frame()
    , foot_slip_velocity_rt_frame()
    , ground_contact_normal_rt_frame()
    , visual_surface_ground_penetration_mean(0.0)
    , visual_surface_ground_penetration_std(0.0)  {
    }
  TerrainState_(const ContainerAllocator& _alloc)
    : ground_mu_est(0.0)
    , frame_name(_alloc)
    , foot_slip_distance_rt_frame(_alloc)
    , foot_slip_velocity_rt_frame(_alloc)
    , ground_contact_normal_rt_frame(_alloc)
    , visual_surface_ground_penetration_mean(0.0)
    , visual_surface_ground_penetration_std(0.0)  {
  (void)_alloc;
    }



   typedef float _ground_mu_est_type;
  _ground_mu_est_type ground_mu_est;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _frame_name_type;
  _frame_name_type frame_name;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _foot_slip_distance_rt_frame_type;
  _foot_slip_distance_rt_frame_type foot_slip_distance_rt_frame;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _foot_slip_velocity_rt_frame_type;
  _foot_slip_velocity_rt_frame_type foot_slip_velocity_rt_frame;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _ground_contact_normal_rt_frame_type;
  _ground_contact_normal_rt_frame_type ground_contact_normal_rt_frame;

   typedef float _visual_surface_ground_penetration_mean_type;
  _visual_surface_ground_penetration_mean_type visual_surface_ground_penetration_mean;

   typedef float _visual_surface_ground_penetration_std_type;
  _visual_surface_ground_penetration_std_type visual_surface_ground_penetration_std;





  typedef boost::shared_ptr< ::spot_msgs::TerrainState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_msgs::TerrainState_<ContainerAllocator> const> ConstPtr;

}; // struct TerrainState_

typedef ::spot_msgs::TerrainState_<std::allocator<void> > TerrainState;

typedef boost::shared_ptr< ::spot_msgs::TerrainState > TerrainStatePtr;
typedef boost::shared_ptr< ::spot_msgs::TerrainState const> TerrainStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_msgs::TerrainState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_msgs::TerrainState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_msgs::TerrainState_<ContainerAllocator1> & lhs, const ::spot_msgs::TerrainState_<ContainerAllocator2> & rhs)
{
  return lhs.ground_mu_est == rhs.ground_mu_est &&
    lhs.frame_name == rhs.frame_name &&
    lhs.foot_slip_distance_rt_frame == rhs.foot_slip_distance_rt_frame &&
    lhs.foot_slip_velocity_rt_frame == rhs.foot_slip_velocity_rt_frame &&
    lhs.ground_contact_normal_rt_frame == rhs.ground_contact_normal_rt_frame &&
    lhs.visual_surface_ground_penetration_mean == rhs.visual_surface_ground_penetration_mean &&
    lhs.visual_surface_ground_penetration_std == rhs.visual_surface_ground_penetration_std;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_msgs::TerrainState_<ContainerAllocator1> & lhs, const ::spot_msgs::TerrainState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::TerrainState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::TerrainState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::TerrainState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::TerrainState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::TerrainState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::TerrainState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_msgs::TerrainState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8ace1ec594dcaee88134d9f49cb542d9";
  }

  static const char* value(const ::spot_msgs::TerrainState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8ace1ec594dcaee8ULL;
  static const uint64_t static_value2 = 0x8134d9f49cb542d9ULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_msgs::TerrainState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_msgs/TerrainState";
  }

  static const char* value(const ::spot_msgs::TerrainState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_msgs::TerrainState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# See https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference.html?highlight=foot_state#footstate-terrainstate\n"
"\n"
"float32 ground_mu_est\n"
"string frame_name\n"
"geometry_msgs/Vector3 foot_slip_distance_rt_frame\n"
"geometry_msgs/Vector3 foot_slip_velocity_rt_frame\n"
"geometry_msgs/Vector3 ground_contact_normal_rt_frame\n"
"float32 visual_surface_ground_penetration_mean\n"
"float32 visual_surface_ground_penetration_std\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::spot_msgs::TerrainState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_msgs::TerrainState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ground_mu_est);
      stream.next(m.frame_name);
      stream.next(m.foot_slip_distance_rt_frame);
      stream.next(m.foot_slip_velocity_rt_frame);
      stream.next(m.ground_contact_normal_rt_frame);
      stream.next(m.visual_surface_ground_penetration_mean);
      stream.next(m.visual_surface_ground_penetration_std);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TerrainState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_msgs::TerrainState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_msgs::TerrainState_<ContainerAllocator>& v)
  {
    s << indent << "ground_mu_est: ";
    Printer<float>::stream(s, indent + "  ", v.ground_mu_est);
    s << indent << "frame_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.frame_name);
    s << indent << "foot_slip_distance_rt_frame: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.foot_slip_distance_rt_frame);
    s << indent << "foot_slip_velocity_rt_frame: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.foot_slip_velocity_rt_frame);
    s << indent << "ground_contact_normal_rt_frame: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.ground_contact_normal_rt_frame);
    s << indent << "visual_surface_ground_penetration_mean: ";
    Printer<float>::stream(s, indent + "  ", v.visual_surface_ground_penetration_mean);
    s << indent << "visual_surface_ground_penetration_std: ";
    Printer<float>::stream(s, indent + "  ", v.visual_surface_ground_penetration_std);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_MSGS_MESSAGE_TERRAINSTATE_H
