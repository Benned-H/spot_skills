// Generated by gencpp from file spot_msgs/DockState.msg
// DO NOT EDIT!


#ifndef SPOT_MSGS_MESSAGE_DOCKSTATE_H
#define SPOT_MSGS_MESSAGE_DOCKSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace spot_msgs
{
template <class ContainerAllocator>
struct DockState_
{
  typedef DockState_<ContainerAllocator> Type;

  DockState_()
    : status(0)
    , dock_type(0)
    , dock_id(0)
    , power_status(0)  {
    }
  DockState_(const ContainerAllocator& _alloc)
    : status(0)
    , dock_type(0)
    , dock_id(0)
    , power_status(0)  {
  (void)_alloc;
    }



   typedef uint8_t _status_type;
  _status_type status;

   typedef uint8_t _dock_type_type;
  _dock_type_type dock_type;

   typedef uint32_t _dock_id_type;
  _dock_id_type dock_id;

   typedef uint8_t _power_status_type;
  _power_status_type power_status;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DOCK_STATUS_UNKNOWN)
  #undef DOCK_STATUS_UNKNOWN
#endif
#if defined(_WIN32) && defined(DOCK_STATUS_DOCKED)
  #undef DOCK_STATUS_DOCKED
#endif
#if defined(_WIN32) && defined(DOCK_STATUS_DOCKING)
  #undef DOCK_STATUS_DOCKING
#endif
#if defined(_WIN32) && defined(DOCK_STATUS_UNDOCKED)
  #undef DOCK_STATUS_UNDOCKED
#endif
#if defined(_WIN32) && defined(DOCK_STATUS_UNDOCKING)
  #undef DOCK_STATUS_UNDOCKING
#endif
#if defined(_WIN32) && defined(DOCK_TYPE_UNKNOWN)
  #undef DOCK_TYPE_UNKNOWN
#endif
#if defined(_WIN32) && defined(DOCK_TYPE_CONTACT_PROTOTYPE)
  #undef DOCK_TYPE_CONTACT_PROTOTYPE
#endif
#if defined(_WIN32) && defined(DOCK_TYPE_SPOT_DOCK)
  #undef DOCK_TYPE_SPOT_DOCK
#endif
#if defined(_WIN32) && defined(LINK_STATUS_UNKNOWN)
  #undef LINK_STATUS_UNKNOWN
#endif
#if defined(_WIN32) && defined(LINK_STATUS_CONNECTED)
  #undef LINK_STATUS_CONNECTED
#endif
#if defined(_WIN32) && defined(LINK_STATUS_ERROR)
  #undef LINK_STATUS_ERROR
#endif
#if defined(_WIN32) && defined(LINK_STATUS_DETECTING)
  #undef LINK_STATUS_DETECTING
#endif

  enum {
    DOCK_STATUS_UNKNOWN = 0u,
    DOCK_STATUS_DOCKED = 1u,
    DOCK_STATUS_DOCKING = 2u,
    DOCK_STATUS_UNDOCKED = 3u,
    DOCK_STATUS_UNDOCKING = 4u,
    DOCK_TYPE_UNKNOWN = 0u,
    DOCK_TYPE_CONTACT_PROTOTYPE = 2u,
    DOCK_TYPE_SPOT_DOCK = 3u,
    LINK_STATUS_UNKNOWN = 0u,
    LINK_STATUS_CONNECTED = 1u,
    LINK_STATUS_ERROR = 2u,
    LINK_STATUS_DETECTING = 3u,
  };


  typedef boost::shared_ptr< ::spot_msgs::DockState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_msgs::DockState_<ContainerAllocator> const> ConstPtr;

}; // struct DockState_

typedef ::spot_msgs::DockState_<std::allocator<void> > DockState;

typedef boost::shared_ptr< ::spot_msgs::DockState > DockStatePtr;
typedef boost::shared_ptr< ::spot_msgs::DockState const> DockStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_msgs::DockState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_msgs::DockState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_msgs::DockState_<ContainerAllocator1> & lhs, const ::spot_msgs::DockState_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.dock_type == rhs.dock_type &&
    lhs.dock_id == rhs.dock_id &&
    lhs.power_status == rhs.power_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_msgs::DockState_<ContainerAllocator1> & lhs, const ::spot_msgs::DockState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::DockState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::DockState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::DockState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::DockState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::DockState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::DockState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_msgs::DockState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a5cf6a3afaa5e6b3ccda4170a976059d";
  }

  static const char* value(const ::spot_msgs::DockState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa5cf6a3afaa5e6b3ULL;
  static const uint64_t static_value2 = 0xccda4170a976059dULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_msgs::DockState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_msgs/DockState";
  }

  static const char* value(const ::spot_msgs::DockState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_msgs::DockState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Status\n"
"uint8 DOCK_STATUS_UNKNOWN = 0\n"
"uint8 DOCK_STATUS_DOCKED = 1\n"
"uint8 DOCK_STATUS_DOCKING = 2\n"
"uint8 DOCK_STATUS_UNDOCKED = 3\n"
"uint8 DOCK_STATUS_UNDOCKING = 4\n"
"\n"
"# DockType\n"
"uint8 DOCK_TYPE_UNKNOWN = 0\n"
"uint8 DOCK_TYPE_CONTACT_PROTOTYPE = 2\n"
"uint8 DOCK_TYPE_SPOT_DOCK = 3\n"
"\n"
"# LinkStatus\n"
"uint8 LINK_STATUS_UNKNOWN = 0\n"
"uint8 LINK_STATUS_CONNECTED = 1\n"
"uint8 LINK_STATUS_ERROR = 2\n"
"uint8 LINK_STATUS_DETECTING = 3\n"
"\n"
"uint8 status\n"
"uint8 dock_type\n"
"uint32 dock_id\n"
"uint8 power_status\n"
;
  }

  static const char* value(const ::spot_msgs::DockState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_msgs::DockState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.dock_type);
      stream.next(m.dock_id);
      stream.next(m.power_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DockState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_msgs::DockState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_msgs::DockState_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "dock_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dock_type);
    s << indent << "dock_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.dock_id);
    s << indent << "power_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.power_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_MSGS_MESSAGE_DOCKSTATE_H
