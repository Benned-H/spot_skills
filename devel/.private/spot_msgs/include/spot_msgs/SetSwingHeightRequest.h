// Generated by gencpp from file spot_msgs/SetSwingHeightRequest.msg
// DO NOT EDIT!


#ifndef SPOT_MSGS_MESSAGE_SETSWINGHEIGHTREQUEST_H
#define SPOT_MSGS_MESSAGE_SETSWINGHEIGHTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace spot_msgs
{
template <class ContainerAllocator>
struct SetSwingHeightRequest_
{
  typedef SetSwingHeightRequest_<ContainerAllocator> Type;

  SetSwingHeightRequest_()
    : swing_height(0)  {
    }
  SetSwingHeightRequest_(const ContainerAllocator& _alloc)
    : swing_height(0)  {
  (void)_alloc;
    }



   typedef uint8_t _swing_height_type;
  _swing_height_type swing_height;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SWING_HEIGHT_UNKNOWN)
  #undef SWING_HEIGHT_UNKNOWN
#endif
#if defined(_WIN32) && defined(SWING_HEIGHT_LOW)
  #undef SWING_HEIGHT_LOW
#endif
#if defined(_WIN32) && defined(SWING_HEIGHT_MEDIUM)
  #undef SWING_HEIGHT_MEDIUM
#endif
#if defined(_WIN32) && defined(SWING_HEIGHT_HIGH)
  #undef SWING_HEIGHT_HIGH
#endif

  enum {
    SWING_HEIGHT_UNKNOWN = 0u,
    SWING_HEIGHT_LOW = 1u,
    SWING_HEIGHT_MEDIUM = 2u,
    SWING_HEIGHT_HIGH = 3u,
  };


  typedef boost::shared_ptr< ::spot_msgs::SetSwingHeightRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_msgs::SetSwingHeightRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetSwingHeightRequest_

typedef ::spot_msgs::SetSwingHeightRequest_<std::allocator<void> > SetSwingHeightRequest;

typedef boost::shared_ptr< ::spot_msgs::SetSwingHeightRequest > SetSwingHeightRequestPtr;
typedef boost::shared_ptr< ::spot_msgs::SetSwingHeightRequest const> SetSwingHeightRequestConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_msgs::SetSwingHeightRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_msgs::SetSwingHeightRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_msgs::SetSwingHeightRequest_<ContainerAllocator1> & lhs, const ::spot_msgs::SetSwingHeightRequest_<ContainerAllocator2> & rhs)
{
  return lhs.swing_height == rhs.swing_height;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_msgs::SetSwingHeightRequest_<ContainerAllocator1> & lhs, const ::spot_msgs::SetSwingHeightRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::SetSwingHeightRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::SetSwingHeightRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::SetSwingHeightRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::SetSwingHeightRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::SetSwingHeightRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::SetSwingHeightRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_msgs::SetSwingHeightRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c9888bf054dacbd6d927d090d75df80e";
  }

  static const char* value(const ::spot_msgs::SetSwingHeightRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc9888bf054dacbd6ULL;
  static const uint64_t static_value2 = 0xd927d090d75df80eULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_msgs::SetSwingHeightRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_msgs/SetSwingHeightRequest";
  }

  static const char* value(const ::spot_msgs::SetSwingHeightRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_msgs::SetSwingHeightRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#see https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference.html?highlight=power_state#swingheight\n"
"uint8 SWING_HEIGHT_UNKNOWN=0\n"
"uint8 SWING_HEIGHT_LOW=1\n"
"uint8 SWING_HEIGHT_MEDIUM=2\n"
"uint8 SWING_HEIGHT_HIGH=3\n"
"\n"
"uint8 swing_height\n"
;
  }

  static const char* value(const ::spot_msgs::SetSwingHeightRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_msgs::SetSwingHeightRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.swing_height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetSwingHeightRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_msgs::SetSwingHeightRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_msgs::SetSwingHeightRequest_<ContainerAllocator>& v)
  {
    s << indent << "swing_height: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.swing_height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_MSGS_MESSAGE_SETSWINGHEIGHTREQUEST_H
