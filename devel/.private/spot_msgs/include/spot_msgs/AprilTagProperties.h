// Generated by gencpp from file spot_msgs/AprilTagProperties.msg
// DO NOT EDIT!


#ifndef SPOT_MSGS_MESSAGE_APRILTAGPROPERTIES_H
#define SPOT_MSGS_MESSAGE_APRILTAGPROPERTIES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseWithCovariance.h>

namespace spot_msgs
{
template <class ContainerAllocator>
struct AprilTagProperties_
{
  typedef AprilTagProperties_<ContainerAllocator> Type;

  AprilTagProperties_()
    : tag_id(0)
    , x(0.0)
    , y(0.0)
    , frame_name_fiducial()
    , fiducial_pose_status(0)
    , frame_name_fiducial_filtered()
    , fiducial_filtered_pose_status(0)
    , frame_name_camera()
    , detection_covariance()
    , detection_covariance_reference_frame()  {
    }
  AprilTagProperties_(const ContainerAllocator& _alloc)
    : tag_id(0)
    , x(0.0)
    , y(0.0)
    , frame_name_fiducial(_alloc)
    , fiducial_pose_status(0)
    , frame_name_fiducial_filtered(_alloc)
    , fiducial_filtered_pose_status(0)
    , frame_name_camera(_alloc)
    , detection_covariance(_alloc)
    , detection_covariance_reference_frame(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _tag_id_type;
  _tag_id_type tag_id;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _frame_name_fiducial_type;
  _frame_name_fiducial_type frame_name_fiducial;

   typedef uint8_t _fiducial_pose_status_type;
  _fiducial_pose_status_type fiducial_pose_status;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _frame_name_fiducial_filtered_type;
  _frame_name_fiducial_filtered_type frame_name_fiducial_filtered;

   typedef uint8_t _fiducial_filtered_pose_status_type;
  _fiducial_filtered_pose_status_type fiducial_filtered_pose_status;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _frame_name_camera_type;
  _frame_name_camera_type frame_name_camera;

   typedef  ::geometry_msgs::PoseWithCovariance_<ContainerAllocator>  _detection_covariance_type;
  _detection_covariance_type detection_covariance;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _detection_covariance_reference_frame_type;
  _detection_covariance_reference_frame_type detection_covariance_reference_frame;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(STATUS_UNKNOWN)
  #undef STATUS_UNKNOWN
#endif
#if defined(_WIN32) && defined(STATUS_OK)
  #undef STATUS_OK
#endif
#if defined(_WIN32) && defined(STATUS_AMBIGUOUS)
  #undef STATUS_AMBIGUOUS
#endif
#if defined(_WIN32) && defined(STATUS_HIGH_ERROR)
  #undef STATUS_HIGH_ERROR
#endif

  enum {
    STATUS_UNKNOWN = 0u,
    STATUS_OK = 1u,
    STATUS_AMBIGUOUS = 2u,
    STATUS_HIGH_ERROR = 3u,
  };


  typedef boost::shared_ptr< ::spot_msgs::AprilTagProperties_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_msgs::AprilTagProperties_<ContainerAllocator> const> ConstPtr;

}; // struct AprilTagProperties_

typedef ::spot_msgs::AprilTagProperties_<std::allocator<void> > AprilTagProperties;

typedef boost::shared_ptr< ::spot_msgs::AprilTagProperties > AprilTagPropertiesPtr;
typedef boost::shared_ptr< ::spot_msgs::AprilTagProperties const> AprilTagPropertiesConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_msgs::AprilTagProperties_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_msgs::AprilTagProperties_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_msgs::AprilTagProperties_<ContainerAllocator1> & lhs, const ::spot_msgs::AprilTagProperties_<ContainerAllocator2> & rhs)
{
  return lhs.tag_id == rhs.tag_id &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.frame_name_fiducial == rhs.frame_name_fiducial &&
    lhs.fiducial_pose_status == rhs.fiducial_pose_status &&
    lhs.frame_name_fiducial_filtered == rhs.frame_name_fiducial_filtered &&
    lhs.fiducial_filtered_pose_status == rhs.fiducial_filtered_pose_status &&
    lhs.frame_name_camera == rhs.frame_name_camera &&
    lhs.detection_covariance == rhs.detection_covariance &&
    lhs.detection_covariance_reference_frame == rhs.detection_covariance_reference_frame;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_msgs::AprilTagProperties_<ContainerAllocator1> & lhs, const ::spot_msgs::AprilTagProperties_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::AprilTagProperties_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::AprilTagProperties_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::AprilTagProperties_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::AprilTagProperties_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::AprilTagProperties_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::AprilTagProperties_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_msgs::AprilTagProperties_<ContainerAllocator> >
{
  static const char* value()
  {
    return "035439ca15acb004b11a25a16f3fd1de";
  }

  static const char* value(const ::spot_msgs::AprilTagProperties_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x035439ca15acb004ULL;
  static const uint64_t static_value2 = 0xb11a25a16f3fd1deULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_msgs::AprilTagProperties_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_msgs/AprilTagProperties";
  }

  static const char* value(const ::spot_msgs::AprilTagProperties_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_msgs::AprilTagProperties_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Status\n"
"uint8 STATUS_UNKNOWN = 0\n"
"uint8 STATUS_OK = 1\n"
"uint8 STATUS_AMBIGUOUS = 2\n"
"uint8 STATUS_HIGH_ERROR = 3\n"
"\n"
"int32 tag_id\n"
"float64 x\n"
"float64 y\n"
"\n"
"string frame_name_fiducial\n"
"uint8 fiducial_pose_status\n"
"\n"
"string frame_name_fiducial_filtered\n"
"uint8 fiducial_filtered_pose_status\n"
"\n"
"string frame_name_camera\n"
"\n"
"geometry_msgs/PoseWithCovariance detection_covariance\n"
"string detection_covariance_reference_frame\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::spot_msgs::AprilTagProperties_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_msgs::AprilTagProperties_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tag_id);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.frame_name_fiducial);
      stream.next(m.fiducial_pose_status);
      stream.next(m.frame_name_fiducial_filtered);
      stream.next(m.fiducial_filtered_pose_status);
      stream.next(m.frame_name_camera);
      stream.next(m.detection_covariance);
      stream.next(m.detection_covariance_reference_frame);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AprilTagProperties_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_msgs::AprilTagProperties_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_msgs::AprilTagProperties_<ContainerAllocator>& v)
  {
    s << indent << "tag_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tag_id);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "frame_name_fiducial: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.frame_name_fiducial);
    s << indent << "fiducial_pose_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fiducial_pose_status);
    s << indent << "frame_name_fiducial_filtered: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.frame_name_fiducial_filtered);
    s << indent << "fiducial_filtered_pose_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fiducial_filtered_pose_status);
    s << indent << "frame_name_camera: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.frame_name_camera);
    s << indent << "detection_covariance: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseWithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.detection_covariance);
    s << indent << "detection_covariance_reference_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.detection_covariance_reference_frame);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_MSGS_MESSAGE_APRILTAGPROPERTIES_H
