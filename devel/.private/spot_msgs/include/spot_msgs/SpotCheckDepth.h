// Generated by gencpp from file spot_msgs/SpotCheckDepth.msg
// DO NOT EDIT!


#ifndef SPOT_MSGS_MESSAGE_SPOTCHECKDEPTH_H
#define SPOT_MSGS_MESSAGE_SPOTCHECKDEPTH_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace spot_msgs
{
template <class ContainerAllocator>
struct SpotCheckDepth_
{
  typedef SpotCheckDepth_<ContainerAllocator> Type;

  SpotCheckDepth_()
    : status(0)
    , severity_score(0.0)  {
    }
  SpotCheckDepth_(const ContainerAllocator& _alloc)
    : status(0)
    , severity_score(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _status_type;
  _status_type status;

   typedef float _severity_score_type;
  _severity_score_type severity_score;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(STATUS_UNKNOWN)
  #undef STATUS_UNKNOWN
#endif
#if defined(_WIN32) && defined(STATUS_OK)
  #undef STATUS_OK
#endif
#if defined(_WIN32) && defined(STATUS_WARNING)
  #undef STATUS_WARNING
#endif
#if defined(_WIN32) && defined(STATUS_ERROR)
  #undef STATUS_ERROR
#endif

  enum {
    STATUS_UNKNOWN = 0u,
    STATUS_OK = 1u,
    STATUS_WARNING = 2u,
    STATUS_ERROR = 3u,
  };


  typedef boost::shared_ptr< ::spot_msgs::SpotCheckDepth_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_msgs::SpotCheckDepth_<ContainerAllocator> const> ConstPtr;

}; // struct SpotCheckDepth_

typedef ::spot_msgs::SpotCheckDepth_<std::allocator<void> > SpotCheckDepth;

typedef boost::shared_ptr< ::spot_msgs::SpotCheckDepth > SpotCheckDepthPtr;
typedef boost::shared_ptr< ::spot_msgs::SpotCheckDepth const> SpotCheckDepthConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_msgs::SpotCheckDepth_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_msgs::SpotCheckDepth_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_msgs::SpotCheckDepth_<ContainerAllocator1> & lhs, const ::spot_msgs::SpotCheckDepth_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.severity_score == rhs.severity_score;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_msgs::SpotCheckDepth_<ContainerAllocator1> & lhs, const ::spot_msgs::SpotCheckDepth_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::SpotCheckDepth_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::SpotCheckDepth_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::SpotCheckDepth_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::SpotCheckDepth_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::SpotCheckDepth_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::SpotCheckDepth_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_msgs::SpotCheckDepth_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1df6ba22c62edcdd0f95e8c8502952ed";
  }

  static const char* value(const ::spot_msgs::SpotCheckDepth_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1df6ba22c62edcddULL;
  static const uint64_t static_value2 = 0x0f95e8c8502952edULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_msgs::SpotCheckDepth_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_msgs/SpotCheckDepth";
  }

  static const char* value(const ::spot_msgs::SpotCheckDepth_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_msgs::SpotCheckDepth_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 STATUS_UNKNOWN = 0     # Unused enum.\n"
"uint8 STATUS_OK = 1          # No detected calibration error.\n"
"uint8 STATUS_WARNING = 2     # Possible calibration error detected.\n"
"uint8 STATUS_ERROR = 3       # Error with robot calibration.\n"
"\n"
"uint8 status\n"
"float32 severity_score\n"
;
  }

  static const char* value(const ::spot_msgs::SpotCheckDepth_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_msgs::SpotCheckDepth_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.severity_score);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpotCheckDepth_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_msgs::SpotCheckDepth_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_msgs::SpotCheckDepth_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "severity_score: ";
    Printer<float>::stream(s, indent + "  ", v.severity_score);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_MSGS_MESSAGE_SPOTCHECKDEPTH_H
