// Generated by gencpp from file spot_msgs/DownloadGraphRequest.msg
// DO NOT EDIT!


#ifndef SPOT_MSGS_MESSAGE_DOWNLOADGRAPHREQUEST_H
#define SPOT_MSGS_MESSAGE_DOWNLOADGRAPHREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace spot_msgs
{
template <class ContainerAllocator>
struct DownloadGraphRequest_
{
  typedef DownloadGraphRequest_<ContainerAllocator> Type;

  DownloadGraphRequest_()
    : download_filepath()  {
    }
  DownloadGraphRequest_(const ContainerAllocator& _alloc)
    : download_filepath(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _download_filepath_type;
  _download_filepath_type download_filepath;





  typedef boost::shared_ptr< ::spot_msgs::DownloadGraphRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_msgs::DownloadGraphRequest_<ContainerAllocator> const> ConstPtr;

}; // struct DownloadGraphRequest_

typedef ::spot_msgs::DownloadGraphRequest_<std::allocator<void> > DownloadGraphRequest;

typedef boost::shared_ptr< ::spot_msgs::DownloadGraphRequest > DownloadGraphRequestPtr;
typedef boost::shared_ptr< ::spot_msgs::DownloadGraphRequest const> DownloadGraphRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_msgs::DownloadGraphRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_msgs::DownloadGraphRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_msgs::DownloadGraphRequest_<ContainerAllocator1> & lhs, const ::spot_msgs::DownloadGraphRequest_<ContainerAllocator2> & rhs)
{
  return lhs.download_filepath == rhs.download_filepath;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_msgs::DownloadGraphRequest_<ContainerAllocator1> & lhs, const ::spot_msgs::DownloadGraphRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::DownloadGraphRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::DownloadGraphRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::DownloadGraphRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::DownloadGraphRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::DownloadGraphRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::DownloadGraphRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_msgs::DownloadGraphRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f171b9220180198cc327ec65dad2dce8";
  }

  static const char* value(const ::spot_msgs::DownloadGraphRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf171b9220180198cULL;
  static const uint64_t static_value2 = 0xc327ec65dad2dce8ULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_msgs::DownloadGraphRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_msgs/DownloadGraphRequest";
  }

  static const char* value(const ::spot_msgs::DownloadGraphRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_msgs::DownloadGraphRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string download_filepath\n"
;
  }

  static const char* value(const ::spot_msgs::DownloadGraphRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_msgs::DownloadGraphRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.download_filepath);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DownloadGraphRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_msgs::DownloadGraphRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_msgs::DownloadGraphRequest_<ContainerAllocator>& v)
  {
    s << indent << "download_filepath: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.download_filepath);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_MSGS_MESSAGE_DOWNLOADGRAPHREQUEST_H
