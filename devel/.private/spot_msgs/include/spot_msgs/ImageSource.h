// Generated by gencpp from file spot_msgs/ImageSource.msg
// DO NOT EDIT!


#ifndef SPOT_MSGS_MESSAGE_IMAGESOURCE_H
#define SPOT_MSGS_MESSAGE_IMAGESOURCE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace spot_msgs
{
template <class ContainerAllocator>
struct ImageSource_
{
  typedef ImageSource_<ContainerAllocator> Type;

  ImageSource_()
    : name()
    , cols(0)
    , rows(0)
    , depth_scale(0.0)
    , focal_length_x(0.0)
    , focal_length_y(0.0)
    , principal_point_x(0.0)
    , principal_point_y(0.0)
    , skew_x(0.0)
    , skew_y(0.0)
    , image_type(0)
    , pixel_formats()
    , image_formats()  {
    }
  ImageSource_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , cols(0)
    , rows(0)
    , depth_scale(0.0)
    , focal_length_x(0.0)
    , focal_length_y(0.0)
    , principal_point_x(0.0)
    , principal_point_y(0.0)
    , skew_x(0.0)
    , skew_y(0.0)
    , image_type(0)
    , pixel_formats(_alloc)
    , image_formats(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef int32_t _cols_type;
  _cols_type cols;

   typedef int32_t _rows_type;
  _rows_type rows;

   typedef double _depth_scale_type;
  _depth_scale_type depth_scale;

   typedef double _focal_length_x_type;
  _focal_length_x_type focal_length_x;

   typedef double _focal_length_y_type;
  _focal_length_y_type focal_length_y;

   typedef double _principal_point_x_type;
  _principal_point_x_type principal_point_x;

   typedef double _principal_point_y_type;
  _principal_point_y_type principal_point_y;

   typedef double _skew_x_type;
  _skew_x_type skew_x;

   typedef double _skew_y_type;
  _skew_y_type skew_y;

   typedef uint8_t _image_type_type;
  _image_type_type image_type;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _pixel_formats_type;
  _pixel_formats_type pixel_formats;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _image_formats_type;
  _image_formats_type image_formats;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(IMAGE_TYPE_UNKNOWN)
  #undef IMAGE_TYPE_UNKNOWN
#endif
#if defined(_WIN32) && defined(IMAGE_TYPE_VISUAL)
  #undef IMAGE_TYPE_VISUAL
#endif
#if defined(_WIN32) && defined(IMAGE_TYPE_DEPTH)
  #undef IMAGE_TYPE_DEPTH
#endif
#if defined(_WIN32) && defined(PIXEL_FORMAT_UNKNOWN)
  #undef PIXEL_FORMAT_UNKNOWN
#endif
#if defined(_WIN32) && defined(PIXEL_FORMAT_GREYSCALE_U8)
  #undef PIXEL_FORMAT_GREYSCALE_U8
#endif
#if defined(_WIN32) && defined(PIXEL_FORMAT_RGB_U8)
  #undef PIXEL_FORMAT_RGB_U8
#endif
#if defined(_WIN32) && defined(PIXEL_FORMAT_RGBA_U8)
  #undef PIXEL_FORMAT_RGBA_U8
#endif
#if defined(_WIN32) && defined(PIXEL_FORMAT_DEPTH_U16)
  #undef PIXEL_FORMAT_DEPTH_U16
#endif
#if defined(_WIN32) && defined(PIXEL_FORMAT_GREYSCALE_U16)
  #undef PIXEL_FORMAT_GREYSCALE_U16
#endif
#if defined(_WIN32) && defined(FORMAT_UNKNOWN)
  #undef FORMAT_UNKNOWN
#endif
#if defined(_WIN32) && defined(FORMAT_JPEG)
  #undef FORMAT_JPEG
#endif
#if defined(_WIN32) && defined(FORMAT_RAW)
  #undef FORMAT_RAW
#endif
#if defined(_WIN32) && defined(FORMAT_RLE)
  #undef FORMAT_RLE
#endif

  enum {
    IMAGE_TYPE_UNKNOWN = 0u,
    IMAGE_TYPE_VISUAL = 1u,
    IMAGE_TYPE_DEPTH = 2u,
    PIXEL_FORMAT_UNKNOWN = 0u,
    PIXEL_FORMAT_GREYSCALE_U8 = 1u,
    PIXEL_FORMAT_RGB_U8 = 3u,
    PIXEL_FORMAT_RGBA_U8 = 4u,
    PIXEL_FORMAT_DEPTH_U16 = 5u,
    PIXEL_FORMAT_GREYSCALE_U16 = 6u,
    FORMAT_UNKNOWN = 0u,
    FORMAT_JPEG = 1u,
    FORMAT_RAW = 2u,
    FORMAT_RLE = 3u,
  };


  typedef boost::shared_ptr< ::spot_msgs::ImageSource_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_msgs::ImageSource_<ContainerAllocator> const> ConstPtr;

}; // struct ImageSource_

typedef ::spot_msgs::ImageSource_<std::allocator<void> > ImageSource;

typedef boost::shared_ptr< ::spot_msgs::ImageSource > ImageSourcePtr;
typedef boost::shared_ptr< ::spot_msgs::ImageSource const> ImageSourceConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_msgs::ImageSource_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_msgs::ImageSource_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_msgs::ImageSource_<ContainerAllocator1> & lhs, const ::spot_msgs::ImageSource_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.cols == rhs.cols &&
    lhs.rows == rhs.rows &&
    lhs.depth_scale == rhs.depth_scale &&
    lhs.focal_length_x == rhs.focal_length_x &&
    lhs.focal_length_y == rhs.focal_length_y &&
    lhs.principal_point_x == rhs.principal_point_x &&
    lhs.principal_point_y == rhs.principal_point_y &&
    lhs.skew_x == rhs.skew_x &&
    lhs.skew_y == rhs.skew_y &&
    lhs.image_type == rhs.image_type &&
    lhs.pixel_formats == rhs.pixel_formats &&
    lhs.image_formats == rhs.image_formats;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_msgs::ImageSource_<ContainerAllocator1> & lhs, const ::spot_msgs::ImageSource_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::ImageSource_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::ImageSource_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::ImageSource_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::ImageSource_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::ImageSource_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::ImageSource_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_msgs::ImageSource_<ContainerAllocator> >
{
  static const char* value()
  {
    return "24779006d77c58e3fd81f011ebfc2932";
  }

  static const char* value(const ::spot_msgs::ImageSource_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x24779006d77c58e3ULL;
  static const uint64_t static_value2 = 0xfd81f011ebfc2932ULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_msgs::ImageSource_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_msgs/ImageSource";
  }

  static const char* value(const ::spot_msgs::ImageSource_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_msgs::ImageSource_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Image type enums\n"
"uint8 IMAGE_TYPE_UNKNOWN = 0\n"
"uint8 IMAGE_TYPE_VISUAL = 1\n"
"uint8 IMAGE_TYPE_DEPTH = 2\n"
"\n"
"# Pixel format enums\n"
"uint8 PIXEL_FORMAT_UNKNOWN = 0\n"
"uint8 PIXEL_FORMAT_GREYSCALE_U8 = 1\n"
"uint8 PIXEL_FORMAT_RGB_U8 = 3\n"
"uint8 PIXEL_FORMAT_RGBA_U8 = 4\n"
"uint8 PIXEL_FORMAT_DEPTH_U16 = 5\n"
"uint8 PIXEL_FORMAT_GREYSCALE_U16 = 6\n"
"\n"
"# Image format enums\n"
"uint8 FORMAT_UNKNOWN = 0\n"
"uint8 FORMAT_JPEG = 1\n"
"uint8 FORMAT_RAW = 2\n"
"uint8 FORMAT_RLE = 3\n"
"\n"
"string name\n"
"int32 cols\n"
"int32 rows\n"
"float64 depth_scale\n"
"\n"
"# Camera pinhole model parameters\n"
"float64 focal_length_x\n"
"float64 focal_length_y\n"
"float64 principal_point_x\n"
"float64 principal_point_y\n"
"float64 skew_x\n"
"float64 skew_y\n"
"\n"
"uint8 image_type\n"
"uint8[] pixel_formats\n"
"uint8[] image_formats\n"
;
  }

  static const char* value(const ::spot_msgs::ImageSource_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_msgs::ImageSource_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.cols);
      stream.next(m.rows);
      stream.next(m.depth_scale);
      stream.next(m.focal_length_x);
      stream.next(m.focal_length_y);
      stream.next(m.principal_point_x);
      stream.next(m.principal_point_y);
      stream.next(m.skew_x);
      stream.next(m.skew_y);
      stream.next(m.image_type);
      stream.next(m.pixel_formats);
      stream.next(m.image_formats);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ImageSource_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_msgs::ImageSource_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_msgs::ImageSource_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "cols: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cols);
    s << indent << "rows: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rows);
    s << indent << "depth_scale: ";
    Printer<double>::stream(s, indent + "  ", v.depth_scale);
    s << indent << "focal_length_x: ";
    Printer<double>::stream(s, indent + "  ", v.focal_length_x);
    s << indent << "focal_length_y: ";
    Printer<double>::stream(s, indent + "  ", v.focal_length_y);
    s << indent << "principal_point_x: ";
    Printer<double>::stream(s, indent + "  ", v.principal_point_x);
    s << indent << "principal_point_y: ";
    Printer<double>::stream(s, indent + "  ", v.principal_point_y);
    s << indent << "skew_x: ";
    Printer<double>::stream(s, indent + "  ", v.skew_x);
    s << indent << "skew_y: ";
    Printer<double>::stream(s, indent + "  ", v.skew_y);
    s << indent << "image_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.image_type);
    s << indent << "pixel_formats[]" << std::endl;
    for (size_t i = 0; i < v.pixel_formats.size(); ++i)
    {
      s << indent << "  pixel_formats[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.pixel_formats[i]);
    }
    s << indent << "image_formats[]" << std::endl;
    for (size_t i = 0; i < v.image_formats.size(); ++i)
    {
      s << indent << "  image_formats[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.image_formats[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_MSGS_MESSAGE_IMAGESOURCE_H
