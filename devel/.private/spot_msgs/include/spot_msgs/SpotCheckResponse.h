// Generated by gencpp from file spot_msgs/SpotCheckResponse.msg
// DO NOT EDIT!


#ifndef SPOT_MSGS_MESSAGE_SPOTCHECKRESPONSE_H
#define SPOT_MSGS_MESSAGE_SPOTCHECKRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <spot_msgs/SpotCheckDepth.h>
#include <spot_msgs/SpotCheckLoadCell.h>
#include <spot_msgs/SpotCheckKinematic.h>
#include <spot_msgs/SpotCheckPayload.h>
#include <spot_msgs/SpotCheckHipROM.h>

namespace spot_msgs
{
template <class ContainerAllocator>
struct SpotCheckResponse_
{
  typedef SpotCheckResponse_<ContainerAllocator> Type;

  SpotCheckResponse_()
    : success(false)
    , message()
    , camera_names()
    , camera_results()
    , load_cell_names()
    , load_cell_results()
    , kinematic_joint_names()
    , kinematic_cal_results()
    , payload_result()
    , leg_names()
    , hip_range_of_motion_results()
    , progress(0.0)
    , last_cal_timestamp()  {
    }
  SpotCheckResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , message(_alloc)
    , camera_names(_alloc)
    , camera_results(_alloc)
    , load_cell_names(_alloc)
    , load_cell_results(_alloc)
    , kinematic_joint_names(_alloc)
    , kinematic_cal_results(_alloc)
    , payload_result(_alloc)
    , leg_names(_alloc)
    , hip_range_of_motion_results(_alloc)
    , progress(0.0)
    , last_cal_timestamp()  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type;
  _message_type message;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _camera_names_type;
  _camera_names_type camera_names;

   typedef std::vector< ::spot_msgs::SpotCheckDepth_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::spot_msgs::SpotCheckDepth_<ContainerAllocator> >> _camera_results_type;
  _camera_results_type camera_results;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _load_cell_names_type;
  _load_cell_names_type load_cell_names;

   typedef std::vector< ::spot_msgs::SpotCheckLoadCell_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::spot_msgs::SpotCheckLoadCell_<ContainerAllocator> >> _load_cell_results_type;
  _load_cell_results_type load_cell_results;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _kinematic_joint_names_type;
  _kinematic_joint_names_type kinematic_joint_names;

   typedef std::vector< ::spot_msgs::SpotCheckKinematic_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::spot_msgs::SpotCheckKinematic_<ContainerAllocator> >> _kinematic_cal_results_type;
  _kinematic_cal_results_type kinematic_cal_results;

   typedef  ::spot_msgs::SpotCheckPayload_<ContainerAllocator>  _payload_result_type;
  _payload_result_type payload_result;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _leg_names_type;
  _leg_names_type leg_names;

   typedef std::vector< ::spot_msgs::SpotCheckHipROM_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::spot_msgs::SpotCheckHipROM_<ContainerAllocator> >> _hip_range_of_motion_results_type;
  _hip_range_of_motion_results_type hip_range_of_motion_results;

   typedef float _progress_type;
  _progress_type progress;

   typedef ros::Time _last_cal_timestamp_type;
  _last_cal_timestamp_type last_cal_timestamp;





  typedef boost::shared_ptr< ::spot_msgs::SpotCheckResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_msgs::SpotCheckResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SpotCheckResponse_

typedef ::spot_msgs::SpotCheckResponse_<std::allocator<void> > SpotCheckResponse;

typedef boost::shared_ptr< ::spot_msgs::SpotCheckResponse > SpotCheckResponsePtr;
typedef boost::shared_ptr< ::spot_msgs::SpotCheckResponse const> SpotCheckResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_msgs::SpotCheckResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_msgs::SpotCheckResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_msgs::SpotCheckResponse_<ContainerAllocator1> & lhs, const ::spot_msgs::SpotCheckResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.message == rhs.message &&
    lhs.camera_names == rhs.camera_names &&
    lhs.camera_results == rhs.camera_results &&
    lhs.load_cell_names == rhs.load_cell_names &&
    lhs.load_cell_results == rhs.load_cell_results &&
    lhs.kinematic_joint_names == rhs.kinematic_joint_names &&
    lhs.kinematic_cal_results == rhs.kinematic_cal_results &&
    lhs.payload_result == rhs.payload_result &&
    lhs.leg_names == rhs.leg_names &&
    lhs.hip_range_of_motion_results == rhs.hip_range_of_motion_results &&
    lhs.progress == rhs.progress &&
    lhs.last_cal_timestamp == rhs.last_cal_timestamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_msgs::SpotCheckResponse_<ContainerAllocator1> & lhs, const ::spot_msgs::SpotCheckResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::SpotCheckResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::SpotCheckResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::SpotCheckResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::SpotCheckResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::SpotCheckResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::SpotCheckResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_msgs::SpotCheckResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "57928f98c641c9bdcc0ec470d1b08af8";
  }

  static const char* value(const ::spot_msgs::SpotCheckResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x57928f98c641c9bdULL;
  static const uint64_t static_value2 = 0xcc0ec470d1b08af8ULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_msgs::SpotCheckResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_msgs/SpotCheckResponse";
  }

  static const char* value(const ::spot_msgs::SpotCheckResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_msgs::SpotCheckResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success\n"
"string message\n"
"\n"
"string[] camera_names\n"
"spot_msgs/SpotCheckDepth[] camera_results\n"
"\n"
"string[] load_cell_names\n"
"spot_msgs/SpotCheckLoadCell[] load_cell_results\n"
"\n"
"string[] kinematic_joint_names\n"
"spot_msgs/SpotCheckKinematic[] kinematic_cal_results\n"
"\n"
"spot_msgs/SpotCheckPayload payload_result\n"
"\n"
"string[] leg_names\n"
"spot_msgs/SpotCheckHipROM[] hip_range_of_motion_results\n"
"\n"
"float32 progress\n"
"\n"
"time last_cal_timestamp\n"
"\n"
"================================================================================\n"
"MSG: spot_msgs/SpotCheckDepth\n"
"uint8 STATUS_UNKNOWN = 0     # Unused enum.\n"
"uint8 STATUS_OK = 1          # No detected calibration error.\n"
"uint8 STATUS_WARNING = 2     # Possible calibration error detected.\n"
"uint8 STATUS_ERROR = 3       # Error with robot calibration.\n"
"\n"
"uint8 status\n"
"float32 severity_score\n"
"================================================================================\n"
"MSG: spot_msgs/SpotCheckLoadCell\n"
"uint8 ERROR_UNKNOWN = 0              # Unused enum.\n"
"uint8 ERROR_NONE = 1                 # No hardware error detected.\n"
"uint8 ERROR_ZERO_OUT_OF_RANGE = 2    # Load cell calibration failure.\n"
"\n"
"# The loadcell error code\n"
"uint8 error\n"
"# The current loadcell zero as fraction of full range [0-1]\n"
"float32 zero\n"
"# The previous loadcell zero as fraction of full range [0-1]\n"
"float32 old_zero\n"
"================================================================================\n"
"MSG: spot_msgs/SpotCheckKinematic\n"
"# Errors reflect an issue with robot hardware.\n"
"uint8 ERROR_UNKNOWN = 0       # Unused enum.\n"
"uint8 ERROR_NONE = 1          # No hardware error detected.\n"
"uint8 ERROR_CLUTCH_SLIP = 2   # Error detected in clutch performance.\n"
"uint8 ERROR_INVALID_RANGE_OF_MOTION = 3  # Error if a joint has an incorrect range of motion.\n"
"\n"
"# A flag to indicate if results has an error.\n"
"uint8 error\n"
"\n"
"# The current offset [rad]\n"
"float32 offset\n"
"# The previous offset [rad]\n"
"float32 old_offset\n"
"\n"
"# Joint calibration health score. range [0-1]\n"
"# 0 indicates an unhealthy kinematic joint calibration\n"
"# 1 indicates a perfect kinematic joint calibration\n"
"# Typically, values greater than 0.8 should be expected.\n"
"float32 health_score\n"
"================================================================================\n"
"MSG: spot_msgs/SpotCheckPayload\n"
"# Errors reflect an issue with payload configuration.\n"
"\n"
"# Unused enum.\n"
"uint8 ERROR_UNKNOWN = 0\n"
"# No error found in the payloads.\n"
"uint8 ERROR_NONE = 1\n"
"# There is a mass discrepancy between the registered payload and what is estimated.\n"
"uint8 ERROR_MASS_DISCREPANCY = 2\n"
"\n"
"# A flag to indicate if configuration has an error.\n"
"uint8 error\n"
"\n"
"# Indicates how much extra payload (in kg) we think the robot has\n"
"# Positive indicates robot has more payload than it is configured.\n"
"# Negative indicates robot has less payload than it is configured.\n"
"float32 extra_payload\n"
"================================================================================\n"
"MSG: spot_msgs/SpotCheckHipROM\n"
"# Errors reflect an issue with hip range of motion\n"
"uint8 ERROR_UNKNOWN = 0\n"
"uint8 ERROR_NONE = 1\n"
"uint8 ERROR_OBSTRUCTED = 2\n"
"\n"
"uint8 error\n"
"\n"
"# The measured angles (radians) of the HX and HY joints where the obstruction was detected\n"
"float32[] hx\n"
"float32[] hy\n"
;
  }

  static const char* value(const ::spot_msgs::SpotCheckResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_msgs::SpotCheckResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.message);
      stream.next(m.camera_names);
      stream.next(m.camera_results);
      stream.next(m.load_cell_names);
      stream.next(m.load_cell_results);
      stream.next(m.kinematic_joint_names);
      stream.next(m.kinematic_cal_results);
      stream.next(m.payload_result);
      stream.next(m.leg_names);
      stream.next(m.hip_range_of_motion_results);
      stream.next(m.progress);
      stream.next(m.last_cal_timestamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpotCheckResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_msgs::SpotCheckResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_msgs::SpotCheckResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message);
    s << indent << "camera_names[]" << std::endl;
    for (size_t i = 0; i < v.camera_names.size(); ++i)
    {
      s << indent << "  camera_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.camera_names[i]);
    }
    s << indent << "camera_results[]" << std::endl;
    for (size_t i = 0; i < v.camera_results.size(); ++i)
    {
      s << indent << "  camera_results[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::spot_msgs::SpotCheckDepth_<ContainerAllocator> >::stream(s, indent + "    ", v.camera_results[i]);
    }
    s << indent << "load_cell_names[]" << std::endl;
    for (size_t i = 0; i < v.load_cell_names.size(); ++i)
    {
      s << indent << "  load_cell_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.load_cell_names[i]);
    }
    s << indent << "load_cell_results[]" << std::endl;
    for (size_t i = 0; i < v.load_cell_results.size(); ++i)
    {
      s << indent << "  load_cell_results[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::spot_msgs::SpotCheckLoadCell_<ContainerAllocator> >::stream(s, indent + "    ", v.load_cell_results[i]);
    }
    s << indent << "kinematic_joint_names[]" << std::endl;
    for (size_t i = 0; i < v.kinematic_joint_names.size(); ++i)
    {
      s << indent << "  kinematic_joint_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.kinematic_joint_names[i]);
    }
    s << indent << "kinematic_cal_results[]" << std::endl;
    for (size_t i = 0; i < v.kinematic_cal_results.size(); ++i)
    {
      s << indent << "  kinematic_cal_results[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::spot_msgs::SpotCheckKinematic_<ContainerAllocator> >::stream(s, indent + "    ", v.kinematic_cal_results[i]);
    }
    s << indent << "payload_result: ";
    s << std::endl;
    Printer< ::spot_msgs::SpotCheckPayload_<ContainerAllocator> >::stream(s, indent + "  ", v.payload_result);
    s << indent << "leg_names[]" << std::endl;
    for (size_t i = 0; i < v.leg_names.size(); ++i)
    {
      s << indent << "  leg_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.leg_names[i]);
    }
    s << indent << "hip_range_of_motion_results[]" << std::endl;
    for (size_t i = 0; i < v.hip_range_of_motion_results.size(); ++i)
    {
      s << indent << "  hip_range_of_motion_results[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::spot_msgs::SpotCheckHipROM_<ContainerAllocator> >::stream(s, indent + "    ", v.hip_range_of_motion_results[i]);
    }
    s << indent << "progress: ";
    Printer<float>::stream(s, indent + "  ", v.progress);
    s << indent << "last_cal_timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.last_cal_timestamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_MSGS_MESSAGE_SPOTCHECKRESPONSE_H
