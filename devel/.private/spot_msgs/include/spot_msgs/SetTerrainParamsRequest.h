// Generated by gencpp from file spot_msgs/SetTerrainParamsRequest.msg
// DO NOT EDIT!


#ifndef SPOT_MSGS_MESSAGE_SETTERRAINPARAMSREQUEST_H
#define SPOT_MSGS_MESSAGE_SETTERRAINPARAMSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <spot_msgs/TerrainParams.h>

namespace spot_msgs
{
template <class ContainerAllocator>
struct SetTerrainParamsRequest_
{
  typedef SetTerrainParamsRequest_<ContainerAllocator> Type;

  SetTerrainParamsRequest_()
    : terrain_params()  {
    }
  SetTerrainParamsRequest_(const ContainerAllocator& _alloc)
    : terrain_params(_alloc)  {
  (void)_alloc;
    }



   typedef  ::spot_msgs::TerrainParams_<ContainerAllocator>  _terrain_params_type;
  _terrain_params_type terrain_params;





  typedef boost::shared_ptr< ::spot_msgs::SetTerrainParamsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_msgs::SetTerrainParamsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetTerrainParamsRequest_

typedef ::spot_msgs::SetTerrainParamsRequest_<std::allocator<void> > SetTerrainParamsRequest;

typedef boost::shared_ptr< ::spot_msgs::SetTerrainParamsRequest > SetTerrainParamsRequestPtr;
typedef boost::shared_ptr< ::spot_msgs::SetTerrainParamsRequest const> SetTerrainParamsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_msgs::SetTerrainParamsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_msgs::SetTerrainParamsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_msgs::SetTerrainParamsRequest_<ContainerAllocator1> & lhs, const ::spot_msgs::SetTerrainParamsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.terrain_params == rhs.terrain_params;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_msgs::SetTerrainParamsRequest_<ContainerAllocator1> & lhs, const ::spot_msgs::SetTerrainParamsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::SetTerrainParamsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::SetTerrainParamsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::SetTerrainParamsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::SetTerrainParamsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::SetTerrainParamsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::SetTerrainParamsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_msgs::SetTerrainParamsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4536ebedae12528eeea4125da8612197";
  }

  static const char* value(const ::spot_msgs::SetTerrainParamsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4536ebedae12528eULL;
  static const uint64_t static_value2 = 0xeea4125da8612197ULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_msgs::SetTerrainParamsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_msgs/SetTerrainParamsRequest";
  }

  static const char* value(const ::spot_msgs::SetTerrainParamsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_msgs::SetTerrainParamsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_msgs/TerrainParams terrain_params\n"
"\n"
"================================================================================\n"
"MSG: spot_msgs/TerrainParams\n"
"# see https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference.html?highlight=power_state#terrainparams\n"
"uint8 GRATED_SURFACES_MODE_UNKNOWN=0\n"
"uint8 GRATED_SURFACES_MODE_OFF=1\n"
"uint8 GRATED_SURFACES_MODE_ON=2\n"
"uint8 GRATED_SURFACES_MODE_AUTO=3\n"
"\n"
"float32 ground_mu_hint\n"
"uint8 grated_surfaces_mode\n"
;
  }

  static const char* value(const ::spot_msgs::SetTerrainParamsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_msgs::SetTerrainParamsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.terrain_params);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetTerrainParamsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_msgs::SetTerrainParamsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_msgs::SetTerrainParamsRequest_<ContainerAllocator>& v)
  {
    s << indent << "terrain_params: ";
    s << std::endl;
    Printer< ::spot_msgs::TerrainParams_<ContainerAllocator> >::stream(s, indent + "  ", v.terrain_params);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_MSGS_MESSAGE_SETTERRAINPARAMSREQUEST_H
