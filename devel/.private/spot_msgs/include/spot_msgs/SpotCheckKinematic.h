// Generated by gencpp from file spot_msgs/SpotCheckKinematic.msg
// DO NOT EDIT!


#ifndef SPOT_MSGS_MESSAGE_SPOTCHECKKINEMATIC_H
#define SPOT_MSGS_MESSAGE_SPOTCHECKKINEMATIC_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace spot_msgs
{
template <class ContainerAllocator>
struct SpotCheckKinematic_
{
  typedef SpotCheckKinematic_<ContainerAllocator> Type;

  SpotCheckKinematic_()
    : error(0)
    , offset(0.0)
    , old_offset(0.0)
    , health_score(0.0)  {
    }
  SpotCheckKinematic_(const ContainerAllocator& _alloc)
    : error(0)
    , offset(0.0)
    , old_offset(0.0)
    , health_score(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _error_type;
  _error_type error;

   typedef float _offset_type;
  _offset_type offset;

   typedef float _old_offset_type;
  _old_offset_type old_offset;

   typedef float _health_score_type;
  _health_score_type health_score;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ERROR_UNKNOWN)
  #undef ERROR_UNKNOWN
#endif
#if defined(_WIN32) && defined(ERROR_NONE)
  #undef ERROR_NONE
#endif
#if defined(_WIN32) && defined(ERROR_CLUTCH_SLIP)
  #undef ERROR_CLUTCH_SLIP
#endif
#if defined(_WIN32) && defined(ERROR_INVALID_RANGE_OF_MOTION)
  #undef ERROR_INVALID_RANGE_OF_MOTION
#endif

  enum {
    ERROR_UNKNOWN = 0u,
    ERROR_NONE = 1u,
    ERROR_CLUTCH_SLIP = 2u,
    ERROR_INVALID_RANGE_OF_MOTION = 3u,
  };


  typedef boost::shared_ptr< ::spot_msgs::SpotCheckKinematic_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_msgs::SpotCheckKinematic_<ContainerAllocator> const> ConstPtr;

}; // struct SpotCheckKinematic_

typedef ::spot_msgs::SpotCheckKinematic_<std::allocator<void> > SpotCheckKinematic;

typedef boost::shared_ptr< ::spot_msgs::SpotCheckKinematic > SpotCheckKinematicPtr;
typedef boost::shared_ptr< ::spot_msgs::SpotCheckKinematic const> SpotCheckKinematicConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_msgs::SpotCheckKinematic_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_msgs::SpotCheckKinematic_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_msgs::SpotCheckKinematic_<ContainerAllocator1> & lhs, const ::spot_msgs::SpotCheckKinematic_<ContainerAllocator2> & rhs)
{
  return lhs.error == rhs.error &&
    lhs.offset == rhs.offset &&
    lhs.old_offset == rhs.old_offset &&
    lhs.health_score == rhs.health_score;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_msgs::SpotCheckKinematic_<ContainerAllocator1> & lhs, const ::spot_msgs::SpotCheckKinematic_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::SpotCheckKinematic_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::SpotCheckKinematic_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::SpotCheckKinematic_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::SpotCheckKinematic_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::SpotCheckKinematic_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::SpotCheckKinematic_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_msgs::SpotCheckKinematic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fe33606761c255ffb331f260e7ee4d23";
  }

  static const char* value(const ::spot_msgs::SpotCheckKinematic_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfe33606761c255ffULL;
  static const uint64_t static_value2 = 0xb331f260e7ee4d23ULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_msgs::SpotCheckKinematic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_msgs/SpotCheckKinematic";
  }

  static const char* value(const ::spot_msgs::SpotCheckKinematic_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_msgs::SpotCheckKinematic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Errors reflect an issue with robot hardware.\n"
"uint8 ERROR_UNKNOWN = 0       # Unused enum.\n"
"uint8 ERROR_NONE = 1          # No hardware error detected.\n"
"uint8 ERROR_CLUTCH_SLIP = 2   # Error detected in clutch performance.\n"
"uint8 ERROR_INVALID_RANGE_OF_MOTION = 3  # Error if a joint has an incorrect range of motion.\n"
"\n"
"# A flag to indicate if results has an error.\n"
"uint8 error\n"
"\n"
"# The current offset [rad]\n"
"float32 offset\n"
"# The previous offset [rad]\n"
"float32 old_offset\n"
"\n"
"# Joint calibration health score. range [0-1]\n"
"# 0 indicates an unhealthy kinematic joint calibration\n"
"# 1 indicates a perfect kinematic joint calibration\n"
"# Typically, values greater than 0.8 should be expected.\n"
"float32 health_score\n"
;
  }

  static const char* value(const ::spot_msgs::SpotCheckKinematic_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_msgs::SpotCheckKinematic_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.error);
      stream.next(m.offset);
      stream.next(m.old_offset);
      stream.next(m.health_score);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpotCheckKinematic_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_msgs::SpotCheckKinematic_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_msgs::SpotCheckKinematic_<ContainerAllocator>& v)
  {
    s << indent << "error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error);
    s << indent << "offset: ";
    Printer<float>::stream(s, indent + "  ", v.offset);
    s << indent << "old_offset: ";
    Printer<float>::stream(s, indent + "  ", v.old_offset);
    s << indent << "health_score: ";
    Printer<float>::stream(s, indent + "  ", v.health_score);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_MSGS_MESSAGE_SPOTCHECKKINEMATIC_H
