// Generated by gencpp from file spot_msgs/SpotCheckHipROM.msg
// DO NOT EDIT!


#ifndef SPOT_MSGS_MESSAGE_SPOTCHECKHIPROM_H
#define SPOT_MSGS_MESSAGE_SPOTCHECKHIPROM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace spot_msgs
{
template <class ContainerAllocator>
struct SpotCheckHipROM_
{
  typedef SpotCheckHipROM_<ContainerAllocator> Type;

  SpotCheckHipROM_()
    : error(0)
    , hx()
    , hy()  {
    }
  SpotCheckHipROM_(const ContainerAllocator& _alloc)
    : error(0)
    , hx(_alloc)
    , hy(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _error_type;
  _error_type error;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _hx_type;
  _hx_type hx;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _hy_type;
  _hy_type hy;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ERROR_UNKNOWN)
  #undef ERROR_UNKNOWN
#endif
#if defined(_WIN32) && defined(ERROR_NONE)
  #undef ERROR_NONE
#endif
#if defined(_WIN32) && defined(ERROR_OBSTRUCTED)
  #undef ERROR_OBSTRUCTED
#endif

  enum {
    ERROR_UNKNOWN = 0u,
    ERROR_NONE = 1u,
    ERROR_OBSTRUCTED = 2u,
  };


  typedef boost::shared_ptr< ::spot_msgs::SpotCheckHipROM_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_msgs::SpotCheckHipROM_<ContainerAllocator> const> ConstPtr;

}; // struct SpotCheckHipROM_

typedef ::spot_msgs::SpotCheckHipROM_<std::allocator<void> > SpotCheckHipROM;

typedef boost::shared_ptr< ::spot_msgs::SpotCheckHipROM > SpotCheckHipROMPtr;
typedef boost::shared_ptr< ::spot_msgs::SpotCheckHipROM const> SpotCheckHipROMConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_msgs::SpotCheckHipROM_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_msgs::SpotCheckHipROM_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_msgs::SpotCheckHipROM_<ContainerAllocator1> & lhs, const ::spot_msgs::SpotCheckHipROM_<ContainerAllocator2> & rhs)
{
  return lhs.error == rhs.error &&
    lhs.hx == rhs.hx &&
    lhs.hy == rhs.hy;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_msgs::SpotCheckHipROM_<ContainerAllocator1> & lhs, const ::spot_msgs::SpotCheckHipROM_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::SpotCheckHipROM_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::SpotCheckHipROM_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::SpotCheckHipROM_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::SpotCheckHipROM_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::SpotCheckHipROM_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::SpotCheckHipROM_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_msgs::SpotCheckHipROM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2bffa893cfa8c1ee57352f3ccf3348bc";
  }

  static const char* value(const ::spot_msgs::SpotCheckHipROM_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2bffa893cfa8c1eeULL;
  static const uint64_t static_value2 = 0x57352f3ccf3348bcULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_msgs::SpotCheckHipROM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_msgs/SpotCheckHipROM";
  }

  static const char* value(const ::spot_msgs::SpotCheckHipROM_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_msgs::SpotCheckHipROM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Errors reflect an issue with hip range of motion\n"
"uint8 ERROR_UNKNOWN = 0\n"
"uint8 ERROR_NONE = 1\n"
"uint8 ERROR_OBSTRUCTED = 2\n"
"\n"
"uint8 error\n"
"\n"
"# The measured angles (radians) of the HX and HY joints where the obstruction was detected\n"
"float32[] hx\n"
"float32[] hy\n"
;
  }

  static const char* value(const ::spot_msgs::SpotCheckHipROM_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_msgs::SpotCheckHipROM_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.error);
      stream.next(m.hx);
      stream.next(m.hy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpotCheckHipROM_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_msgs::SpotCheckHipROM_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_msgs::SpotCheckHipROM_<ContainerAllocator>& v)
  {
    s << indent << "error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error);
    s << indent << "hx[]" << std::endl;
    for (size_t i = 0; i < v.hx.size(); ++i)
    {
      s << indent << "  hx[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.hx[i]);
    }
    s << indent << "hy[]" << std::endl;
    for (size_t i = 0; i < v.hy.size(); ++i)
    {
      s << indent << "  hy[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.hy[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_MSGS_MESSAGE_SPOTCHECKHIPROM_H
