// Generated by gencpp from file spot_msgs/HandPoseRequest.msg
// DO NOT EDIT!


#ifndef SPOT_MSGS_MESSAGE_HANDPOSEREQUEST_H
#define SPOT_MSGS_MESSAGE_HANDPOSEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace spot_msgs
{
template <class ContainerAllocator>
struct HandPoseRequest_
{
  typedef HandPoseRequest_<ContainerAllocator> Type;

  HandPoseRequest_()
    : duration(0.0)
    , frame()
    , pose_point()  {
    }
  HandPoseRequest_(const ContainerAllocator& _alloc)
    : duration(0.0)
    , frame(_alloc)
    , pose_point(_alloc)  {
  (void)_alloc;
    }



   typedef double _duration_type;
  _duration_type duration;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _frame_type;
  _frame_type frame;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_point_type;
  _pose_point_type pose_point;





  typedef boost::shared_ptr< ::spot_msgs::HandPoseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_msgs::HandPoseRequest_<ContainerAllocator> const> ConstPtr;

}; // struct HandPoseRequest_

typedef ::spot_msgs::HandPoseRequest_<std::allocator<void> > HandPoseRequest;

typedef boost::shared_ptr< ::spot_msgs::HandPoseRequest > HandPoseRequestPtr;
typedef boost::shared_ptr< ::spot_msgs::HandPoseRequest const> HandPoseRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_msgs::HandPoseRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_msgs::HandPoseRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_msgs::HandPoseRequest_<ContainerAllocator1> & lhs, const ::spot_msgs::HandPoseRequest_<ContainerAllocator2> & rhs)
{
  return lhs.duration == rhs.duration &&
    lhs.frame == rhs.frame &&
    lhs.pose_point == rhs.pose_point;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_msgs::HandPoseRequest_<ContainerAllocator1> & lhs, const ::spot_msgs::HandPoseRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::HandPoseRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::HandPoseRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::HandPoseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::HandPoseRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::HandPoseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::HandPoseRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_msgs::HandPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "48bbd91f7fe5154f1fbf78960f22f9f3";
  }

  static const char* value(const ::spot_msgs::HandPoseRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x48bbd91f7fe5154fULL;
  static const uint64_t static_value2 = 0x1fbf78960f22f9f3ULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_msgs::HandPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_msgs/HandPoseRequest";
  }

  static const char* value(const ::spot_msgs::HandPoseRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_msgs::HandPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 duration\n"
"string frame\n"
"geometry_msgs/Pose pose_point\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::spot_msgs::HandPoseRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_msgs::HandPoseRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.duration);
      stream.next(m.frame);
      stream.next(m.pose_point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HandPoseRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_msgs::HandPoseRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_msgs::HandPoseRequest_<ContainerAllocator>& v)
  {
    s << indent << "duration: ";
    Printer<double>::stream(s, indent + "  ", v.duration);
    s << indent << "frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.frame);
    s << indent << "pose_point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose_point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_MSGS_MESSAGE_HANDPOSEREQUEST_H
