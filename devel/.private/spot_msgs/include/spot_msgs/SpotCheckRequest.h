// Generated by gencpp from file spot_msgs/SpotCheckRequest.msg
// DO NOT EDIT!


#ifndef SPOT_MSGS_MESSAGE_SPOTCHECKREQUEST_H
#define SPOT_MSGS_MESSAGE_SPOTCHECKREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace spot_msgs
{
template <class ContainerAllocator>
struct SpotCheckRequest_
{
  typedef SpotCheckRequest_<ContainerAllocator> Type;

  SpotCheckRequest_()
    : start(false)
    , blocking(false)
    , revert_calibration(false)
    , feedback_only(false)  {
    }
  SpotCheckRequest_(const ContainerAllocator& _alloc)
    : start(false)
    , blocking(false)
    , revert_calibration(false)
    , feedback_only(false)  {
  (void)_alloc;
    }



   typedef uint8_t _start_type;
  _start_type start;

   typedef uint8_t _blocking_type;
  _blocking_type blocking;

   typedef uint8_t _revert_calibration_type;
  _revert_calibration_type revert_calibration;

   typedef uint8_t _feedback_only_type;
  _feedback_only_type feedback_only;





  typedef boost::shared_ptr< ::spot_msgs::SpotCheckRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_msgs::SpotCheckRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SpotCheckRequest_

typedef ::spot_msgs::SpotCheckRequest_<std::allocator<void> > SpotCheckRequest;

typedef boost::shared_ptr< ::spot_msgs::SpotCheckRequest > SpotCheckRequestPtr;
typedef boost::shared_ptr< ::spot_msgs::SpotCheckRequest const> SpotCheckRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_msgs::SpotCheckRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_msgs::SpotCheckRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_msgs::SpotCheckRequest_<ContainerAllocator1> & lhs, const ::spot_msgs::SpotCheckRequest_<ContainerAllocator2> & rhs)
{
  return lhs.start == rhs.start &&
    lhs.blocking == rhs.blocking &&
    lhs.revert_calibration == rhs.revert_calibration &&
    lhs.feedback_only == rhs.feedback_only;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_msgs::SpotCheckRequest_<ContainerAllocator1> & lhs, const ::spot_msgs::SpotCheckRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::SpotCheckRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::SpotCheckRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::SpotCheckRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::SpotCheckRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::SpotCheckRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::SpotCheckRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_msgs::SpotCheckRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "21f28964d8a22171043b2be0b8230ec2";
  }

  static const char* value(const ::spot_msgs::SpotCheckRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x21f28964d8a22171ULL;
  static const uint64_t static_value2 = 0x043b2be0b8230ec2ULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_msgs::SpotCheckRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_msgs/SpotCheckRequest";
  }

  static const char* value(const ::spot_msgs::SpotCheckRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_msgs::SpotCheckRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# See https://dev.bostondynamics.com/python/bosdyn-client/src/bosdyn/client/spot_check\n"
"bool start\n"
"bool blocking\n"
"bool revert_calibration\n"
"bool feedback_only\n"
;
  }

  static const char* value(const ::spot_msgs::SpotCheckRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_msgs::SpotCheckRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start);
      stream.next(m.blocking);
      stream.next(m.revert_calibration);
      stream.next(m.feedback_only);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpotCheckRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_msgs::SpotCheckRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_msgs::SpotCheckRequest_<ContainerAllocator>& v)
  {
    s << indent << "start: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.start);
    s << indent << "blocking: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.blocking);
    s << indent << "revert_calibration: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.revert_calibration);
    s << indent << "feedback_only: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.feedback_only);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_MSGS_MESSAGE_SPOTCHECKREQUEST_H
