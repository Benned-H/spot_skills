// Generated by gencpp from file spot_msgs/ArmForceTrajectoryRequest.msg
// DO NOT EDIT!


#ifndef SPOT_MSGS_MESSAGE_ARMFORCETRAJECTORYREQUEST_H
#define SPOT_MSGS_MESSAGE_ARMFORCETRAJECTORYREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace spot_msgs
{
template <class ContainerAllocator>
struct ArmForceTrajectoryRequest_
{
  typedef ArmForceTrajectoryRequest_<ContainerAllocator> Type;

  ArmForceTrajectoryRequest_()
    : duration(0.0)
    , frame()
    , forces_pt0()
    , torques_pt0()
    , forces_pt1()
    , torques_pt1()  {
      forces_pt0.assign(0.0);

      torques_pt0.assign(0.0);

      forces_pt1.assign(0.0);

      torques_pt1.assign(0.0);
  }
  ArmForceTrajectoryRequest_(const ContainerAllocator& _alloc)
    : duration(0.0)
    , frame(_alloc)
    , forces_pt0()
    , torques_pt0()
    , forces_pt1()
    , torques_pt1()  {
  (void)_alloc;
      forces_pt0.assign(0.0);

      torques_pt0.assign(0.0);

      forces_pt1.assign(0.0);

      torques_pt1.assign(0.0);
  }



   typedef double _duration_type;
  _duration_type duration;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _frame_type;
  _frame_type frame;

   typedef boost::array<double, 3>  _forces_pt0_type;
  _forces_pt0_type forces_pt0;

   typedef boost::array<double, 3>  _torques_pt0_type;
  _torques_pt0_type torques_pt0;

   typedef boost::array<double, 3>  _forces_pt1_type;
  _forces_pt1_type forces_pt1;

   typedef boost::array<double, 3>  _torques_pt1_type;
  _torques_pt1_type torques_pt1;





  typedef boost::shared_ptr< ::spot_msgs::ArmForceTrajectoryRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_msgs::ArmForceTrajectoryRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ArmForceTrajectoryRequest_

typedef ::spot_msgs::ArmForceTrajectoryRequest_<std::allocator<void> > ArmForceTrajectoryRequest;

typedef boost::shared_ptr< ::spot_msgs::ArmForceTrajectoryRequest > ArmForceTrajectoryRequestPtr;
typedef boost::shared_ptr< ::spot_msgs::ArmForceTrajectoryRequest const> ArmForceTrajectoryRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_msgs::ArmForceTrajectoryRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_msgs::ArmForceTrajectoryRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_msgs::ArmForceTrajectoryRequest_<ContainerAllocator1> & lhs, const ::spot_msgs::ArmForceTrajectoryRequest_<ContainerAllocator2> & rhs)
{
  return lhs.duration == rhs.duration &&
    lhs.frame == rhs.frame &&
    lhs.forces_pt0 == rhs.forces_pt0 &&
    lhs.torques_pt0 == rhs.torques_pt0 &&
    lhs.forces_pt1 == rhs.forces_pt1 &&
    lhs.torques_pt1 == rhs.torques_pt1;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_msgs::ArmForceTrajectoryRequest_<ContainerAllocator1> & lhs, const ::spot_msgs::ArmForceTrajectoryRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::ArmForceTrajectoryRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::ArmForceTrajectoryRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::ArmForceTrajectoryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::ArmForceTrajectoryRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::ArmForceTrajectoryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::ArmForceTrajectoryRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_msgs::ArmForceTrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "df1770a07fa213279ddffa14a7667266";
  }

  static const char* value(const ::spot_msgs::ArmForceTrajectoryRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdf1770a07fa21327ULL;
  static const uint64_t static_value2 = 0x9ddffa14a7667266ULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_msgs::ArmForceTrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_msgs/ArmForceTrajectoryRequest";
  }

  static const char* value(const ::spot_msgs::ArmForceTrajectoryRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_msgs::ArmForceTrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 duration\n"
"string frame\n"
"float64[3] forces_pt0 # fx fy fz\n"
"float64[3] torques_pt0 # tx ty yz\n"
"float64[3] forces_pt1 # fx fy fz\n"
"float64[3] torques_pt1 # tx ty yz\n"
;
  }

  static const char* value(const ::spot_msgs::ArmForceTrajectoryRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_msgs::ArmForceTrajectoryRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.duration);
      stream.next(m.frame);
      stream.next(m.forces_pt0);
      stream.next(m.torques_pt0);
      stream.next(m.forces_pt1);
      stream.next(m.torques_pt1);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArmForceTrajectoryRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_msgs::ArmForceTrajectoryRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_msgs::ArmForceTrajectoryRequest_<ContainerAllocator>& v)
  {
    s << indent << "duration: ";
    Printer<double>::stream(s, indent + "  ", v.duration);
    s << indent << "frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.frame);
    s << indent << "forces_pt0[]" << std::endl;
    for (size_t i = 0; i < v.forces_pt0.size(); ++i)
    {
      s << indent << "  forces_pt0[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.forces_pt0[i]);
    }
    s << indent << "torques_pt0[]" << std::endl;
    for (size_t i = 0; i < v.torques_pt0.size(); ++i)
    {
      s << indent << "  torques_pt0[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.torques_pt0[i]);
    }
    s << indent << "forces_pt1[]" << std::endl;
    for (size_t i = 0; i < v.forces_pt1.size(); ++i)
    {
      s << indent << "  forces_pt1[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.forces_pt1[i]);
    }
    s << indent << "torques_pt1[]" << std::endl;
    for (size_t i = 0; i < v.torques_pt1.size(); ++i)
    {
      s << indent << "  torques_pt1[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.torques_pt1[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_MSGS_MESSAGE_ARMFORCETRAJECTORYREQUEST_H
