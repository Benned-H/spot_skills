// Generated by gencpp from file spot_msgs/PoseBodyGoal.msg
// DO NOT EDIT!


#ifndef SPOT_MSGS_MESSAGE_POSEBODYGOAL_H
#define SPOT_MSGS_MESSAGE_POSEBODYGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace spot_msgs
{
template <class ContainerAllocator>
struct PoseBodyGoal_
{
  typedef PoseBodyGoal_<ContainerAllocator> Type;

  PoseBodyGoal_()
    : body_pose()
    , roll(0)
    , pitch(0)
    , yaw(0)
    , body_height(0.0)  {
    }
  PoseBodyGoal_(const ContainerAllocator& _alloc)
    : body_pose(_alloc)
    , roll(0)
    , pitch(0)
    , yaw(0)
    , body_height(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _body_pose_type;
  _body_pose_type body_pose;

   typedef int8_t _roll_type;
  _roll_type roll;

   typedef int8_t _pitch_type;
  _pitch_type pitch;

   typedef int8_t _yaw_type;
  _yaw_type yaw;

   typedef float _body_height_type;
  _body_height_type body_height;





  typedef boost::shared_ptr< ::spot_msgs::PoseBodyGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_msgs::PoseBodyGoal_<ContainerAllocator> const> ConstPtr;

}; // struct PoseBodyGoal_

typedef ::spot_msgs::PoseBodyGoal_<std::allocator<void> > PoseBodyGoal;

typedef boost::shared_ptr< ::spot_msgs::PoseBodyGoal > PoseBodyGoalPtr;
typedef boost::shared_ptr< ::spot_msgs::PoseBodyGoal const> PoseBodyGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_msgs::PoseBodyGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_msgs::PoseBodyGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_msgs::PoseBodyGoal_<ContainerAllocator1> & lhs, const ::spot_msgs::PoseBodyGoal_<ContainerAllocator2> & rhs)
{
  return lhs.body_pose == rhs.body_pose &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw &&
    lhs.body_height == rhs.body_height;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_msgs::PoseBodyGoal_<ContainerAllocator1> & lhs, const ::spot_msgs::PoseBodyGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::PoseBodyGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::PoseBodyGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::PoseBodyGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::PoseBodyGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::PoseBodyGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::PoseBodyGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_msgs::PoseBodyGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2aaa468be31e97608ddb9e68aa66e756";
  }

  static const char* value(const ::spot_msgs::PoseBodyGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2aaa468be31e9760ULL;
  static const uint64_t static_value2 = 0x8ddb9e68aa66e756ULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_msgs::PoseBodyGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_msgs/PoseBodyGoal";
  }

  static const char* value(const ::spot_msgs::PoseBodyGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_msgs::PoseBodyGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# The pose the body should be moved to. Only the orientation and the z component (body height) of position is considered.\n"
"# If this is unset, the rpy/body height values will be used instead.\n"
"geometry_msgs/Pose body_pose\n"
"\n"
"# Alternative specification of the body pose with rpy (in degrees). These values are ignored if the body_pose is set\n"
"int8 roll\n"
"int8 pitch\n"
"int8 yaw\n"
"float32 body_height\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::spot_msgs::PoseBodyGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_msgs::PoseBodyGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.body_pose);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.body_height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PoseBodyGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_msgs::PoseBodyGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_msgs::PoseBodyGoal_<ContainerAllocator>& v)
  {
    s << indent << "body_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.body_pose);
    s << indent << "roll: ";
    Printer<int8_t>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<int8_t>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<int8_t>::stream(s, indent + "  ", v.yaw);
    s << indent << "body_height: ";
    Printer<float>::stream(s, indent + "  ", v.body_height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_MSGS_MESSAGE_POSEBODYGOAL_H
