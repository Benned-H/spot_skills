// Generated by gencpp from file spot_msgs/ImageCapture.msg
// DO NOT EDIT!


#ifndef SPOT_MSGS_MESSAGE_IMAGECAPTURE_H
#define SPOT_MSGS_MESSAGE_IMAGECAPTURE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <spot_msgs/FrameTreeSnapshot.h>
#include <sensor_msgs/Image.h>

namespace spot_msgs
{
template <class ContainerAllocator>
struct ImageCapture_
{
  typedef ImageCapture_<ContainerAllocator> Type;

  ImageCapture_()
    : acquisition_time()
    , transforms_snapshot()
    , frame_name_image_sensor()
    , image()
    , capture_exposure_duration()
    , capture_sensor_gain(0.0)  {
    }
  ImageCapture_(const ContainerAllocator& _alloc)
    : acquisition_time()
    , transforms_snapshot(_alloc)
    , frame_name_image_sensor(_alloc)
    , image(_alloc)
    , capture_exposure_duration()
    , capture_sensor_gain(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _acquisition_time_type;
  _acquisition_time_type acquisition_time;

   typedef  ::spot_msgs::FrameTreeSnapshot_<ContainerAllocator>  _transforms_snapshot_type;
  _transforms_snapshot_type transforms_snapshot;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _frame_name_image_sensor_type;
  _frame_name_image_sensor_type frame_name_image_sensor;

   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _image_type;
  _image_type image;

   typedef ros::Duration _capture_exposure_duration_type;
  _capture_exposure_duration_type capture_exposure_duration;

   typedef double _capture_sensor_gain_type;
  _capture_sensor_gain_type capture_sensor_gain;





  typedef boost::shared_ptr< ::spot_msgs::ImageCapture_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_msgs::ImageCapture_<ContainerAllocator> const> ConstPtr;

}; // struct ImageCapture_

typedef ::spot_msgs::ImageCapture_<std::allocator<void> > ImageCapture;

typedef boost::shared_ptr< ::spot_msgs::ImageCapture > ImageCapturePtr;
typedef boost::shared_ptr< ::spot_msgs::ImageCapture const> ImageCaptureConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_msgs::ImageCapture_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_msgs::ImageCapture_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_msgs::ImageCapture_<ContainerAllocator1> & lhs, const ::spot_msgs::ImageCapture_<ContainerAllocator2> & rhs)
{
  return lhs.acquisition_time == rhs.acquisition_time &&
    lhs.transforms_snapshot == rhs.transforms_snapshot &&
    lhs.frame_name_image_sensor == rhs.frame_name_image_sensor &&
    lhs.image == rhs.image &&
    lhs.capture_exposure_duration == rhs.capture_exposure_duration &&
    lhs.capture_sensor_gain == rhs.capture_sensor_gain;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_msgs::ImageCapture_<ContainerAllocator1> & lhs, const ::spot_msgs::ImageCapture_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::ImageCapture_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::ImageCapture_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::ImageCapture_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::ImageCapture_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::ImageCapture_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::ImageCapture_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_msgs::ImageCapture_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3f615a6b98619410c2ebd532b7113b6e";
  }

  static const char* value(const ::spot_msgs::ImageCapture_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3f615a6b98619410ULL;
  static const uint64_t static_value2 = 0xc2ebd532b7113b6eULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_msgs::ImageCapture_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_msgs/ImageCapture";
  }

  static const char* value(const ::spot_msgs::ImageCapture_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_msgs::ImageCapture_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time acquisition_time\n"
"\n"
"FrameTreeSnapshot transforms_snapshot\n"
"string frame_name_image_sensor\n"
"\n"
"sensor_msgs/Image image\n"
"\n"
"duration capture_exposure_duration\n"
"float64 capture_sensor_gain\n"
"\n"
"================================================================================\n"
"MSG: spot_msgs/FrameTreeSnapshot\n"
"string[] child_edges\n"
"ParentEdge[] parent_edges\n"
"================================================================================\n"
"MSG: spot_msgs/ParentEdge\n"
"string parent_frame_name\n"
"geometry_msgs/Pose parent_tform_child\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/Image\n"
"# This message contains an uncompressed image\n"
"# (0, 0) is at top-left corner of image\n"
"#\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"                     # If the frame_id here and the frame_id of the CameraInfo\n"
"                     # message associated with the image conflict\n"
"                     # the behavior is undefined\n"
"\n"
"uint32 height         # image height, that is, number of rows\n"
"uint32 width          # image width, that is, number of columns\n"
"\n"
"# The legal values for encoding are in file src/image_encodings.cpp\n"
"# If you want to standardize a new string format, join\n"
"# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n"
"\n"
"string encoding       # Encoding of pixels -- channel meaning, ordering, size\n"
"                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n"
"\n"
"uint8 is_bigendian    # is this data bigendian?\n"
"uint32 step           # Full row length in bytes\n"
"uint8[] data          # actual matrix data, size is (step * rows)\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::spot_msgs::ImageCapture_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_msgs::ImageCapture_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.acquisition_time);
      stream.next(m.transforms_snapshot);
      stream.next(m.frame_name_image_sensor);
      stream.next(m.image);
      stream.next(m.capture_exposure_duration);
      stream.next(m.capture_sensor_gain);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ImageCapture_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_msgs::ImageCapture_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_msgs::ImageCapture_<ContainerAllocator>& v)
  {
    s << indent << "acquisition_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.acquisition_time);
    s << indent << "transforms_snapshot: ";
    s << std::endl;
    Printer< ::spot_msgs::FrameTreeSnapshot_<ContainerAllocator> >::stream(s, indent + "  ", v.transforms_snapshot);
    s << indent << "frame_name_image_sensor: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.frame_name_image_sensor);
    s << indent << "image: ";
    s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.image);
    s << indent << "capture_exposure_duration: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.capture_exposure_duration);
    s << indent << "capture_sensor_gain: ";
    Printer<double>::stream(s, indent + "  ", v.capture_sensor_gain);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_MSGS_MESSAGE_IMAGECAPTURE_H
