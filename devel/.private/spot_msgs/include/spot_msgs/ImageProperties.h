// Generated by gencpp from file spot_msgs/ImageProperties.msg
// DO NOT EDIT!


#ifndef SPOT_MSGS_MESSAGE_IMAGEPROPERTIES_H
#define SPOT_MSGS_MESSAGE_IMAGEPROPERTIES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Polygon.h>
#include <spot_msgs/ImageSource.h>
#include <spot_msgs/ImageCapture.h>

namespace spot_msgs
{
template <class ContainerAllocator>
struct ImageProperties_
{
  typedef ImageProperties_<ContainerAllocator> Type;

  ImageProperties_()
    : camera_source()
    , image_data_coordinates()
    , image_data_keypoint_type(0)
    , keypoint_coordinate_x()
    , keypoint_coordinate_y()
    , binary_descriptor()
    , keypoint_score()
    , keypoint_size()
    , keypoint_angle()
    , image_source()
    , image_capture()
    , frame_name_image_coordinates()  {
    }
  ImageProperties_(const ContainerAllocator& _alloc)
    : camera_source(_alloc)
    , image_data_coordinates(_alloc)
    , image_data_keypoint_type(0)
    , keypoint_coordinate_x(_alloc)
    , keypoint_coordinate_y(_alloc)
    , binary_descriptor(_alloc)
    , keypoint_score(_alloc)
    , keypoint_size(_alloc)
    , keypoint_angle(_alloc)
    , image_source(_alloc)
    , image_capture(_alloc)
    , frame_name_image_coordinates(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _camera_source_type;
  _camera_source_type camera_source;

   typedef  ::geometry_msgs::Polygon_<ContainerAllocator>  _image_data_coordinates_type;
  _image_data_coordinates_type image_data_coordinates;

   typedef uint8_t _image_data_keypoint_type_type;
  _image_data_keypoint_type_type image_data_keypoint_type;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _keypoint_coordinate_x_type;
  _keypoint_coordinate_x_type keypoint_coordinate_x;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _keypoint_coordinate_y_type;
  _keypoint_coordinate_y_type keypoint_coordinate_y;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _binary_descriptor_type;
  _binary_descriptor_type binary_descriptor;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _keypoint_score_type;
  _keypoint_score_type keypoint_score;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _keypoint_size_type;
  _keypoint_size_type keypoint_size;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _keypoint_angle_type;
  _keypoint_angle_type keypoint_angle;

   typedef  ::spot_msgs::ImageSource_<ContainerAllocator>  _image_source_type;
  _image_source_type image_source;

   typedef  ::spot_msgs::ImageCapture_<ContainerAllocator>  _image_capture_type;
  _image_capture_type image_capture;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _frame_name_image_coordinates_type;
  _frame_name_image_coordinates_type frame_name_image_coordinates;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(KEYPOINT_UNKNOWN)
  #undef KEYPOINT_UNKNOWN
#endif
#if defined(_WIN32) && defined(KEYPOINT_SIMPLE)
  #undef KEYPOINT_SIMPLE
#endif
#if defined(_WIN32) && defined(KEYPOINT_ORB)
  #undef KEYPOINT_ORB
#endif

  enum {
    KEYPOINT_UNKNOWN = 0u,
    KEYPOINT_SIMPLE = 1u,
    KEYPOINT_ORB = 2u,
  };


  typedef boost::shared_ptr< ::spot_msgs::ImageProperties_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_msgs::ImageProperties_<ContainerAllocator> const> ConstPtr;

}; // struct ImageProperties_

typedef ::spot_msgs::ImageProperties_<std::allocator<void> > ImageProperties;

typedef boost::shared_ptr< ::spot_msgs::ImageProperties > ImagePropertiesPtr;
typedef boost::shared_ptr< ::spot_msgs::ImageProperties const> ImagePropertiesConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_msgs::ImageProperties_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_msgs::ImageProperties_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_msgs::ImageProperties_<ContainerAllocator1> & lhs, const ::spot_msgs::ImageProperties_<ContainerAllocator2> & rhs)
{
  return lhs.camera_source == rhs.camera_source &&
    lhs.image_data_coordinates == rhs.image_data_coordinates &&
    lhs.image_data_keypoint_type == rhs.image_data_keypoint_type &&
    lhs.keypoint_coordinate_x == rhs.keypoint_coordinate_x &&
    lhs.keypoint_coordinate_y == rhs.keypoint_coordinate_y &&
    lhs.binary_descriptor == rhs.binary_descriptor &&
    lhs.keypoint_score == rhs.keypoint_score &&
    lhs.keypoint_size == rhs.keypoint_size &&
    lhs.keypoint_angle == rhs.keypoint_angle &&
    lhs.image_source == rhs.image_source &&
    lhs.image_capture == rhs.image_capture &&
    lhs.frame_name_image_coordinates == rhs.frame_name_image_coordinates;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_msgs::ImageProperties_<ContainerAllocator1> & lhs, const ::spot_msgs::ImageProperties_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::ImageProperties_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::ImageProperties_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::ImageProperties_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::ImageProperties_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::ImageProperties_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::ImageProperties_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_msgs::ImageProperties_<ContainerAllocator> >
{
  static const char* value()
  {
    return "94ff5688662ac7e33ef10bbd7d52e755";
  }

  static const char* value(const ::spot_msgs::ImageProperties_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x94ff5688662ac7e3ULL;
  static const uint64_t static_value2 = 0x3ef10bbd7d52e755ULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_msgs::ImageProperties_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_msgs/ImageProperties";
  }

  static const char* value(const ::spot_msgs::ImageProperties_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_msgs::ImageProperties_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string camera_source\n"
"\n"
"# Polygon coordinates\n"
"geometry_msgs/Polygon image_data_coordinates\n"
"\n"
"# Keypoint coordinates\n"
"uint8 KEYPOINT_UNKNOWN=0\n"
"uint8 KEYPOINT_SIMPLE=1\n"
"uint8 KEYPOINT_ORB=2\n"
"\n"
"uint8 image_data_keypoint_type\n"
"int32[] keypoint_coordinate_x\n"
"int32[] keypoint_coordinate_y\n"
"string[] binary_descriptor\n"
"float64[] keypoint_score\n"
"float64[] keypoint_size\n"
"float64[] keypoint_angle\n"
"\n"
"ImageSource image_source\n"
"ImageCapture image_capture\n"
"\n"
"string frame_name_image_coordinates\n"
"================================================================================\n"
"MSG: geometry_msgs/Polygon\n"
"#A specification of a polygon where the first and last points are assumed to be connected\n"
"Point32[] points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"================================================================================\n"
"MSG: spot_msgs/ImageSource\n"
"# Image type enums\n"
"uint8 IMAGE_TYPE_UNKNOWN = 0\n"
"uint8 IMAGE_TYPE_VISUAL = 1\n"
"uint8 IMAGE_TYPE_DEPTH = 2\n"
"\n"
"# Pixel format enums\n"
"uint8 PIXEL_FORMAT_UNKNOWN = 0\n"
"uint8 PIXEL_FORMAT_GREYSCALE_U8 = 1\n"
"uint8 PIXEL_FORMAT_RGB_U8 = 3\n"
"uint8 PIXEL_FORMAT_RGBA_U8 = 4\n"
"uint8 PIXEL_FORMAT_DEPTH_U16 = 5\n"
"uint8 PIXEL_FORMAT_GREYSCALE_U16 = 6\n"
"\n"
"# Image format enums\n"
"uint8 FORMAT_UNKNOWN = 0\n"
"uint8 FORMAT_JPEG = 1\n"
"uint8 FORMAT_RAW = 2\n"
"uint8 FORMAT_RLE = 3\n"
"\n"
"string name\n"
"int32 cols\n"
"int32 rows\n"
"float64 depth_scale\n"
"\n"
"# Camera pinhole model parameters\n"
"float64 focal_length_x\n"
"float64 focal_length_y\n"
"float64 principal_point_x\n"
"float64 principal_point_y\n"
"float64 skew_x\n"
"float64 skew_y\n"
"\n"
"uint8 image_type\n"
"uint8[] pixel_formats\n"
"uint8[] image_formats\n"
"\n"
"================================================================================\n"
"MSG: spot_msgs/ImageCapture\n"
"time acquisition_time\n"
"\n"
"FrameTreeSnapshot transforms_snapshot\n"
"string frame_name_image_sensor\n"
"\n"
"sensor_msgs/Image image\n"
"\n"
"duration capture_exposure_duration\n"
"float64 capture_sensor_gain\n"
"\n"
"================================================================================\n"
"MSG: spot_msgs/FrameTreeSnapshot\n"
"string[] child_edges\n"
"ParentEdge[] parent_edges\n"
"================================================================================\n"
"MSG: spot_msgs/ParentEdge\n"
"string parent_frame_name\n"
"geometry_msgs/Pose parent_tform_child\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/Image\n"
"# This message contains an uncompressed image\n"
"# (0, 0) is at top-left corner of image\n"
"#\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"                     # If the frame_id here and the frame_id of the CameraInfo\n"
"                     # message associated with the image conflict\n"
"                     # the behavior is undefined\n"
"\n"
"uint32 height         # image height, that is, number of rows\n"
"uint32 width          # image width, that is, number of columns\n"
"\n"
"# The legal values for encoding are in file src/image_encodings.cpp\n"
"# If you want to standardize a new string format, join\n"
"# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n"
"\n"
"string encoding       # Encoding of pixels -- channel meaning, ordering, size\n"
"                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n"
"\n"
"uint8 is_bigendian    # is this data bigendian?\n"
"uint32 step           # Full row length in bytes\n"
"uint8[] data          # actual matrix data, size is (step * rows)\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::spot_msgs::ImageProperties_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_msgs::ImageProperties_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.camera_source);
      stream.next(m.image_data_coordinates);
      stream.next(m.image_data_keypoint_type);
      stream.next(m.keypoint_coordinate_x);
      stream.next(m.keypoint_coordinate_y);
      stream.next(m.binary_descriptor);
      stream.next(m.keypoint_score);
      stream.next(m.keypoint_size);
      stream.next(m.keypoint_angle);
      stream.next(m.image_source);
      stream.next(m.image_capture);
      stream.next(m.frame_name_image_coordinates);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ImageProperties_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_msgs::ImageProperties_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_msgs::ImageProperties_<ContainerAllocator>& v)
  {
    s << indent << "camera_source: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.camera_source);
    s << indent << "image_data_coordinates: ";
    s << std::endl;
    Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "  ", v.image_data_coordinates);
    s << indent << "image_data_keypoint_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.image_data_keypoint_type);
    s << indent << "keypoint_coordinate_x[]" << std::endl;
    for (size_t i = 0; i < v.keypoint_coordinate_x.size(); ++i)
    {
      s << indent << "  keypoint_coordinate_x[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.keypoint_coordinate_x[i]);
    }
    s << indent << "keypoint_coordinate_y[]" << std::endl;
    for (size_t i = 0; i < v.keypoint_coordinate_y.size(); ++i)
    {
      s << indent << "  keypoint_coordinate_y[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.keypoint_coordinate_y[i]);
    }
    s << indent << "binary_descriptor[]" << std::endl;
    for (size_t i = 0; i < v.binary_descriptor.size(); ++i)
    {
      s << indent << "  binary_descriptor[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.binary_descriptor[i]);
    }
    s << indent << "keypoint_score[]" << std::endl;
    for (size_t i = 0; i < v.keypoint_score.size(); ++i)
    {
      s << indent << "  keypoint_score[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.keypoint_score[i]);
    }
    s << indent << "keypoint_size[]" << std::endl;
    for (size_t i = 0; i < v.keypoint_size.size(); ++i)
    {
      s << indent << "  keypoint_size[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.keypoint_size[i]);
    }
    s << indent << "keypoint_angle[]" << std::endl;
    for (size_t i = 0; i < v.keypoint_angle.size(); ++i)
    {
      s << indent << "  keypoint_angle[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.keypoint_angle[i]);
    }
    s << indent << "image_source: ";
    s << std::endl;
    Printer< ::spot_msgs::ImageSource_<ContainerAllocator> >::stream(s, indent + "  ", v.image_source);
    s << indent << "image_capture: ";
    s << std::endl;
    Printer< ::spot_msgs::ImageCapture_<ContainerAllocator> >::stream(s, indent + "  ", v.image_capture);
    s << indent << "frame_name_image_coordinates: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.frame_name_image_coordinates);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_MSGS_MESSAGE_IMAGEPROPERTIES_H
