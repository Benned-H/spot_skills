// Generated by gencpp from file spot_msgs/DownloadGraphResponse.msg
// DO NOT EDIT!


#ifndef SPOT_MSGS_MESSAGE_DOWNLOADGRAPHRESPONSE_H
#define SPOT_MSGS_MESSAGE_DOWNLOADGRAPHRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace spot_msgs
{
template <class ContainerAllocator>
struct DownloadGraphResponse_
{
  typedef DownloadGraphResponse_<ContainerAllocator> Type;

  DownloadGraphResponse_()
    : waypoint_ids()  {
    }
  DownloadGraphResponse_(const ContainerAllocator& _alloc)
    : waypoint_ids(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _waypoint_ids_type;
  _waypoint_ids_type waypoint_ids;





  typedef boost::shared_ptr< ::spot_msgs::DownloadGraphResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_msgs::DownloadGraphResponse_<ContainerAllocator> const> ConstPtr;

}; // struct DownloadGraphResponse_

typedef ::spot_msgs::DownloadGraphResponse_<std::allocator<void> > DownloadGraphResponse;

typedef boost::shared_ptr< ::spot_msgs::DownloadGraphResponse > DownloadGraphResponsePtr;
typedef boost::shared_ptr< ::spot_msgs::DownloadGraphResponse const> DownloadGraphResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_msgs::DownloadGraphResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_msgs::DownloadGraphResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_msgs::DownloadGraphResponse_<ContainerAllocator1> & lhs, const ::spot_msgs::DownloadGraphResponse_<ContainerAllocator2> & rhs)
{
  return lhs.waypoint_ids == rhs.waypoint_ids;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_msgs::DownloadGraphResponse_<ContainerAllocator1> & lhs, const ::spot_msgs::DownloadGraphResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::DownloadGraphResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::DownloadGraphResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::DownloadGraphResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::DownloadGraphResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::DownloadGraphResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::DownloadGraphResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_msgs::DownloadGraphResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "118b8bcfd9aa792758857e91da4c7a89";
  }

  static const char* value(const ::spot_msgs::DownloadGraphResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x118b8bcfd9aa7927ULL;
  static const uint64_t static_value2 = 0x58857e91da4c7a89ULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_msgs::DownloadGraphResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_msgs/DownloadGraphResponse";
  }

  static const char* value(const ::spot_msgs::DownloadGraphResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_msgs::DownloadGraphResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] waypoint_ids\n"
"\n"
;
  }

  static const char* value(const ::spot_msgs::DownloadGraphResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_msgs::DownloadGraphResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.waypoint_ids);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DownloadGraphResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_msgs::DownloadGraphResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_msgs::DownloadGraphResponse_<ContainerAllocator>& v)
  {
    s << indent << "waypoint_ids[]" << std::endl;
    for (size_t i = 0; i < v.waypoint_ids.size(); ++i)
    {
      s << indent << "  waypoint_ids[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.waypoint_ids[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_MSGS_MESSAGE_DOWNLOADGRAPHRESPONSE_H
