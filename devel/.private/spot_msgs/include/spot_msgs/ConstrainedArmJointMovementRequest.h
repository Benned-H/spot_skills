// Generated by gencpp from file spot_msgs/ConstrainedArmJointMovementRequest.msg
// DO NOT EDIT!


#ifndef SPOT_MSGS_MESSAGE_CONSTRAINEDARMJOINTMOVEMENTREQUEST_H
#define SPOT_MSGS_MESSAGE_CONSTRAINEDARMJOINTMOVEMENTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace spot_msgs
{
template <class ContainerAllocator>
struct ConstrainedArmJointMovementRequest_
{
  typedef ConstrainedArmJointMovementRequest_<ContainerAllocator> Type;

  ConstrainedArmJointMovementRequest_()
    : joint_target()
    , max_execution_time(0.0)
    , max_velocity(0.0)
    , max_acceleration(0.0)  {
    }
  ConstrainedArmJointMovementRequest_(const ContainerAllocator& _alloc)
    : joint_target(_alloc)
    , max_execution_time(0.0)
    , max_velocity(0.0)
    , max_acceleration(0.0)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _joint_target_type;
  _joint_target_type joint_target;

   typedef double _max_execution_time_type;
  _max_execution_time_type max_execution_time;

   typedef double _max_velocity_type;
  _max_velocity_type max_velocity;

   typedef double _max_acceleration_type;
  _max_acceleration_type max_acceleration;





  typedef boost::shared_ptr< ::spot_msgs::ConstrainedArmJointMovementRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_msgs::ConstrainedArmJointMovementRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ConstrainedArmJointMovementRequest_

typedef ::spot_msgs::ConstrainedArmJointMovementRequest_<std::allocator<void> > ConstrainedArmJointMovementRequest;

typedef boost::shared_ptr< ::spot_msgs::ConstrainedArmJointMovementRequest > ConstrainedArmJointMovementRequestPtr;
typedef boost::shared_ptr< ::spot_msgs::ConstrainedArmJointMovementRequest const> ConstrainedArmJointMovementRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_msgs::ConstrainedArmJointMovementRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_msgs::ConstrainedArmJointMovementRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_msgs::ConstrainedArmJointMovementRequest_<ContainerAllocator1> & lhs, const ::spot_msgs::ConstrainedArmJointMovementRequest_<ContainerAllocator2> & rhs)
{
  return lhs.joint_target == rhs.joint_target &&
    lhs.max_execution_time == rhs.max_execution_time &&
    lhs.max_velocity == rhs.max_velocity &&
    lhs.max_acceleration == rhs.max_acceleration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_msgs::ConstrainedArmJointMovementRequest_<ContainerAllocator1> & lhs, const ::spot_msgs::ConstrainedArmJointMovementRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::ConstrainedArmJointMovementRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::ConstrainedArmJointMovementRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::ConstrainedArmJointMovementRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::ConstrainedArmJointMovementRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::ConstrainedArmJointMovementRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::ConstrainedArmJointMovementRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_msgs::ConstrainedArmJointMovementRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a082e7ef50d130896e56c126137b38d3";
  }

  static const char* value(const ::spot_msgs::ConstrainedArmJointMovementRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa082e7ef50d13089ULL;
  static const uint64_t static_value2 = 0x6e56c126137b38d3ULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_msgs::ConstrainedArmJointMovementRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_msgs/ConstrainedArmJointMovementRequest";
  }

  static const char* value(const ::spot_msgs::ConstrainedArmJointMovementRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_msgs::ConstrainedArmJointMovementRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] joint_target\n"
"float64 max_execution_time\n"
"float64 max_velocity\n"
"float64 max_acceleration\n"
;
  }

  static const char* value(const ::spot_msgs::ConstrainedArmJointMovementRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_msgs::ConstrainedArmJointMovementRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_target);
      stream.next(m.max_execution_time);
      stream.next(m.max_velocity);
      stream.next(m.max_acceleration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConstrainedArmJointMovementRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_msgs::ConstrainedArmJointMovementRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_msgs::ConstrainedArmJointMovementRequest_<ContainerAllocator>& v)
  {
    s << indent << "joint_target[]" << std::endl;
    for (size_t i = 0; i < v.joint_target.size(); ++i)
    {
      s << indent << "  joint_target[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_target[i]);
    }
    s << indent << "max_execution_time: ";
    Printer<double>::stream(s, indent + "  ", v.max_execution_time);
    s << indent << "max_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.max_velocity);
    s << indent << "max_acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.max_acceleration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_MSGS_MESSAGE_CONSTRAINEDARMJOINTMOVEMENTREQUEST_H
