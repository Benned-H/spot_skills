// Generated by gencpp from file spot_msgs/SpotCheckPayload.msg
// DO NOT EDIT!


#ifndef SPOT_MSGS_MESSAGE_SPOTCHECKPAYLOAD_H
#define SPOT_MSGS_MESSAGE_SPOTCHECKPAYLOAD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace spot_msgs
{
template <class ContainerAllocator>
struct SpotCheckPayload_
{
  typedef SpotCheckPayload_<ContainerAllocator> Type;

  SpotCheckPayload_()
    : error(0)
    , extra_payload(0.0)  {
    }
  SpotCheckPayload_(const ContainerAllocator& _alloc)
    : error(0)
    , extra_payload(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _error_type;
  _error_type error;

   typedef float _extra_payload_type;
  _extra_payload_type extra_payload;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ERROR_UNKNOWN)
  #undef ERROR_UNKNOWN
#endif
#if defined(_WIN32) && defined(ERROR_NONE)
  #undef ERROR_NONE
#endif
#if defined(_WIN32) && defined(ERROR_MASS_DISCREPANCY)
  #undef ERROR_MASS_DISCREPANCY
#endif

  enum {
    ERROR_UNKNOWN = 0u,
    ERROR_NONE = 1u,
    ERROR_MASS_DISCREPANCY = 2u,
  };


  typedef boost::shared_ptr< ::spot_msgs::SpotCheckPayload_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_msgs::SpotCheckPayload_<ContainerAllocator> const> ConstPtr;

}; // struct SpotCheckPayload_

typedef ::spot_msgs::SpotCheckPayload_<std::allocator<void> > SpotCheckPayload;

typedef boost::shared_ptr< ::spot_msgs::SpotCheckPayload > SpotCheckPayloadPtr;
typedef boost::shared_ptr< ::spot_msgs::SpotCheckPayload const> SpotCheckPayloadConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_msgs::SpotCheckPayload_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_msgs::SpotCheckPayload_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_msgs::SpotCheckPayload_<ContainerAllocator1> & lhs, const ::spot_msgs::SpotCheckPayload_<ContainerAllocator2> & rhs)
{
  return lhs.error == rhs.error &&
    lhs.extra_payload == rhs.extra_payload;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_msgs::SpotCheckPayload_<ContainerAllocator1> & lhs, const ::spot_msgs::SpotCheckPayload_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::SpotCheckPayload_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::SpotCheckPayload_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::SpotCheckPayload_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::SpotCheckPayload_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::SpotCheckPayload_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::SpotCheckPayload_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_msgs::SpotCheckPayload_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8a5462c1672d0b3443d0f93dc832b167";
  }

  static const char* value(const ::spot_msgs::SpotCheckPayload_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8a5462c1672d0b34ULL;
  static const uint64_t static_value2 = 0x43d0f93dc832b167ULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_msgs::SpotCheckPayload_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_msgs/SpotCheckPayload";
  }

  static const char* value(const ::spot_msgs::SpotCheckPayload_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_msgs::SpotCheckPayload_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Errors reflect an issue with payload configuration.\n"
"\n"
"# Unused enum.\n"
"uint8 ERROR_UNKNOWN = 0\n"
"# No error found in the payloads.\n"
"uint8 ERROR_NONE = 1\n"
"# There is a mass discrepancy between the registered payload and what is estimated.\n"
"uint8 ERROR_MASS_DISCREPANCY = 2\n"
"\n"
"# A flag to indicate if configuration has an error.\n"
"uint8 error\n"
"\n"
"# Indicates how much extra payload (in kg) we think the robot has\n"
"# Positive indicates robot has more payload than it is configured.\n"
"# Negative indicates robot has less payload than it is configured.\n"
"float32 extra_payload\n"
;
  }

  static const char* value(const ::spot_msgs::SpotCheckPayload_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_msgs::SpotCheckPayload_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.error);
      stream.next(m.extra_payload);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpotCheckPayload_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_msgs::SpotCheckPayload_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_msgs::SpotCheckPayload_<ContainerAllocator>& v)
  {
    s << indent << "error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error);
    s << indent << "extra_payload: ";
    Printer<float>::stream(s, indent + "  ", v.extra_payload);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_MSGS_MESSAGE_SPOTCHECKPAYLOAD_H
