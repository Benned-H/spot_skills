// Generated by gencpp from file spot_msgs/Grasp3dRequest.msg
// DO NOT EDIT!


#ifndef SPOT_MSGS_MESSAGE_GRASP3DREQUEST_H
#define SPOT_MSGS_MESSAGE_GRASP3DREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace spot_msgs
{
template <class ContainerAllocator>
struct Grasp3dRequest_
{
  typedef Grasp3dRequest_<ContainerAllocator> Type;

  Grasp3dRequest_()
    : frame_name()
    , object_rt_frame()  {
      object_rt_frame.assign(0.0);
  }
  Grasp3dRequest_(const ContainerAllocator& _alloc)
    : frame_name(_alloc)
    , object_rt_frame()  {
  (void)_alloc;
      object_rt_frame.assign(0.0);
  }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _frame_name_type;
  _frame_name_type frame_name;

   typedef boost::array<double, 3>  _object_rt_frame_type;
  _object_rt_frame_type object_rt_frame;





  typedef boost::shared_ptr< ::spot_msgs::Grasp3dRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_msgs::Grasp3dRequest_<ContainerAllocator> const> ConstPtr;

}; // struct Grasp3dRequest_

typedef ::spot_msgs::Grasp3dRequest_<std::allocator<void> > Grasp3dRequest;

typedef boost::shared_ptr< ::spot_msgs::Grasp3dRequest > Grasp3dRequestPtr;
typedef boost::shared_ptr< ::spot_msgs::Grasp3dRequest const> Grasp3dRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_msgs::Grasp3dRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_msgs::Grasp3dRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_msgs::Grasp3dRequest_<ContainerAllocator1> & lhs, const ::spot_msgs::Grasp3dRequest_<ContainerAllocator2> & rhs)
{
  return lhs.frame_name == rhs.frame_name &&
    lhs.object_rt_frame == rhs.object_rt_frame;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_msgs::Grasp3dRequest_<ContainerAllocator1> & lhs, const ::spot_msgs::Grasp3dRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::Grasp3dRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::Grasp3dRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::Grasp3dRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::Grasp3dRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::Grasp3dRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::Grasp3dRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_msgs::Grasp3dRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "137192c88d2c462af8e3f3418526b82a";
  }

  static const char* value(const ::spot_msgs::Grasp3dRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x137192c88d2c462aULL;
  static const uint64_t static_value2 = 0xf8e3f3418526b82aULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_msgs::Grasp3dRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_msgs/Grasp3dRequest";
  }

  static const char* value(const ::spot_msgs::Grasp3dRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_msgs::Grasp3dRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference#pickobject\n"
"string frame_name # name of the tf frame\n"
"float64[3] object_rt_frame # x,y,z of the object in the frame named above\n"
;
  }

  static const char* value(const ::spot_msgs::Grasp3dRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_msgs::Grasp3dRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frame_name);
      stream.next(m.object_rt_frame);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Grasp3dRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_msgs::Grasp3dRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_msgs::Grasp3dRequest_<ContainerAllocator>& v)
  {
    s << indent << "frame_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.frame_name);
    s << indent << "object_rt_frame[]" << std::endl;
    for (size_t i = 0; i < v.object_rt_frame.size(); ++i)
    {
      s << indent << "  object_rt_frame[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.object_rt_frame[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_MSGS_MESSAGE_GRASP3DREQUEST_H
