// Generated by gencpp from file spot_msgs/SpotCheckLoadCell.msg
// DO NOT EDIT!


#ifndef SPOT_MSGS_MESSAGE_SPOTCHECKLOADCELL_H
#define SPOT_MSGS_MESSAGE_SPOTCHECKLOADCELL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace spot_msgs
{
template <class ContainerAllocator>
struct SpotCheckLoadCell_
{
  typedef SpotCheckLoadCell_<ContainerAllocator> Type;

  SpotCheckLoadCell_()
    : error(0)
    , zero(0.0)
    , old_zero(0.0)  {
    }
  SpotCheckLoadCell_(const ContainerAllocator& _alloc)
    : error(0)
    , zero(0.0)
    , old_zero(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _error_type;
  _error_type error;

   typedef float _zero_type;
  _zero_type zero;

   typedef float _old_zero_type;
  _old_zero_type old_zero;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ERROR_UNKNOWN)
  #undef ERROR_UNKNOWN
#endif
#if defined(_WIN32) && defined(ERROR_NONE)
  #undef ERROR_NONE
#endif
#if defined(_WIN32) && defined(ERROR_ZERO_OUT_OF_RANGE)
  #undef ERROR_ZERO_OUT_OF_RANGE
#endif

  enum {
    ERROR_UNKNOWN = 0u,
    ERROR_NONE = 1u,
    ERROR_ZERO_OUT_OF_RANGE = 2u,
  };


  typedef boost::shared_ptr< ::spot_msgs::SpotCheckLoadCell_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_msgs::SpotCheckLoadCell_<ContainerAllocator> const> ConstPtr;

}; // struct SpotCheckLoadCell_

typedef ::spot_msgs::SpotCheckLoadCell_<std::allocator<void> > SpotCheckLoadCell;

typedef boost::shared_ptr< ::spot_msgs::SpotCheckLoadCell > SpotCheckLoadCellPtr;
typedef boost::shared_ptr< ::spot_msgs::SpotCheckLoadCell const> SpotCheckLoadCellConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_msgs::SpotCheckLoadCell_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_msgs::SpotCheckLoadCell_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_msgs::SpotCheckLoadCell_<ContainerAllocator1> & lhs, const ::spot_msgs::SpotCheckLoadCell_<ContainerAllocator2> & rhs)
{
  return lhs.error == rhs.error &&
    lhs.zero == rhs.zero &&
    lhs.old_zero == rhs.old_zero;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_msgs::SpotCheckLoadCell_<ContainerAllocator1> & lhs, const ::spot_msgs::SpotCheckLoadCell_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::SpotCheckLoadCell_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::SpotCheckLoadCell_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::SpotCheckLoadCell_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::SpotCheckLoadCell_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::SpotCheckLoadCell_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::SpotCheckLoadCell_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_msgs::SpotCheckLoadCell_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bfb62ba66777d3800f98e3fc7140667a";
  }

  static const char* value(const ::spot_msgs::SpotCheckLoadCell_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbfb62ba66777d380ULL;
  static const uint64_t static_value2 = 0x0f98e3fc7140667aULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_msgs::SpotCheckLoadCell_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_msgs/SpotCheckLoadCell";
  }

  static const char* value(const ::spot_msgs::SpotCheckLoadCell_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_msgs::SpotCheckLoadCell_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 ERROR_UNKNOWN = 0              # Unused enum.\n"
"uint8 ERROR_NONE = 1                 # No hardware error detected.\n"
"uint8 ERROR_ZERO_OUT_OF_RANGE = 2    # Load cell calibration failure.\n"
"\n"
"# The loadcell error code\n"
"uint8 error\n"
"# The current loadcell zero as fraction of full range [0-1]\n"
"float32 zero\n"
"# The previous loadcell zero as fraction of full range [0-1]\n"
"float32 old_zero\n"
;
  }

  static const char* value(const ::spot_msgs::SpotCheckLoadCell_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_msgs::SpotCheckLoadCell_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.error);
      stream.next(m.zero);
      stream.next(m.old_zero);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpotCheckLoadCell_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_msgs::SpotCheckLoadCell_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_msgs::SpotCheckLoadCell_<ContainerAllocator>& v)
  {
    s << indent << "error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error);
    s << indent << "zero: ";
    Printer<float>::stream(s, indent + "  ", v.zero);
    s << indent << "old_zero: ";
    Printer<float>::stream(s, indent + "  ", v.old_zero);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_MSGS_MESSAGE_SPOTCHECKLOADCELL_H
