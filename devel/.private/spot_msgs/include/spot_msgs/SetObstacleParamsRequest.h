// Generated by gencpp from file spot_msgs/SetObstacleParamsRequest.msg
// DO NOT EDIT!


#ifndef SPOT_MSGS_MESSAGE_SETOBSTACLEPARAMSREQUEST_H
#define SPOT_MSGS_MESSAGE_SETOBSTACLEPARAMSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <spot_msgs/ObstacleParams.h>

namespace spot_msgs
{
template <class ContainerAllocator>
struct SetObstacleParamsRequest_
{
  typedef SetObstacleParamsRequest_<ContainerAllocator> Type;

  SetObstacleParamsRequest_()
    : obstacle_params()  {
    }
  SetObstacleParamsRequest_(const ContainerAllocator& _alloc)
    : obstacle_params(_alloc)  {
  (void)_alloc;
    }



   typedef  ::spot_msgs::ObstacleParams_<ContainerAllocator>  _obstacle_params_type;
  _obstacle_params_type obstacle_params;





  typedef boost::shared_ptr< ::spot_msgs::SetObstacleParamsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_msgs::SetObstacleParamsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetObstacleParamsRequest_

typedef ::spot_msgs::SetObstacleParamsRequest_<std::allocator<void> > SetObstacleParamsRequest;

typedef boost::shared_ptr< ::spot_msgs::SetObstacleParamsRequest > SetObstacleParamsRequestPtr;
typedef boost::shared_ptr< ::spot_msgs::SetObstacleParamsRequest const> SetObstacleParamsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_msgs::SetObstacleParamsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_msgs::SetObstacleParamsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_msgs::SetObstacleParamsRequest_<ContainerAllocator1> & lhs, const ::spot_msgs::SetObstacleParamsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.obstacle_params == rhs.obstacle_params;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_msgs::SetObstacleParamsRequest_<ContainerAllocator1> & lhs, const ::spot_msgs::SetObstacleParamsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::SetObstacleParamsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::SetObstacleParamsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::SetObstacleParamsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::SetObstacleParamsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::SetObstacleParamsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::SetObstacleParamsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_msgs::SetObstacleParamsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "40db8075f91685db646bf10f6ec7202f";
  }

  static const char* value(const ::spot_msgs::SetObstacleParamsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x40db8075f91685dbULL;
  static const uint64_t static_value2 = 0x646bf10f6ec7202fULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_msgs::SetObstacleParamsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_msgs/SetObstacleParamsRequest";
  }

  static const char* value(const ::spot_msgs::SetObstacleParamsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_msgs::SetObstacleParamsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_msgs/ObstacleParams obstacle_params\n"
"\n"
"================================================================================\n"
"MSG: spot_msgs/ObstacleParams\n"
"# see https://dev.bostondynamics.com/protos/bosdyn/api/proto_reference.html?highlight=power_state#obstacleparams\n"
"bool disable_vision_foot_obstacle_avoidance\n"
"bool disable_vision_foot_constraint_avoidance\n"
"bool disable_vision_body_obstacle_avoidance\n"
"float32 obstacle_avoidance_padding\n"
"bool disable_vision_foot_obstacle_body_assist\n"
"bool disable_vision_negative_obstacles\n"
;
  }

  static const char* value(const ::spot_msgs::SetObstacleParamsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_msgs::SetObstacleParamsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obstacle_params);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetObstacleParamsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_msgs::SetObstacleParamsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_msgs::SetObstacleParamsRequest_<ContainerAllocator>& v)
  {
    s << indent << "obstacle_params: ";
    s << std::endl;
    Printer< ::spot_msgs::ObstacleParams_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacle_params);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_MSGS_MESSAGE_SETOBSTACLEPARAMSREQUEST_H
