[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "spot_skills_py"
version = "0.0.1"
authors = [{ name = "Benned Hedegaard", email = "bhedegaa@cs.brown.edu" }]
description = "Motion-planning-based skills for Boston Dynamics' Spot robot."
classifiers = ["Typing :: Typed"]

readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">= 3.8"

dependencies = ["numpy", "trimesh", "scipy", "pycollada", "pyglet<2", "scipy>=1.5", "rosnumpy", "robotics_utils", "transform_utils", "bosdyn-client"]


[tool.uv]
dev-dependencies = ["ruff", "pytest", "hypothesis", "pytest-cov", "mypy"]


[tool.uv.sources] # Here, `workspace = true` tells uv to resolve the dependency using a workspace member
spot_skills_py = { path = "src/spot_skills/src/spot_skills_py", editable = true }
robotics_utils = { workspace = true }
transform_utils = { workspace = true }

[tool.uv.workspace]
# Workspace: "a collection of one or more packages, called workspace members, that are managed together."
# Reference: https://docs.astral.sh/uv/concepts/projects/workspaces/

# Each member directory must contain a pyproject.toml file
members = ["src/spot_skills/src/robotics_utils", "src/spot_skills/src/transform_utils"]


[tool.hatch.build.targets.wheel]
packages = [
    "src/spot_skills/src/spot_skills_py",
    "src/spot_skills/src/robotics_utils",
    "src/tmp3/src/tmp3",
    "src/spot_skills/src/transform_utils",
] # Include packages at these paths


[tool.ruff]
line-length = 100
indent-width = 4

[tool.ruff.lint]
select = ["ALL"] # Default to all Ruff rules, add ignores as needed
ignore = [
    "D203", # Don't place a blank line before a class docstring
    "D213", # Don't begin a docstring on its second line
    "TRY003", # Permit defining exception messages at point of raising
    "EM101",  # Allow using string literals directly within exception constructors
    "EM102",  # Allow using f-strings directly within exception constructors
]
unfixable = ["F401"] # Disable 'fix' for unused imports

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true # Allow omission of return type on __init__

[tool.ruff.lint.per-file-ignores]
"**/tests/*" = ["S101"]   # Allow assertions in test files
"**/scripts/*" = ["T201"] # Allow print statements in scripts

[tool.ruff.format] # Use the same settings as Black
quote-style = "double"
indent-style = "space"

[tool.hatch.envs.hatch-static-analysis]
config-path = "none" # Use this Ruff config, not Hatch's


[tool.mypy]
disallow_incomplete_defs = true # Disallow functions with incomplete type annotations
check_untyped_defs = true # Type-check the interior of unannotated functions
warn_return_any = true # Warn when returning type Any from a function that says otherwise
show_error_code_links = true # Show links to error code docs
warn_unused_configs = true # Warn if any per-module sections in the config file go unused